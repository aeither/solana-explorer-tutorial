{"version":3,"sources":["../../src/index.tsx"],"names":["FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","React","useCallback","current","focus","focusables","length","nextTick","onDeactivation","returnFocus","__DEV__","displayName"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;;;AAoDO,IAAMA,SAAmC,GAAG,SAAtCA,SAAsC,CAACC,KAAD,EAAW;AAAA,MAE1DC,eAF0D,GAWxDD,KAXwD,CAE1DC,eAF0D;AAAA,MAG1DC,aAH0D,GAWxDF,KAXwD,CAG1DE,aAH0D;AAAA,MAI1DC,UAJ0D,GAWxDH,KAXwD,CAI1DG,UAJ0D;AAAA,MAK1DC,YAL0D,GAWxDJ,KAXwD,CAK1DI,YAL0D;AAAA,MAM1DC,QAN0D,GAWxDL,KAXwD,CAM1DK,QAN0D;AAAA,MAO1DC,UAP0D,GAWxDN,KAXwD,CAO1DM,UAP0D;AAAA,MAQ1DC,SAR0D,GAWxDP,KAXwD,CAQ1DO,SAR0D;AAAA,MAS1DC,eAT0D,GAWxDR,KAXwD,CAS1DQ,eAT0D;AAAA,MAU1DC,qBAV0D,GAWxDT,KAXwD,CAU1DS,qBAV0D;AAa5D,MAAMC,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAkB,YAAM;AAC3C,QAAIX,eAAJ,YAAIA,eAAe,CAAEY,OAArB,EAA8B;AAC5BZ,MAAAA,eAAe,CAACY,OAAhB,CAAwBC,KAAxB;AACD,KAFD,MAEO,IAAIX,UAAJ,YAAIA,UAAU,CAAEU,OAAhB,EAAyB;AAC9B,UAAME,UAAU,GAAG,4BAAgBZ,UAAU,CAACU,OAA3B,CAAnB;;AACA,UAAIE,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,0BAAMb,UAAU,CAACU,OAAjB,EAA0B;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAA1B;AACD;AACF;AACF,GAToB,EASlB,CAAChB,eAAD,EAAkBE,UAAlB,CATkB,CAArB;AAWA,MAAMe,cAAc,GAAGP,KAAK,CAACC,WAAN,CAAkB,YAAM;AAAA;;AAC7CV,IAAAA,aAAa,QAAb,qCAAAA,aAAa,CAAEW,OAAf,2CAAwBC,KAAxB;AACD,GAFsB,EAEpB,CAACZ,aAAD,CAFoB,CAAvB;AAIA,MAAMiB,WAAW,GAAGf,YAAY,IAAI,CAACF,aAArC;AAEA,sBACE,oBAAC,0BAAD;AACE,IAAA,UAAU,EAAEO,qBADd;AAEE,IAAA,eAAe,EAAED,eAFnB;AAGE,IAAA,SAAS,EAAED,SAHb;AAIE,IAAA,QAAQ,EAAED,UAJZ;AAKE,IAAA,YAAY,EAAEI,YALhB;AAME,IAAA,cAAc,EAAEQ,cANlB;AAOE,IAAA,WAAW,EAAEC;AAPf,KASGd,QATH,CADF;AAaD,CA3CM;;;;AA6CP,IAAIe,cAAJ,EAAa;AACXrB,EAAAA,SAAS,CAACsB,WAAV,GAAwB,WAAxB;AACD;;eAEctB,S","sourcesContent":["import * as React from \"react\"\nimport ReactFocusLock from \"react-focus-lock\"\nimport {\n  __DEV__,\n  getAllFocusable,\n  focus,\n  FocusableElement,\n} from \"@chakra-ui/utils\"\n\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focuable element within the `children`\n   * will ne auto-focused once `FocusLock` mounts\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock.\n   * @default `false`\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = React.useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        focus(contentRef.current, { nextTick: true })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = React.useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <ReactFocusLock\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </ReactFocusLock>\n  )\n}\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\"\n}\n\nexport default FocusLock\n"],"file":"index.js"}