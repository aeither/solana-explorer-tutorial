{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/lin/Documents/Projects/solana-explorer-tutorial/src/TpsCard.tsx\",\n    _s = $RefreshSig$();\n\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { Table, Tbody, Tr, Th, Td, Heading, VStack } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var SAMPLE_HISTORY_HOURS = 6;\nexport default function TpsCard() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      tpsStats = _useState2[0],\n      setTpsStats = _useState2[1];\n\n  useEffect(function () {\n    getTpsStats();\n  }, []);\n\n  function getTpsStats() {\n    return _getTpsStats.apply(this, arguments);\n  }\n\n  function _getTpsStats() {\n    _getTpsStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, connection, samples, short, avgTps, transactionCount, averageTps, tpsData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = clusterApiUrl(\"devnet\").replace(\"api\", \"explorer-api\");\n              connection = new Connection(url);\n              _context.next = 4;\n              return connection.getRecentPerformanceSamples(60 * SAMPLE_HISTORY_HOURS);\n\n            case 4:\n              samples = _context.sent;\n              short = samples.filter(function (sample) {\n                return sample.numTransactions !== 0;\n              }).map(function (sample) {\n                return sample.numTransactions / sample.samplePeriodSecs;\n              });\n              avgTps = short[0];\n              _context.next = 9;\n              return connection.getTransactionCount();\n\n            case 9:\n              transactionCount = _context.sent;\n              averageTps = Math.round(avgTps).toLocaleString(\"en-US\"); // console.log(samples);\n\n              tpsData = {\n                transactionCount: transactionCount,\n                averageTps: averageTps\n              };\n              setTpsStats(tpsData);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getTpsStats.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    my: \"2\",\n    w: \"100%\",\n    align: \"start\",\n    background: \"white\",\n    rounded: \"lg\",\n    p: \"4\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      size: \"md\",\n      children: \"Transaction Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), tpsStats ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        variant: \"simple\",\n        children: /*#__PURE__*/_jsxDEV(Tbody, {\n          children: [/*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Td, {\n              children: \"Transaction count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Td, {\n              isNumeric: true,\n              children: tpsStats.transactionCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Th, {\n              children: \"Transactions per second (TPS)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              isNumeric: true,\n              children: tpsStats.averageTps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TpsCard, \"fKLKBh0ENkxMZDfki4+BDqBPZXc=\");\n\n_c = TpsCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TpsCard\");","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/src/TpsCard.tsx"],"names":["Connection","clusterApiUrl","useEffect","useState","Table","Tbody","Tr","Th","Td","Heading","VStack","SAMPLE_HISTORY_HOURS","TpsCard","tpsStats","setTpsStats","getTpsStats","url","replace","connection","getRecentPerformanceSamples","samples","short","filter","sample","numTransactions","map","samplePeriodSecs","avgTps","getTransactionCount","transactionCount","averageTps","Math","round","toLocaleString","tpsData"],"mappings":";;;;;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,iBAA1C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,KADF,EAEEC,KAFF,EAGEC,EAHF,EAIEC,EAJF,EAKEC,EALF,EAMEC,OANF,EAOEC,MAPF,QAQO,kBARP;;;AAUA,OAAO,IAAMC,oBAAoB,GAAG,CAA7B;AAOP,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,kBAAgCT,QAAQ,EAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACAZ,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT;;AAFgC,WAKjBA,WALiB;AAAA;AAAA;;AAAA;AAAA,4EAKhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,GADR,GACcf,aAAa,CAAC,QAAD,CAAb,CAAwBgB,OAAxB,CAAgC,KAAhC,EAAuC,cAAvC,CADd;AAEQC,cAAAA,UAFR,GAEqB,IAAIlB,UAAJ,CAAegB,GAAf,CAFrB;AAAA;AAAA,qBAGwBE,UAAU,CAACC,2BAAX,CACpB,KAAKR,oBADe,CAHxB;;AAAA;AAGQS,cAAAA,OAHR;AAMMC,cAAAA,KANN,GAMcD,OAAO,CAChBE,MADS,CACF,UAACC,MAAD,EAAY;AAClB,uBAAOA,MAAM,CAACC,eAAP,KAA2B,CAAlC;AACD,eAHS,EAITC,GAJS,CAIL,UAACF,MAAD,EAAY;AACf,uBAAOA,MAAM,CAACC,eAAP,GAAyBD,MAAM,CAACG,gBAAvC;AACD,eANS,CANd;AAaQC,cAAAA,MAbR,GAaiBN,KAAK,CAAC,CAAD,CAbtB;AAAA;AAAA,qBAeiCH,UAAU,CAACU,mBAAX,EAfjC;;AAAA;AAeQC,cAAAA,gBAfR;AAgBQC,cAAAA,UAhBR,GAgBqBC,IAAI,CAACC,KAAL,CAAWL,MAAX,EAAmBM,cAAnB,CAAkC,OAAlC,CAhBrB,EAkBE;;AACMC,cAAAA,OAnBR,GAmBkB;AACdL,gBAAAA,gBAAgB,EAAhBA,gBADc;AAEdC,gBAAAA,UAAU,EAAVA;AAFc,eAnBlB;AAuBEhB,cAAAA,WAAW,CAACoB,OAAD,CAAX;;AAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALgC;AAAA;AAAA;;AA8BhC,sBACE,QAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,GAAX;AAAe,IAAA,CAAC,EAAC,MAAjB;AAAwB,IAAA,KAAK,EAAC,OAA9B;AAAsC,IAAA,UAAU,EAAC,OAAjD;AAAyD,IAAA,OAAO,EAAC,IAAjE;AAAsE,IAAA,CAAC,EAAC,GAAxE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGrB,QAAQ,gBACP;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,QAAf;AAAA,+BACE,QAAC,KAAD;AAAA,kCACE,QAAC,EAAD;AAAA,oCACE,QAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,EAAD;AAAI,cAAA,SAAS,MAAb;AAAA,wBAAeA,QAAQ,CAACgB;AAAxB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,EAAD;AAAA,oCACE,QAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,EAAD;AAAI,cAAA,SAAS,MAAb;AAAA,wBAAehB,QAAQ,CAACiB;AAAxB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,qBADO,gBAgBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GArDuBlB,O;;KAAAA,O","sourcesContent":["import { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Heading,\n  VStack,\n} from \"@chakra-ui/react\";\n\nexport const SAMPLE_HISTORY_HOURS = 6;\n\nexport type TpsStats = {\n  transactionCount: number;\n  averageTps: string;\n};\n\nexport default function TpsCard() {\n  const [tpsStats, setTpsStats] = useState<TpsStats>();\n  useEffect(() => {\n    getTpsStats();\n  },[]);\n  async function getTpsStats() {\n    const url = clusterApiUrl(\"devnet\").replace(\"api\", \"explorer-api\");\n    const connection = new Connection(url);\n    const samples = await connection.getRecentPerformanceSamples(\n      60 * SAMPLE_HISTORY_HOURS\n    );\n    let short = samples\n      .filter((sample) => {\n        return sample.numTransactions !== 0;\n      })\n      .map((sample) => {\n        return sample.numTransactions / sample.samplePeriodSecs;\n      });\n    const avgTps = short[0];\n\n    const transactionCount = await connection.getTransactionCount();\n    const averageTps = Math.round(avgTps).toLocaleString(\"en-US\");\n\n    // console.log(samples);\n    const tpsData = {\n      transactionCount,\n      averageTps,\n    };\n    setTpsStats(tpsData);\n  }\n  return (\n    <VStack my=\"2\" w=\"100%\" align=\"start\" background=\"white\" rounded=\"lg\" p=\"4\">\n      <Heading size=\"md\">Transaction Stats</Heading>\n      {tpsStats ? (\n        <>\n          <Table variant=\"simple\">\n            <Tbody>\n              <Tr>\n                <Td>Transaction count</Td>\n                <Td isNumeric>{tpsStats.transactionCount}</Td>\n              </Tr>\n              <Tr>\n                <Th>Transactions per second (TPS)</Th>\n                <Th isNumeric>{tpsStats.averageTps}</Th>\n              </Tr>\n            </Tbody>\n          </Table>\n        </>\n      ) : (\n        <p>No Data</p>\n      )}\n    </VStack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}