{"version":3,"sources":["../../../src/create-theme-vars/css-var.ts"],"names":["replaceWhiteSpace","value","replaceValue","replace","escape","valueStr","toString","includes","isDecimal","Number","isInteger","parseFloat","addPrefix","prefix","filter","Boolean","join","toVarReference","name","fallback","toVarDefinition","cssVar","cssVarPrefix","cssVariable","variable","reference"],"mappings":";;;;;;;;AAAA,SAASA,iBAAT,CAA2BC,KAA3B,EAA0CC,YAA1C,EAA8D;AAAA,MAApBA,YAAoB;AAApBA,IAAAA,YAAoB,GAAL,GAAK;AAAA;;AAC5D,SAAOD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsBD,YAAtB,CAAP;AACD;;AAED,SAASE,MAAT,CAAgBH,KAAhB,EAAwC;AACtC,MAAMI,QAAQ,GAAGL,iBAAiB,CAACC,KAAK,CAACK,QAAN,EAAD,CAAlC;AACA,MAAID,QAAQ,CAACE,QAAT,CAAkB,KAAlB,CAAJ,EAA8B,OAAON,KAAP;AAC9B,MAAMO,SAAS,GAAG,CAACC,MAAM,CAACC,SAAP,CAAiBC,UAAU,CAACV,KAAK,CAACK,QAAN,EAAD,CAA3B,CAAnB;AACA,SAAOE,SAAS,GAAGH,QAAQ,CAACF,OAAT,CAAiB,GAAjB,QAAH,GAAkCF,KAAlD;AACD;;AAEM,SAASW,SAAT,CAAmBX,KAAnB,EAAkCY,MAAlC,EAA+C;AAAA,MAAbA,MAAa;AAAbA,IAAAA,MAAa,GAAJ,EAAI;AAAA;;AACpD,SAAO,CAACA,MAAD,EAAST,MAAM,CAACH,KAAD,CAAf,EAAwBa,MAAxB,CAA+BC,OAA/B,EAAwCC,IAAxC,CAA6C,GAA7C,CAAP;AACD;;AAEM,SAASC,cAAT,CAAwBC,IAAxB,EAAsCC,QAAtC,EAAyD;AAC9D,kBAAcf,MAAM,CAACc,IAAD,CAApB,IAA6BC,QAAQ,UAAQA,QAAR,GAAqB,EAA1D;AACD;;AAEM,SAASC,eAAT,CAAyBnB,KAAzB,EAAwCY,MAAxC,EAAqD;AAAA,MAAbA,MAAa;AAAbA,IAAAA,MAAa,GAAJ,EAAI;AAAA;;AAC1D,gBAAYD,SAAS,CAACX,KAAD,EAAQY,MAAR,CAArB;AACD;;AAEM,SAASQ,MAAT,CAAgBH,IAAhB,EAA8BC,QAA9B,EAAiDG,YAAjD,EAAwE;AAC7E,MAAMC,WAAW,GAAGH,eAAe,CAACF,IAAD,EAAOI,YAAP,CAAnC;AACA,SAAO;AACLE,IAAAA,QAAQ,EAAED,WADL;AAELE,IAAAA,SAAS,EAAER,cAAc,CAACM,WAAD,EAAcJ,QAAd;AAFpB,GAAP;AAID","sourcesContent":["function replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  const isDecimal = !Number.isInteger(parseFloat(value.toString()))\n  return isDecimal ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarReference(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVarDefinition(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport function cssVar(name: string, fallback?: string, cssVarPrefix?: string) {\n  const cssVariable = toVarDefinition(name, cssVarPrefix)\n  return {\n    variable: cssVariable,\n    reference: toVarReference(cssVariable, fallback),\n  }\n}\n"],"file":"css-var.js"}