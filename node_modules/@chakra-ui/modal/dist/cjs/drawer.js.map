{"version":3,"sources":["../../src/drawer.tsx"],"names":["DrawerContextProvider","useDrawerContext","Drawer","props","isOpen","onClose","placement","children","rest","theme","drawerStyleConfig","components","StyleSlide","Slide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","__DEV__","displayName"],"mappings":";;;;;;AAAA;;AAQA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;qBAEkD,gC;IAA3CA,qB;IAAuBC,gB;;AA0BvB,SAASC,MAAT,CAAgBC,KAAhB,EAAoC;AAAA;;AAAA,MACjCC,MADiC,GAC2BD,KAD3B,CACjCC,MADiC;AAAA,MACzBC,OADyB,GAC2BF,KAD3B,CACzBE,OADyB;AAAA,yBAC2BF,KAD3B,CAChBG,SADgB;AAAA,MAChBA,SADgB,iCACJ,OADI;AAAA,MACKC,QADL,GAC2BJ,KAD3B,CACKI,QADL;AAAA,MACkBC,IADlB,iCAC2BL,KAD3B;;AAGzC,MAAMM,KAAK,GAAG,uBAAd;AACA,MAAMC,iBAAiB,wBAAGD,KAAK,CAACE,UAAT,qBAAG,kBAAkBT,MAA5C;AAEA,sBACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAE;AAAEI,MAAAA,SAAS,EAATA;AAAF;AAA9B,kBACE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEF,MADV;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,WAAW,EAAEK;AAHf,KAIMF,IAJN,GAMGD,QANH,CADF,CADF;AAYD;;AAED,IAAMK,UAAU,GAAG,oBAAOC,iBAAP,CAAnB;;AAIA;AACA;AACA;AACA;AACO,IAAMC,aAAa,gBAAG,wBAC3B,UAACX,KAAD,EAAQY,GAAR,EAAgB;AAAA,MACNC,SADM,GAC2Bb,KAD3B,CACNa,SADM;AAAA,MACKT,QADL,GAC2BJ,KAD3B,CACKI,QADL;AAAA,MACkBC,IADlB,iCAC2BL,KAD3B;;AAAA,yBAOV,6BAPU;AAAA,MAIZc,cAJY,oBAIZA,cAJY;AAAA,MAKZC,uBALY,oBAKZA,uBALY;AAAA,MAMZd,MANY,oBAMZA,MANY;;AASd,MAAMe,WAAW,GAAGF,cAAc,CAACT,IAAD,EAAOO,GAAP,CAAlC;AACA,MAAMK,cAAc,GAAGF,uBAAuB,EAA9C;;AAEA,MAAMG,UAAU,GAAG,eAAG,uBAAH,EAA4BL,SAA5B,CAAnB;;AAEA,MAAMM,MAAM,GAAG,wBAAf;;AAEA,MAAMC,YAA+B;AACnCC,IAAAA,OAAO,EAAE,MAD0B;AAEnCC,IAAAA,aAAa,EAAE,QAFoB;AAGnCC,IAAAA,QAAQ,EAAE,UAHyB;AAInCC,IAAAA,KAAK,EAAE,MAJ4B;AAKnCC,IAAAA,OAAO,EAAE;AAL0B,KAMhCN,MAAM,CAACO,MANyB,CAArC;;AASA,MAAMC,qBAAwC;AAC5CN,IAAAA,OAAO,EAAE,MADmC;AAE5CG,IAAAA,KAAK,EAAE,OAFqC;AAG5CI,IAAAA,MAAM,EAAE,OAHoC;AAI5CL,IAAAA,QAAQ,EAAE,OAJkC;AAK5CM,IAAAA,IAAI,EAAE,CALsC;AAM5CC,IAAAA,GAAG,EAAE;AANuC,KAOzCX,MAAM,CAACY,eAPkC,CAA9C;;AAzBc,0BAmCQjC,gBAAgB,EAnCxB;AAAA,MAmCNK,SAnCM,qBAmCNA,SAnCM;;AAqCd,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACMc,cADN;AAEE,IAAA,SAAS,EAAC,iCAFZ;AAGE,IAAA,KAAK,EAAEU;AAHT,mBAKE,oBAAC,sBAAD,qBACE,oBAAC,UAAD;AACE,IAAA,SAAS,EAAExB,SADb;AAEE,UAAIF,MAFN;AAGE,IAAA,SAAS,EAAEiB;AAHb,KAIMF,WAJN;AAKE,IAAA,KAAK,EAAEI;AALT,MAOGhB,QAPH,CADF,CALF,CADF;AAmBD,CAzD0B,CAAtB;;;AA4DP,IAAI4B,cAAJ,EAAa;AACXrB,EAAAA,aAAa,CAACsB,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps extends Omit<ModalProps, \"scrollBehavior\"> {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyleSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyleSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyleSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"],"file":"drawer.js"}