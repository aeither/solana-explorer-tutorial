{"ast":null,"code":"import { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\n\nexport function useEventListener(event, handler, env, options) {\n  var listener = useCallbackRef(handler);\n  React.useEffect(function () {\n    var _runIfFn;\n\n    var node = (_runIfFn = runIfFn(env)) != null ? _runIfFn : document;\n    node.addEventListener(event, listener, options);\n    return function () {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener]);\n  return function () {\n    var _runIfFn2;\n\n    var node = (_runIfFn2 = runIfFn(env)) != null ? _runIfFn2 : document;\n    node.removeEventListener(event, listener, options);\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["listener","useCallbackRef","React","node","runIfFn"],"mappings":"AAAA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAKL;AACA,MAAMA,QAAQ,GAAGC,cAAc,CAA/B,OAA+B,CAA/B;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AAAA,QAAA,QAAA;;AACpB,QAAMC,IAAI,GAAA,CAAA,QAAA,GAAGC,OAAO,CAAV,GAAU,CAAV,KAAA,IAAA,GAAA,QAAA,GAAV,QAAA;AAEAD,IAAAA,IAAI,CAAJA,gBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,IAAI,CAAJA,mBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AADF,KAAA;AAJFD,GAAAA,EAOG,CAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAPHA,QAOG,CAPHA;AASA,SAAO,YAAM;AAAA,QAAA,SAAA;;AACX,QAAMC,IAAI,GAAA,CAAA,SAAA,GAAGC,OAAO,CAAV,GAAU,CAAV,KAAA,IAAA,GAAA,SAAA,GAAV,QAAA;AACAD,IAAAA,IAAI,CAAJA,mBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AAFF,GAAA;AAID","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  React.useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}