{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["useBreakpointValue","values","defaultBreakpoint","breakpoint","theme","undefined","breakpoints","Object","keys","obj","entries","map","key","value"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,MADK,EAELC,iBAFK,EAGU;AACf,MAAMC,UAAU,GAAG,kCAAcD,iBAAd,CAAnB;AACA,MAAME,KAAK,GAAG,uBAAd;AAEA,MAAI,CAACD,UAAL,EAAiB,OAAOE,SAAP;AAEjB;AACF;AACA;;AACE,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACE,WAAlB,CAApB;AAEA,MAAMG,GAAG,GAAG,oBAAQR,MAAR,IACR,wBACEM,MAAM,CAACG,OAAP,CACE,kCAAsBT,MAAtB,EAA8BK,WAA9B,CADF,EAEEK,GAFF,CAEM;AAAA,QAAEC,GAAF;AAAA,QAAOC,KAAP;AAAA,WAAkB,CAACD,GAAD,EAAMC,KAAN,CAAlB;AAAA,GAFN,CADF,CADQ,GAMRZ,MANJ;AAQA,SAAO,iCAAgBQ,GAAhB,EAAqBN,UAArB,EAAiCG,WAAjC,CAAP;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { arrayToObjectNotation, fromEntries, isArray } from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n  defaultBreakpoint?: string,\n): T | undefined {\n  const breakpoint = useBreakpoint(defaultBreakpoint)\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"],"file":"use-breakpoint-value.js"}