{"version":3,"sources":["../../../src/utils/parse-border.ts"],"names":["matchString","val","regex","match","unitMatch","styleMatch","parseBorder","value","key","css","split","style","unit","borderStyleKey","borderWidthKey","borderColorKey","color","filter"],"mappings":"AAAA,IAAMA,WAAW,GAAG,CAACC,GAAD,EAAcC,KAAd,KAAgCD,GAAG,CAACE,KAAJ,CAAUD,KAAV,CAApD;;AAEA,IAAME,SAAS,GAAG,gDAAlB;AACA,IAAMC,UAAU,GAAG,kEAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAoCC,GAApC,EAAoD;AAAA,MAAhBA,GAAgB;AAAhBA,IAAAA,GAAgB,GAAV,QAAU;AAAA;;AACzD,MAAMC,GAAG,GAAG,EAAZ;AAEA,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAd;AACA,MAAM,CAACC,KAAD,IAAUX,WAAW,CAACO,KAAD,EAAQF,UAAR,CAAX,IAAkC,CAAC,EAAD,CAAlD;AACA,MAAM,CAACO,IAAD,IAASZ,WAAW,CAACO,KAAD,EAAQH,SAAR,CAAX,IAAiC,CAAC,EAAD,CAAhD;AAEA,MAAMS,cAAc,GAAML,GAAN,UAApB;AACA,MAAMM,cAAc,GAAMN,GAAN,UAApB;AACA,MAAMO,cAAc,GAAMP,GAAN,UAApB;AAEA,MAAIG,KAAJ,EAAWF,GAAG,CAACI,cAAD,CAAH,GAAsBF,KAAtB;AACX,MAAIC,IAAJ,EAAUH,GAAG,CAACK,cAAD,CAAH,GAAsBF,IAAtB;AAEV,MAAM,CAACI,KAAD,IAAUN,KAAK,CAACO,MAAN,CAAchB,GAAD,IAAS;AACpC,QAAME,KAAK,GAAGH,WAAW,CAACC,GAAD,EAAMG,SAAN,CAAX,IAA+BJ,WAAW,CAACC,GAAD,EAAMI,UAAN,CAAxD;AACA,WAAO,CAACF,KAAD,IAAUF,GAAG,KAAKU,KAAlB,IAA2BV,GAAG,KAAKW,IAA1C;AACD,GAHe,CAAhB;AAKA,MAAII,KAAJ,EAAWP,GAAG,CAACM,cAAD,CAAH,GAAsBC,KAAtB;AAEX,SAAOP,GAAP;AACD","sourcesContent":["const matchString = (val: string, regex: RegExp) => val.match(regex)\n\nconst unitMatch = /(\\d*\\.?\\d+)\\s?(px|em|ex|%|in|rem|cn|mm|pt|pc+)/\nconst styleMatch = /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n\n/**\n * Function to enable shorthand border values.\n * @example\n * border = \"3px solid blue.300\"\n *\n * This would parse the border values, and convert the \"blue.300\" token\n * to the equivalent color value. If value doesn't exist in theme, it'll use the\n * raw values.\n */\nexport function parseBorder(value: string, key = \"border\") {\n  const css = {}\n\n  const split = value.split(\" \")\n  const [style] = matchString(value, styleMatch) || [\"\"]\n  const [unit] = matchString(value, unitMatch) || [\"\"]\n\n  const borderStyleKey = `${key}Style`\n  const borderWidthKey = `${key}Width`\n  const borderColorKey = `${key}Color`\n\n  if (style) css[borderStyleKey] = style\n  if (unit) css[borderWidthKey] = unit\n\n  const [color] = split.filter((val) => {\n    const match = matchString(val, unitMatch) && matchString(val, styleMatch)\n    return !match && val !== style && val !== unit\n  })\n\n  if (color) css[borderColorKey] = color\n\n  return css\n}\n"],"file":"parse-border.js"}