{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useIds } from \"@chakra-ui/hooks\";\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { manager, useModalManager } from \"./modal-manager\";\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\n\nexport function useModal(props) {\n  var isOpen = props.isOpen,\n      onClose = props.onClose,\n      id = props.id,\n      _props$closeOnOverlay = props.closeOnOverlayClick,\n      closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay,\n      _props$closeOnEsc = props.closeOnEsc,\n      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n      _props$useInert = props.useInert,\n      useInert = _props$useInert === void 0 ? true : _props$useInert,\n      onOverlayClickProp = props.onOverlayClick,\n      onEsc = props.onEsc;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n\n  var _useIds = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\"),\n      _useIds2 = _slicedToArray(_useIds, 3),\n      dialogId = _useIds2[0],\n      headerId = _useIds2[1],\n      bodyId = _useIds2[2];\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n\n\n  useAriaHidden(dialogRef, isOpen && useInert);\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n\n  useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(function (event) {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      headerMounted = _useState2[0],\n      setHeaderMounted = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bodyMounted = _useState4[0],\n      setBodyMounted = _useState4[1];\n\n  var getDialogProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      role: \"dialog\"\n    }, props, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, function (event) {\n        return event.stopPropagation();\n      })\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(function (event) {\n    event.stopPropagation();\n    /**\n     * Make sure the event starts and ends on the same DOM element.\n     *\n     * This is used to prevent the modal from closing when you\n     * start dragging from the content, and release drag outside the content.\n     *\n     * We prevent this because it is technically not a considered \"click outside\"\n     */\n\n    if (mouseDownTarget.current !== event.target) return;\n    /**\n     * When you click on the overlay, we want to remove only the topmost modal\n     */\n\n    if (!manager.isTopModal(dialogRef)) return;\n\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    bodyId: bodyId,\n    setBodyMounted: setBodyMounted,\n    setHeaderMounted: setHeaderMounted,\n    dialogRef: dialogRef,\n    overlayRef: overlayRef,\n    getDialogProps: getDialogProps,\n    getDialogContainerProps: getDialogContainerProps\n  };\n}\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\n\nexport function useAriaHidden(ref, shouldHide) {\n  useEffect(function () {\n    if (!ref.current) return undefined;\n    var undo = null;\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current);\n    }\n\n    return function () {\n      if (shouldHide) {\n        undo == null ? void 0 : undo();\n      }\n    };\n  }, [shouldHide, ref]);\n}","map":{"version":3,"sources":["../../src/use-modal.ts"],"names":["closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onEsc","dialogRef","useRef","overlayRef","useIds","useAriaHidden","isOpen","useModalManager","mouseDownTarget","onMouseDown","useCallback","event","onKeyDown","onClose","useState","getDialogProps","props","ref","role","mergeRefs","id","tabIndex","headerMounted","bodyMounted","onClick","callAllHandlers","manager","onOverlayClickProp","getDialogContainerProps","headerId","bodyId","setBodyMounted","setHeaderMounted","useEffect","undo","shouldHide","hideOthers"],"mappings":"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","sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { hideOthers, Undo } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!manager.isTopModal(dialogRef)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"]},"metadata":{},"sourceType":"module"}