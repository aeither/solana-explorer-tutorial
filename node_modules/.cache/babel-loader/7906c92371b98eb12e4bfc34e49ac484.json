{"ast":null,"code":"import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\nvar progressTarget = 1000;\n\nvar Animate = function (_super) {\n  __extends(Animate, _super);\n\n  function Animate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * A mutable object that tracks the target viewport box\n     * for the current animation frame.\n     */\n\n\n    _this.frameTarget = axisBox();\n    /**\n     * The current animation target, we use this to check whether to start\n     * a new animation or continue the existing one.\n     */\n\n    _this.currentAnimationTarget = axisBox();\n    /**\n     * Track whether we're animating this axis.\n     */\n\n    _this.isAnimating = {\n      x: false,\n      y: false\n    };\n    _this.stopAxisAnimation = {\n      x: undefined,\n      y: undefined\n    };\n    _this.isAnimatingTree = false;\n\n    _this.animate = function (target, origin, _a) {\n      if (_a === void 0) {\n        _a = {};\n      }\n\n      var originBox = _a.originBox,\n          targetBox = _a.targetBox,\n          visibilityAction = _a.visibilityAction,\n          shouldStackAnimate = _a.shouldStackAnimate,\n          onComplete = _a.onComplete,\n          prevParent = _a.prevParent,\n          config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n\n      var _b = _this.props,\n          visualElement = _b.visualElement,\n          layout = _b.layout;\n      /**\n       * Early return if we've been instructed not to animate this render.\n       */\n\n      if (shouldStackAnimate === false) {\n        _this.isAnimatingTree = false;\n        return _this.safeToRemove();\n      }\n      /**\n       * Prioritise tree animations\n       */\n\n\n      if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n        return;\n      } else if (shouldStackAnimate) {\n        _this.isAnimatingTree = true;\n      }\n      /**\n       * Allow the measured origin (prev bounding box) and target (actual layout) to be\n       * overridden by the provided config.\n       */\n\n\n      origin = originBox || origin;\n      target = targetBox || target;\n      /**\n       * If this element has a projecting parent, there's an opportunity to animate\n       * it relatively to that parent rather than relatively to the viewport. This\n       * allows us to add orchestrated animations.\n       */\n\n      var isRelative = false;\n      var projectionParent = visualElement.getProjectionParent();\n\n      if (projectionParent) {\n        var prevParentViewportBox = projectionParent.prevViewportBox;\n        var parentLayout = projectionParent.getLayoutState().layout;\n        /**\n         * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n         */\n\n        if (prevParent) {\n          /**\n           * If we've been provided an explicit target box it means we're animating back\n           * to this previous parent. So we can make a relative box by comparing to the previous\n           * parent's layout\n           */\n          if (targetBox) {\n            parentLayout = prevParent.getLayoutState().layout;\n          }\n          /**\n           * Likewise if we've been provided an explicit origin box it means we're\n           * animating out from a different element. So we should figure out where that was\n           * on screen relative to the new parent element.\n           */\n\n\n          if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {\n            prevParentViewportBox = prevParent.prevViewportBox;\n          }\n        }\n\n        if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n          isRelative = true;\n          origin = calcRelativeOffset(prevParentViewportBox, origin);\n          target = calcRelativeOffset(parentLayout, target);\n        }\n      }\n\n      var boxHasMoved = hasMoved(origin, target);\n      var animations = eachAxis(function (axis) {\n        var _a, _b;\n        /**\n         * If layout is set to \"position\", we can resize the origin box based on the target\n         * box and only animate its position.\n         */\n\n\n        if (layout === \"position\") {\n          var targetLength = target[axis].max - target[axis].min;\n          origin[axis].max = origin[axis].min + targetLength;\n        }\n\n        if (visualElement.projection.isTargetLocked) {\n          return;\n        } else if (visibilityAction !== undefined) {\n          visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n        } else if (boxHasMoved) {\n          // If the box has moved, animate between it's current visual state and its\n          // final state\n          return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), {\n            isRelative: isRelative\n          }));\n        } else {\n          (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); // If the box has remained in the same place, immediately set the axis target\n          // to the final desired state\n\n          return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n        }\n      }); // Force a render to ensure there's no flash of uncorrected bounding box.\n\n      visualElement.syncRender();\n      /**\n       * If this visualElement isn't present (ie it's been removed from the tree by the user but\n       * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n       * have successfully finished.\n       */\n\n      return Promise.all(animations).then(function () {\n        _this.isAnimatingTree = false;\n        onComplete && onComplete();\n        visualElement.notifyLayoutAnimationComplete();\n      });\n    };\n\n    return _this;\n  }\n\n  Animate.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var visualElement = this.props.visualElement;\n    visualElement.animateMotionValue = startAnimation;\n    visualElement.enableLayoutProjection();\n    this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n\n    visualElement.layoutSafeToRemove = function () {\n      return _this.safeToRemove();\n    };\n\n    addScaleCorrection(defaultScaleCorrectors);\n  };\n\n  Animate.prototype.componentWillUnmount = function () {\n    var _this = this;\n\n    this.unsubLayoutReady();\n    eachAxis(function (axis) {\n      var _a, _b;\n\n      return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n  /**\n   * TODO: This manually performs animations on the visualElement's layout progress\n   * values. It'd be preferable to amend the startLayoutAxisAnimation\n   * API to accept more custom animations like this.\n   */\n\n\n  Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n    var _this = this;\n\n    var _b, _c;\n\n    var _d = _a === void 0 ? {} : _a,\n        transition = _d.transition,\n        isRelative = _d.isRelative;\n    /**\n     * If we're not animating to a new target, don't run this animation\n     */\n\n\n    if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {\n      return;\n    }\n\n    (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n    this.isAnimating[axis] = true;\n    var visualElement = this.props.visualElement;\n    var frameTarget = this.frameTarget[axis];\n    var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n    /**\n     * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n     * be re-incoporated into a subsequent spring animation.\n     */\n\n    layoutProgress.clearListeners();\n    layoutProgress.set(0);\n    layoutProgress.set(0);\n    /**\n     * Create an animation function to run once per frame. This will tween the visual bounding box from\n     * origin to target using the latest progress value.\n     */\n\n    var frame = function frame() {\n      // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n      var p = layoutProgress.get() / progressTarget; // Tween the axis and update the visualElement with the latest values\n\n      tweenAxis(frameTarget, origin, target, p);\n      visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n    }; // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n\n\n    frame(); // Create a function to stop animation on this specific axis\n\n    var unsubscribeProgress = layoutProgress.onChange(frame);\n\n    this.stopAxisAnimation[axis] = function () {\n      _this.isAnimating[axis] = false;\n      layoutProgress.stop();\n      unsubscribeProgress();\n    };\n\n    this.currentAnimationTarget[axis] = target;\n    var layoutTransition = transition || visualElement.getDefaultTransition() || defaultLayoutTransition; // Start the animation on this axis\n\n    var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n    return animation;\n  };\n\n  Animate.prototype.safeToRemove = function () {\n    var _a, _b;\n\n    (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  Animate.prototype.render = function () {\n    return null;\n  };\n\n  return Animate;\n}(React.Component);\n\nfunction AnimateLayoutContextProvider(props) {\n  var _a = __read(usePresence(), 2),\n      safeToRemove = _a[1];\n\n  return React.createElement(Animate, __assign({}, props, {\n    safeToRemove: safeToRemove\n  }));\n}\n\nfunction hasMoved(a, b) {\n  return !isZeroBox(a) && !isZeroBox(b) && (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y));\n}\n\nvar zeroAxis = {\n  min: 0,\n  max: 0\n};\n\nfunction isZeroBox(a) {\n  return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\n\nfunction axisIsEqual(a, b) {\n  return a.min === b.min && a.max === b.max;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n  return prevParent || !prevParent && !(originBox || targetBox);\n}\n\nexport { AnimateLayoutContextProvider };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/motion/features/layout/Animate.js"],"names":["__extends","__rest","__assign","__read","React","eachAxis","startAnimation","getValueTransition","checkIfParentHasChanged","calcRelativeOffset","tweenAxis","VisibilityAction","usePresence","axisBox","addScaleCorrection","defaultScaleCorrectors","progressTarget","Animate","_super","_this","apply","arguments","frameTarget","currentAnimationTarget","isAnimating","x","y","stopAxisAnimation","undefined","isAnimatingTree","animate","target","origin","_a","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","_b","props","visualElement","layout","safeToRemove","isRelative","projectionParent","getProjectionParent","prevParentViewportBox","prevViewportBox","parentLayout","getLayoutState","isProvidedCorrectDataForRelativeSharedLayout","boxHasMoved","hasMoved","animations","axis","targetLength","max","min","projection","isTargetLocked","setVisibility","Show","animateAxis","call","setProjectionTargetAxis","syncRender","Promise","all","then","notifyLayoutAnimationComplete","prototype","componentDidMount","animateMotionValue","enableLayoutProjection","unsubLayoutReady","onLayoutUpdate","layoutSafeToRemove","componentWillUnmount","_c","_d","transition","axisIsEqual","layoutProgress","getProjectionAnimationProgress","clearListeners","set","frame","p","get","unsubscribeProgress","onChange","stop","layoutTransition","getDefaultTransition","defaultLayoutTransition","animation","render","Component","AnimateLayoutContextProvider","createElement","a","b","isZeroBox","zeroAxis","duration","ease"],"mappings":"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","sourcesContent":["import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n"]},"metadata":{},"sourceType":"module"}