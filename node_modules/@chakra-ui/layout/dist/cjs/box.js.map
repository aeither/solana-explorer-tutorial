{"version":3,"sources":["../../src/box.tsx"],"names":["Box","__DEV__","displayName","Square","props","ref","size","centerContent","rest","styles","display","alignItems","justifyContent","flexShrink","flexGrow","Circle"],"mappings":";;;;;AAAA;;AAMA;;AACA;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,GAAG,GAAG,oBAAO,KAAP,CAAZ;;;AAEP,IAAIC,cAAJ,EAAa;AACXD,EAAAA,GAAG,CAACE,WAAJ,GAAkB,KAAlB;AACD;AAED;AACA;AACA;AACA;;;AAcO,IAAMC,MAAM,gBAAG,wBAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,MAC3DC,IAD2D,GACnBF,KADmB,CAC3DE,IAD2D;AAAA,6BACnBF,KADmB,CACrDG,aADqD;AAAA,MACrDA,aADqD,qCACrC,IADqC;AAAA,MAC5BC,IAD4B,iCACnBJ,KADmB;;AAGnE,MAAMK,MAAyB,GAAGF,aAAa,GAC3C;AAAEG,IAAAA,OAAO,EAAE,MAAX;AAAmBC,IAAAA,UAAU,EAAE,QAA/B;AAAyCC,IAAAA,cAAc,EAAE;AAAzD,GAD2C,GAE3C,EAFJ;AAIA,sBACE,oBAAC,GAAD;AACE,IAAA,GAAG,EAAEP,GADP;AAEE,IAAA,OAAO,EAAEC,IAFX;AAGE,IAAA,KAAK,eACAG,MADA;AAEHI,MAAAA,UAAU,EAAE,CAFT;AAGHC,MAAAA,QAAQ,EAAE;AAHP;AAHP,KAQMN,IARN,EADF;AAYD,CAnBqB,CAAf;;;AAqBP,IAAIP,cAAJ,EAAa;AACXE,EAAAA,MAAM,CAACD,WAAP,GAAqB,QAArB;AACD;;AAEM,IAAMa,MAAM,gBAAG,wBAA+B,UAACX,KAAD,EAAQC,GAAR,EAAgB;AAAA,MAC3DC,IAD2D,GACzCF,KADyC,CAC3DE,IAD2D;AAAA,MAClDE,IADkD,iCACzCJ,KADyC;;AAEnE,sBAAO,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEE,IAAd;AAAoB,IAAA,GAAG,EAAED,GAAzB;AAA8B,IAAA,YAAY,EAAC;AAA3C,KAAwDG,IAAxD,EAAP;AACD,CAHqB,CAAf;;;AAKP,IAAIP,cAAJ,EAAa;AACXc,EAAAA,MAAM,CAACb,WAAP,GAAqB,QAArB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nif (__DEV__) {\n  Box.displayName = \"Box\"\n}\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  Square.displayName = \"Square\"\n}\n\nexport const Circle = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n"],"file":"box.js"}