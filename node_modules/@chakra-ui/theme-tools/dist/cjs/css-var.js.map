{"version":3,"sources":["../../src/css-var.ts"],"names":["isDecimal","value","Number","isInteger","parseFloat","toString","replaceWhiteSpace","replaceValue","replace","escape","valueStr","includes","addPrefix","prefix","filter","Boolean","join","toVarRef","name","fallback","toVar","cssVar","options","cssVariable","variable","reference","getFallback"],"mappings":";;;;;;;;;AAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA+B;AACpC,SAAO,CAACC,MAAM,CAACC,SAAP,CAAiBC,UAAU,CAACH,KAAK,CAACI,QAAN,EAAD,CAA3B,CAAR;AACD;;AAED,SAASC,iBAAT,CAA2BL,KAA3B,EAA0CM,YAA1C,EAA8D;AAAA,MAApBA,YAAoB;AAApBA,IAAAA,YAAoB,GAAL,GAAK;AAAA;;AAC5D,SAAON,KAAK,CAACO,OAAN,CAAc,MAAd,EAAsBD,YAAtB,CAAP;AACD;;AAED,SAASE,MAAT,CAAgBR,KAAhB,EAAwC;AACtC,MAAMS,QAAQ,GAAGJ,iBAAiB,CAACL,KAAK,CAACI,QAAN,EAAD,CAAlC;AACA,MAAIK,QAAQ,CAACC,QAAT,CAAkB,KAAlB,CAAJ,EAA8B,OAAOV,KAAP;AAC9B,SAAOD,SAAS,CAACC,KAAD,CAAT,GAAmBS,QAAQ,CAACF,OAAT,CAAiB,GAAjB,QAAnB,GAAkDP,KAAzD;AACD;;AAEM,SAASW,SAAT,CAAmBX,KAAnB,EAAkCY,MAAlC,EAA+C;AAAA,MAAbA,MAAa;AAAbA,IAAAA,MAAa,GAAJ,EAAI;AAAA;;AACpD,SAAO,CAACA,MAAD,EAASJ,MAAM,CAACR,KAAD,CAAf,EAAwBa,MAAxB,CAA+BC,OAA/B,EAAwCC,IAAxC,CAA6C,GAA7C,CAAP;AACD;;AAEM,SAASC,QAAT,CAAkBC,IAAlB,EAAgCC,QAAhC,EAAmD;AACxD,kBAAcV,MAAM,CAACS,IAAD,CAApB,IAA6BC,QAAQ,UAAQA,QAAR,GAAqB,EAA1D;AACD;;AAEM,SAASC,KAAT,CAAenB,KAAf,EAA8BY,MAA9B,EAA2C;AAAA,MAAbA,MAAa;AAAbA,IAAAA,MAAa,GAAJ,EAAI;AAAA;;AAChD,gBAAYD,SAAS,CAACX,KAAD,EAAQY,MAAR,CAArB;AACD;;AAYM,SAASQ,MAAT,CAAgBH,IAAhB,EAA8BI,OAA9B,EAAuD;AAC5D,MAAMC,WAAW,GAAGH,KAAK,CAACF,IAAD,EAAOI,OAAP,oBAAOA,OAAO,CAAET,MAAhB,CAAzB;AACA,SAAO;AACLW,IAAAA,QAAQ,EAAED,WADL;AAELE,IAAAA,SAAS,EAAER,QAAQ,CAACM,WAAD,EAAcG,WAAW,CAACJ,OAAD,oBAACA,OAAO,CAAEH,QAAV,CAAzB;AAFd,GAAP;AAID;;AAED,SAASO,WAAT,CAAqBP,QAArB,EAAiD;AAC/C,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAOA,QAAP;AAClC,SAAOA,QAAP,oBAAOA,QAAQ,CAAEM,SAAjB;AACD","sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"],"file":"css-var.js"}