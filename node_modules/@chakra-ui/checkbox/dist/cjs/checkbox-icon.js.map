{"version":3,"sources":["../../src/checkbox-icon.tsx"],"names":["MotionSvg","motion","custom","chakra","svg","CheckIcon","props","unchecked","opacity","strokeDashoffset","checked","transition","duration","fill","strokeWidth","stroke","strokeDasharray","IndeterminateIcon","scaleX","CheckboxTransition","open","children","scale","display","alignItems","justifyContent","height","CheckboxIcon","isIndeterminate","isChecked","rest","IconEl"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;AACA,IAAMA,SAAyD,GAC7D,YAAYC,oBAAZ,GACKA,oBAAD,CAAgBC,MAAhB,CAAuBC,eAAOC,GAA9B,CADJ,GAEI,IAACH,oBAAD,EAAgBE,eAAOC,GAAvB,CAHN;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD;AAAA,sBAChB,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,OADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAE,CADA;AAETC,QAAAA,gBAAgB,EAAE;AAFT,OADH;AAKRC,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAE,CADF;AAEPC,QAAAA,gBAAgB,EAAE,CAFX;AAGPE,QAAAA,UAAU,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ;AAHL;AALD,KAHZ;AAcE,IAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,WAAW,EAAE,CAFR;AAGLC,MAAAA,MAAM,EAAE,cAHH;AAILC,MAAAA,eAAe,EAAE;AAJZ;AAdT,KAoBMV,KApBN,gBAsBE;AAAU,IAAA,MAAM,EAAC;AAAjB,IAtBF,CADgB;AAAA,CAAlB;;AA2BA,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAACX,KAAD;AAAA,sBACxB,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,OADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE;AACTW,QAAAA,MAAM,EAAE,IADC;AAETV,QAAAA,OAAO,EAAE;AAFA,OADH;AAKRE,MAAAA,OAAO,EAAE;AACPQ,QAAAA,MAAM,EAAE,CADD;AAEPV,QAAAA,OAAO,EAAE,CAFF;AAGPG,QAAAA,UAAU,EAAE;AACVO,UAAAA,MAAM,EAAE;AAAEN,YAAAA,QAAQ,EAAE;AAAZ,WADE;AAEVJ,UAAAA,OAAO,EAAE;AAAEI,YAAAA,QAAQ,EAAE;AAAZ;AAFC;AAHL;AALD,KAHZ;AAiBE,IAAA,KAAK,EAAE;AAAEG,MAAAA,MAAM,EAAE,cAAV;AAA0BD,MAAAA,WAAW,EAAE;AAAvC;AAjBT,KAkBMR,KAlBN,gBAoBE;AAAM,IAAA,EAAE,EAAC,IAAT;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,EAAE,EAAC,IAAxB;AAA6B,IAAA,EAAE,EAAC;AAAhC,IApBF,CADwB;AAAA,CAA1B;;AAyBA,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,QAAT,QAASA,QAAT;AAAA,sBACzB,oBAAC,6BAAD;AAAiB,IAAA,OAAO,EAAE;AAA1B,KACGD,IAAI,iBACH,oBAAC,oBAAD,CAAQ,GAAR;AACE,IAAA,QAAQ,EAAE;AACRb,MAAAA,SAAS,EAAE;AAAEe,QAAAA,KAAK,EAAE;AAAT,OADH;AAERZ,MAAAA,OAAO,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT;AAFD,KADZ;AAKE,IAAA,OAAO,EAAC,WALV;AAME,IAAA,OAAO,EAAC,SANV;AAOE,IAAA,IAAI,EAAC,WAPP;AAQE,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE,QAHX;AAILC,MAAAA,MAAM,EAAE;AAJH;AART,KAeGL,QAfH,CAFJ,CADyB;AAAA,CAA3B;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMM,YAAyC,GAAG,SAA5CA,YAA4C,CAACrB,KAAD,EAAW;AAAA,MAC1DsB,eAD0D,GAClBtB,KADkB,CAC1DsB,eAD0D;AAAA,MACzCC,SADyC,GAClBvB,KADkB,CACzCuB,SADyC;AAAA,MAC3BC,IAD2B,iCAClBxB,KADkB;;AAElE,MAAMyB,MAAM,GAAGH,eAAe,GAAGX,iBAAH,GAAuBZ,SAArD;AACA,sBACE,oBAAC,kBAAD;AAAoB,IAAA,IAAI,EAAEwB,SAAS,IAAID;AAAvC,kBACE,oBAAC,MAAD,EAAYE,IAAZ,CADF,CADF;AAKD,CARM","sourcesContent":["import { chakra, PropsOf } from \"@chakra-ui/system\"\nimport { AnimatePresence, CustomDomComponent, motion } from \"framer-motion\"\nimport * as React from \"react\"\n\n// @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support\nconst MotionSvg: CustomDomComponent<PropsOf<typeof chakra.svg>> =\n  \"custom\" in motion\n    ? (motion as any).custom(chakra.svg)\n    : (motion as any)(chakra.svg)\n\nconst CheckIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 12 10\"\n    variants={{\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16,\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: { duration: 0.2 },\n      },\n    }}\n    style={{\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16,\n    }}\n    {...props}\n  >\n    <polyline points=\"1.5 6 4.5 9 10.5 1\" />\n  </MotionSvg>\n)\n\nconst IndeterminateIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 24 24\"\n    variants={{\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0,\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: { duration: 0 },\n          opacity: { duration: 0.02 },\n        },\n      },\n    }}\n    style={{ stroke: \"currentColor\", strokeWidth: 4 }}\n    {...props}\n  >\n    <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\n  </MotionSvg>\n)\n\nconst CheckboxTransition = ({ open, children }: any) => (\n  <AnimatePresence initial={false}>\n    {open && (\n      <motion.div\n        variants={{\n          unchecked: { scale: 0.5 },\n          checked: { scale: 1 },\n        }}\n        initial=\"unchecked\"\n        animate=\"checked\"\n        exit=\"unchecked\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100%\",\n        }}\n      >\n        {children}\n      </motion.div>\n    )}\n  </AnimatePresence>\n)\n\nexport interface CheckboxIconProps extends PropsOf<typeof MotionSvg> {\n  isIndeterminate?: boolean\n  isChecked?: boolean\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\nexport const CheckboxIcon: React.FC<CheckboxIconProps> = (props) => {\n  const { isIndeterminate, isChecked, ...rest } = props\n  const IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon\n  return (\n    <CheckboxTransition open={isChecked || isIndeterminate}>\n      <IconEl {...rest} />\n    </CheckboxTransition>\n  )\n}\n"],"file":"checkbox-icon.js"}