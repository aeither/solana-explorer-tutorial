{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _elementStyles;\n\n  var _input$height, _input$height2;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, [\"placement\"]);\n\n  var styles = useStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  var elementStyles = (_elementStyles = {}, _defineProperty(_elementStyles, attr, \"0\"), _defineProperty(_elementStyles, \"width\", (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h), _defineProperty(_elementStyles, \"height\", (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h), _defineProperty(_elementStyles, \"fontSize\", input == null ? void 0 : input.fontSize), _elementStyles);\n  return /*#__PURE__*/React.createElement(StyledElement, _extends({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputElement.id = \"InputElement\";\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\";\n}\n\nexport var InputLeftElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _className = cx(\"chakra-input__left-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputLeftElement.id = \"InputLeftElement\";\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\";\n}\n\nexport var InputRightElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _className = cx(\"chakra-input__right-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputRightElement.id = \"InputRightElement\";\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\";\n}","map":{"version":3,"sources":["../../src/input-element.tsx"],"names":["StyledElement","chakra","baseStyle","display","alignItems","justifyContent","position","top","zIndex","InputElement","forwardRef","placement","styles","useStyles","input","attr","elementStyles","fontSize","InputLeftElement","className","_className","cx","InputRightElement"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n  }\n\n  return <StyledElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\"\n}\n\nexport const InputLeftElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\"\n}\n\nexport const InputRightElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\"\n}\n"]},"metadata":{},"sourceType":"module"}