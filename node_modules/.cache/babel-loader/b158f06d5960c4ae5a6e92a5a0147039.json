{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\n/**\n * React component that separates each breadcrumb link\n */\n\nexport var BreadcrumbSeparator = /*#__PURE__*/forwardRef(function (props, ref) {\n  var spacing = props.spacing,\n      rest = _objectWithoutPropertiesLoose(props, [\"spacing\"]);\n\n  var styles = useStyles();\n\n  var separatorStyles = _extends({\n    mx: spacing\n  }, styles.separator);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref,\n    role: \"presentation\"\n  }, rest, {\n    __css: separatorStyles\n  }));\n});\n\nif (__DEV__) {\n  BreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n}\n/**\n * Breadcrumb link.\n *\n * It renders a `span` when it matches the current link. Otherwise,\n * it renders an anchor tag.\n */\n\n\nexport var BreadcrumbLink = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isCurrentPage = props.isCurrentPage,\n      as = props.as,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"isCurrentPage\", \"as\", \"className\"]);\n\n  var styles = useStyles();\n\n  var sharedProps = _extends({\n    ref: ref,\n    as: as,\n    className: cx(\"chakra-breadcrumb__link\", className)\n  }, rest);\n\n  if (isCurrentPage) {\n    return /*#__PURE__*/React.createElement(chakra.span, _extends({\n      \"aria-current\": \"page\",\n      __css: styles.link\n    }, sharedProps));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.a, _extends({\n    __css: styles.link\n  }, sharedProps));\n});\n\nif (__DEV__) {\n  BreadcrumbLink.displayName = \"BreadcrumbLink\";\n}\n/**\n * BreadcrumbItem is used to group a breadcrumb link.\n * It renders a `li` element to denote it belongs to an order list of links.\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\n\n\nexport var BreadcrumbItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isCurrentPage = props.isCurrentPage,\n      separator = props.separator,\n      isLastChild = props.isLastChild,\n      spacing = props.spacing,\n      children = props.children,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"isCurrentPage\", \"separator\", \"isLastChild\", \"spacing\", \"children\", \"className\"]);\n\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    if (child.type === BreadcrumbLink) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        isCurrentPage: isCurrentPage\n      });\n    }\n\n    if (child.type === BreadcrumbSeparator) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        spacing: spacing,\n        children: child.props.children || separator\n      });\n    }\n\n    return child;\n  });\n  var styles = useStyles();\n\n  var itemStyles = _extends({\n    display: \"inline-flex\",\n    alignItems: \"center\"\n  }, styles.item);\n\n  var _className = cx(\"chakra-breadcrumb__list-item\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: itemStyles\n  }), clones, !isLastChild && /*#__PURE__*/React.createElement(BreadcrumbSeparator, {\n    spacing: spacing\n  }, separator));\n});\n\nif (__DEV__) {\n  BreadcrumbItem.displayName = \"BreadcrumbItem\";\n}\n/**\n * Breadcrumb is used to render a breadcrumb navigation landmark.\n * It renders a `nav` element with `aria-label` set to `Breadcrumb`\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\n\n\nexport var Breadcrumb = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Breadcrumb\", props);\n  var ownProps = omitThemingProps(props);\n\n  var children = ownProps.children,\n      _ownProps$spacing = ownProps.spacing,\n      spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n      _ownProps$separator = ownProps.separator,\n      separator = _ownProps$separator === void 0 ? \"/\" : _ownProps$separator,\n      className = ownProps.className,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"spacing\", \"separator\", \"className\"]);\n\n  var validChildren = getValidChildren(children);\n  var count = validChildren.length;\n  var clones = validChildren.map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      separator: separator,\n      spacing: spacing,\n      isLastChild: count === index + 1\n    });\n  });\n\n  var _className = cx(\"chakra-breadcrumb\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.nav, _extends({\n    ref: ref,\n    \"aria-label\": \"breadcrumb\",\n    className: _className,\n    __css: styles.container\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.ol, {\n    className: \"chakra-breadcrumb__list\"\n  }, clones)));\n});\n\nif (__DEV__) {\n  Breadcrumb.displayName = \"Breadcrumb\";\n}","map":{"version":3,"sources":["../../src/breadcrumb.tsx"],"names":["BreadcrumbSeparator","forwardRef","spacing","styles","useStyles","separatorStyles","mx","BreadcrumbLink","className","sharedProps","ref","as","cx","link","BreadcrumbItem","validChildren","getValidChildren","clones","child","isCurrentPage","children","separator","itemStyles","display","alignItems","_className","Breadcrumb","useMultiStyleConfig","ownProps","omitThemingProps","count","isLastChild","index","container"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface BreadcrumbSeparatorProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * @type SystemProps[\"mx\"]\n   */\n  spacing?: SystemProps[\"mx\"]\n}\n\n/**\n * React component that separates each breadcrumb link\n */\nexport const BreadcrumbSeparator = forwardRef<BreadcrumbSeparatorProps, \"span\">(\n  (props, ref) => {\n    const { spacing, ...rest } = props\n\n    const styles = useStyles()\n    const separatorStyles: SystemStyleObject = {\n      mx: spacing,\n      ...styles.separator,\n    }\n\n    return (\n      <chakra.span\n        ref={ref}\n        role=\"presentation\"\n        {...rest}\n        __css={separatorStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  BreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n}\n\nexport interface BreadcrumbLinkProps extends HTMLChakraProps<\"a\"> {\n  isCurrentPage?: boolean\n}\n\n/**\n * Breadcrumb link.\n *\n * It renders a `span` when it matches the current link. Otherwise,\n * it renders an anchor tag.\n */\nexport const BreadcrumbLink = forwardRef<BreadcrumbLinkProps, \"a\">(\n  (props, ref) => {\n    const { isCurrentPage, as, className, ...rest } = props\n    const styles = useStyles()\n\n    const sharedProps = {\n      ref,\n      as,\n      className: cx(\"chakra-breadcrumb__link\", className),\n      ...rest,\n    }\n\n    if (isCurrentPage) {\n      return (\n        <chakra.span aria-current=\"page\" __css={styles.link} {...sharedProps} />\n      )\n    }\n\n    return <chakra.a __css={styles.link} {...sharedProps} />\n  },\n)\n\nif (__DEV__) {\n  BreadcrumbLink.displayName = \"BreadcrumbLink\"\n}\n\ninterface BreadcrumbItemOptions extends BreadcrumbOptions {\n  isCurrentPage?: boolean\n  isLastChild?: boolean\n}\n\nexport interface BreadcrumbItemProps\n  extends BreadcrumbItemOptions,\n    HTMLChakraProps<\"li\"> {}\n\n/**\n * BreadcrumbItem is used to group a breadcrumb link.\n * It renders a `li` element to denote it belongs to an order list of links.\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\nexport const BreadcrumbItem = forwardRef<BreadcrumbItemProps, \"li\">(\n  (props, ref) => {\n    const {\n      isCurrentPage,\n      separator,\n      isLastChild,\n      spacing,\n      children,\n      className,\n      ...rest\n    } = props\n\n    const validChildren = getValidChildren(children)\n\n    const clones = validChildren.map((child) => {\n      if (child.type === BreadcrumbLink) {\n        return React.cloneElement(child, {\n          isCurrentPage,\n        })\n      }\n\n      if (child.type === BreadcrumbSeparator) {\n        return React.cloneElement(child, {\n          spacing,\n          children: child.props.children || separator,\n        })\n      }\n\n      return child\n    })\n\n    const styles = useStyles()\n    const itemStyles: SystemStyleObject = {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      ...styles.item,\n    }\n\n    const _className = cx(\"chakra-breadcrumb__list-item\", className)\n\n    return (\n      <chakra.li ref={ref} className={_className} {...rest} __css={itemStyles}>\n        {clones}\n        {!isLastChild && (\n          <BreadcrumbSeparator spacing={spacing}>\n            {separator}\n          </BreadcrumbSeparator>\n        )}\n      </chakra.li>\n    )\n  },\n)\n\nif (__DEV__) {\n  BreadcrumbItem.displayName = \"BreadcrumbItem\"\n}\n\nexport interface BreadcrumbOptions {\n  /**\n   * The visual separator between each breadcrumb item\n   * @type string | React.ReactElement\n   */\n  separator?: string | React.ReactElement\n  /**\n   * The left and right margin applied to the separator\n   * @type SystemProps[\"mx\"]\n   */\n  spacing?: SystemProps[\"mx\"]\n}\n\nexport interface BreadcrumbProps\n  extends HTMLChakraProps<\"nav\">,\n    BreadcrumbOptions,\n    ThemingProps<\"Breadcrumb\"> {}\n\n/**\n * Breadcrumb is used to render a breadcrumb navigation landmark.\n * It renders a `nav` element with `aria-label` set to `Breadcrumb`\n *\n * @see Docs https://chakra-ui.com/breadcrumb\n */\nexport const Breadcrumb = forwardRef<BreadcrumbProps, \"nav\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Breadcrumb\", props)\n  const ownProps = omitThemingProps(props)\n\n  const {\n    children,\n    spacing = \"0.5rem\",\n    separator = \"/\",\n    className,\n    ...rest\n  } = ownProps\n\n  const validChildren = getValidChildren(children)\n  const count = validChildren.length\n\n  const clones = validChildren.map((child, index) =>\n    React.cloneElement(child, {\n      separator,\n      spacing,\n      isLastChild: count === index + 1,\n    }),\n  )\n\n  const _className = cx(\"chakra-breadcrumb\", className)\n\n  return (\n    <chakra.nav\n      ref={ref}\n      aria-label=\"breadcrumb\"\n      className={_className}\n      __css={styles.container}\n      {...rest}\n    >\n      <StylesProvider value={styles}>\n        <chakra.ol className=\"chakra-breadcrumb__list\">{clones}</chakra.ol>\n      </StylesProvider>\n    </chakra.nav>\n  )\n})\n\nif (__DEV__) {\n  Breadcrumb.displayName = \"Breadcrumb\"\n}\n"]},"metadata":{},"sourceType":"module"}