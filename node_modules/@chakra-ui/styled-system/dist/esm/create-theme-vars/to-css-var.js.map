{"version":3,"sources":["../../../src/create-theme-vars/to-css-var.ts"],"names":["analyzeBreakpoints","createThemeVars","extractTokens","omitVars","toCSSVar","rawTheme","theme","tokens","cssVarPrefix","config","cssMap","cssVars","defaultCssVars","Object","assign","__cssVars","__cssMap","__breakpoints","breakpoints"],"mappings":";;AAAA,SAASA,kBAAT,QAAyC,kBAAzC;AAEA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,gBAAxC;AAEA,OAAO,SAASC,QAAT,CAAkCC,QAAlC,EAA+C;AAAA;;AACpD;AACF;AACA;AACA;AACE,MAAMC,KAAK,GAAGH,QAAQ,CAACE,QAAD,CAAtB,CALoD,CAOpD;;AACA,MAAME,MAAM,GAAGL,aAAa,CAACI,KAAD,CAA5B;AAEA,MAAME,YAAY,oBAAGF,KAAK,CAACG,MAAT,qBAAG,cAAcD,YAAnC;AAEA,MAAM;AACJ;AACJ;AACA;AACA;AACIE,IAAAA,MALI;;AAMJ;AACJ;AACA;AACA;AACIC,IAAAA;AAVI,MAWFV,eAAe,CAACM,MAAD,EAAS;AAAEC,IAAAA;AAAF,GAAT,CAXnB;AAaA,MAAMI,cAAoB,GAAG;AAC3B,2BAAuB,iCADI;AAE3B,kCAA8B,KAFH;AAG3B,kCAA8B,MAHH;AAI3B,2BAAuB,yBAJI;AAK3B,mCAA+B,WALJ;AAM3B,4BAAwB,WANG;AAO3B,gCAA4B,GAPD;AAQ3B,gCAA4B;AARD,GAA7B;AAWAC,EAAAA,MAAM,CAACC,MAAP,CAAcR,KAAd,EAAqB;AACnBS,IAAAA,SAAS,eAAOH,cAAP,EAA0BD,OAA1B,CADU;AAEnBK,IAAAA,QAAQ,EAAEN,MAFS;AAGnBO,IAAAA,aAAa,EAAEjB,kBAAkB,CAACM,KAAK,CAACY,WAAP;AAHd,GAArB;AAMA,SAAOZ,KAAP;AACD","sourcesContent":["import { analyzeBreakpoints, Dict } from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"../utils/types\"\nimport { createThemeVars } from \"./create-theme-vars\"\nimport { extractTokens, omitVars } from \"./theme-tokens\"\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = createThemeVars(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n"],"file":"to-css-var.js"}