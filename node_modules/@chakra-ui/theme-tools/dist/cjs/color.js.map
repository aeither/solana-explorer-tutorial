{"version":3,"sources":["../../src/color.ts"],"names":["getColor","theme","color","fallback","hex","isValid","tone","isDark","isLight","transparentize","opacity","raw","setAlpha","toRgbString","whiten","amount","Color","mix","toHexString","blacken","darken","lighten","contrast","fg","bg","readability","isAccessible","textColor","bgColor","options","isReadable","complementary","complement","generateStripe","size","backgroundImage","backgroundSize","randomColor","opts","random","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","length","toString","i","charCodeAt","j","value","substr","list","index","Math","floor"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAcC,KAAd,EAA6BC,QAA7B,EAAmD;AACzE,MAAMC,GAAG,GAAG,wBAAIH,KAAJ,cAAqBC,KAArB,EAA8BA,KAA9B,CAAZ;AACA,MAAMG,OAAO,GAAG,2BAAMD,GAAN,EAAWC,OAAX,EAAhB;AACA,SAAOA,OAAO,GAAGD,GAAH,GAASD,QAAvB;AACD,CAJM;AAMP;AACA;AACA;AACA;;;;;AACO,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAACJ,KAAD;AAAA,SAAmB,UAACD,KAAD,EAAiB;AACtD,QAAMG,GAAG,GAAGJ,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAApB;AACA,QAAMK,MAAM,GAAG,2BAAMH,GAAN,EAAWG,MAAX,EAAf;AACA,WAAOA,MAAM,GAAG,MAAH,GAAY,OAAzB;AACD,GAJmB;AAAA,CAAb;AAMP;AACA;AACA;AACA;;;;;AACO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACL,KAAD;AAAA,SAAmB,UAACD,KAAD;AAAA,WACvCK,IAAI,CAACJ,KAAD,CAAJ,CAAYD,KAAZ,MAAuB,MADgB;AAAA,GAAnB;AAAA,CAAf;AAGP;AACA;AACA;AACA;;;;;AACO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACN,KAAD;AAAA,SAAmB,UAACD,KAAD;AAAA,WACxCK,IAAI,CAACJ,KAAD,CAAJ,CAAYD,KAAZ,MAAuB,OADiB;AAAA,GAAnB;AAAA,CAAhB;AAGP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACP,KAAD,EAAgBQ,OAAhB;AAAA,SAAoC,UAChET,KADgE,EAE7D;AACH,QAAMU,GAAG,GAAGX,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAApB;AACA,WAAO,2BAAMS,GAAN,EAAWC,QAAX,CAAoBF,OAApB,EAA6BG,WAA7B,EAAP;AACD,GAL6B;AAAA,CAAvB;AAOP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACZ,KAAD,EAAgBa,MAAhB;AAAA,SAAmC,UAACd,KAAD,EAAiB;AACxE,QAAMU,GAAG,GAAGX,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAApB;AACA,WAAOc,sBAAMC,GAAN,CAAUN,GAAV,EAAe,MAAf,EAAuBI,MAAvB,EAA+BG,WAA/B,EAAP;AACD,GAHqB;AAAA,CAAf;AAKP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACjB,KAAD,EAAgBa,MAAhB;AAAA,SAAmC,UAACd,KAAD,EAAiB;AACzE,QAAMU,GAAG,GAAGX,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAApB;AACA,WAAOc,sBAAMC,GAAN,CAAUN,GAAV,EAAe,MAAf,EAAuBI,MAAvB,EAA+BG,WAA/B,EAAP;AACD,GAHsB;AAAA,CAAhB;AAKP;AACA;AACA;AACA;AACA;;;;;AACO,IAAME,MAAM,GAAG,SAATA,MAAS,CAAClB,KAAD,EAAgBa,MAAhB;AAAA,SAAmC,UAACd,KAAD,EAAiB;AACxE,QAAMU,GAAG,GAAGX,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAApB;AACA,WAAO,2BAAMS,GAAN,EAAWS,MAAX,CAAkBL,MAAlB,EAA0BG,WAA1B,EAAP;AACD,GAHqB;AAAA,CAAf;AAKP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACnB,KAAD,EAAgBa,MAAhB;AAAA,SAAmC,UAACd,KAAD;AAAA,WACxD,2BAAMD,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAAd,EAA8BmB,OAA9B,CAAsCN,MAAtC,EAA8CG,WAA9C,EADwD;AAAA,GAAnC;AAAA,CAAhB;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACC,EAAD,EAAaC,EAAb;AAAA,SAA4B,UAACvB,KAAD;AAAA,WAClDe,sBAAMS,WAAN,CAAkBzB,QAAQ,CAACC,KAAD,EAAQuB,EAAR,CAA1B,EAAuCxB,QAAQ,CAACC,KAAD,EAAQsB,EAAR,CAA/C,CADkD;AAAA,GAA5B;AAAA,CAAjB;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAC1BC,SAD0B,EAE1BC,OAF0B,EAG1BC,OAH0B;AAAA,SAIvB,UAAC5B,KAAD;AAAA,WACHe,sBAAMc,UAAN,CACE9B,QAAQ,CAACC,KAAD,EAAQ2B,OAAR,CADV,EAEE5B,QAAQ,CAACC,KAAD,EAAQ0B,SAAR,CAFV,EAGEE,OAHF,CADG;AAAA,GAJuB;AAAA,CAArB;;;;AAWA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAC7B,KAAD;AAAA,SAAmB,UAACD,KAAD;AAAA,WAC9C,2BAAMD,QAAQ,CAACC,KAAD,EAAQC,KAAR,CAAd,EAA8B8B,UAA9B,GAA2Cd,WAA3C,EAD8C;AAAA,GAAnB;AAAA,CAAtB;;;;AAGA,SAASe,cAAT,CACLC,IADK,EAELhC,KAFK,EAGL;AAAA,MAFAgC,IAEA;AAFAA,IAAAA,IAEA,GAFO,MAEP;AAAA;;AAAA,MADAhC,KACA;AADAA,IAAAA,KACA,GADQ,2BACR;AAAA;;AACA,SAAO;AACLiC,IAAAA,eAAe,yCAEbjC,KAFa,+DAKbA,KALa,mBAMbA,KANa,sDADV;AAWLkC,IAAAA,cAAc,EAAKF,IAAL,SAAaA;AAXtB,GAAP;AAaD;;AAcM,SAASG,WAAT,CAAqBC,IAArB,EAAgD;AACrD,MAAMnC,QAAQ,GAAGa,sBAAMuB,MAAN,GAAerB,WAAf,EAAjB;;AAEA,MAAI,CAACoB,IAAD,IAAS,0BAAcA,IAAd,CAAb,EAAkC;AAChC,WAAOnC,QAAP;AACD;;AAED,MAAImC,IAAI,CAACE,MAAL,IAAeF,IAAI,CAACG,MAAxB,EAAgC;AAC9B,WAAOC,mBAAmB,CAACJ,IAAI,CAACE,MAAN,EAAcF,IAAI,CAACG,MAAnB,CAA1B;AACD;;AAED,MAAIH,IAAI,CAACE,MAAL,IAAe,CAACF,IAAI,CAACG,MAAzB,EAAiC;AAC/B,WAAOE,qBAAqB,CAACL,IAAI,CAACE,MAAN,CAA5B;AACD;;AAED,MAAIF,IAAI,CAACG,MAAL,IAAe,CAACH,IAAI,CAACE,MAAzB,EAAiC;AAC/B,WAAOI,cAAc,CAACN,IAAI,CAACG,MAAN,CAArB;AACD;;AAED,SAAOtC,QAAP;AACD;;AAED,SAASwC,qBAAT,CAA+BE,GAA/B,EAA4C;AAC1C,MAAIC,IAAI,GAAG,CAAX;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB,OAAOD,IAAI,CAACE,QAAL,EAAP;;AACtB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACE,MAAxB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtCH,IAAAA,IAAI,GAAGD,GAAG,CAACK,UAAJ,CAAeD,CAAf,KAAqB,CAACH,IAAI,IAAI,CAAT,IAAcA,IAAnC,CAAP;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAd;AACD;;AACD,MAAI5C,KAAK,GAAG,GAAZ;;AACA,OAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,QAAMC,KAAK,GAAIN,IAAI,IAAKK,CAAC,GAAG,CAAd,GAAoB,GAAlC;AACAjD,IAAAA,KAAK,IAAI,QAAKkD,KAAK,CAACJ,QAAN,CAAe,EAAf,CAAL,EAA0BK,MAA1B,CAAiC,CAAC,CAAlC,CAAT;AACD;;AACD,SAAOnD,KAAP;AACD;;AAED,SAASwC,mBAAT,CAA6BG,GAA7B,EAA0CS,IAA1C,EAA0D;AACxD,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIV,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB,OAAOO,IAAI,CAAC,CAAD,CAAX;;AACtB,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACE,MAAxB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtCM,IAAAA,KAAK,GAAGV,GAAG,CAACK,UAAJ,CAAeD,CAAf,KAAqB,CAACM,KAAK,IAAI,CAAV,IAAeA,KAApC,CAAR;AACAA,IAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAhB;AACD;;AACDA,EAAAA,KAAK,GAAG,CAAEA,KAAK,GAAGD,IAAI,CAACP,MAAd,GAAwBO,IAAI,CAACP,MAA9B,IAAwCO,IAAI,CAACP,MAArD;AACA,SAAOO,IAAI,CAACC,KAAD,CAAX;AACD;;AAED,SAASX,cAAT,CAAwBU,IAAxB,EAAwC;AACtC,SAAOA,IAAI,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACjB,MAAL,KAAgBe,IAAI,CAACP,MAAhC,CAAD,CAAX;AACD","sourcesContent":["import Color from \"tinycolor2\"\nimport { memoizedGet as get, Dict, isEmptyObject } from \"@chakra-ui/utils\"\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  const isValid = Color(hex).isValid()\n  return isValid ? hex : fallback\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const isDark = Color(hex).isDark()\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n */\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict,\n) => {\n  const raw = getColor(theme, color)\n  return Color(raw).setAlpha(opacity).toRgbString()\n}\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color.mix(raw, \"#fff\", amount).toHexString()\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color.mix(raw, \"#000\", amount).toHexString()\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return Color(raw).darken(amount).toHexString()\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) =>\n  Color(getColor(theme, color)).lighten(amount).toHexString()\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  Color.readability(getColor(theme, bg), getColor(theme, fg))\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\nexport const isAccessible = (\n  textColor: string,\n  bgColor: string,\n  options?: Color.WCAG2Options,\n) => (theme: Dict) =>\n  Color.isReadable(\n    getColor(theme, bgColor),\n    getColor(theme, textColor),\n    options,\n  )\n\nexport const complementary = (color: string) => (theme: Dict) =>\n  Color(getColor(theme, color)).complement().toHexString()\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = Color.random().toHexString()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n"],"file":"color.js"}