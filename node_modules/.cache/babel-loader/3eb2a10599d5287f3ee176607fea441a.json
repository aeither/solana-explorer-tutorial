{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, layoutPropNames, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, mergeWith, split, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var SelectField = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      placeholder = props.placeholder,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"placeholder\", \"className\"]);\n\n  var ownProps = useFormControl(rest);\n  return /*#__PURE__*/React.createElement(chakra.select, _extends({}, ownProps, {\n    ref: ref,\n    className: cx(\"chakra-select\", className)\n  }), placeholder && /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), children);\n});\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\";\n}\n/**\n * React component used to select one item from a list of options.\n */\n\n\nexport var Select = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Select\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      rootProps = _omitThemingProps.rootProps,\n      placeholder = _omitThemingProps.placeholder,\n      icon = _omitThemingProps.icon,\n      color = _omitThemingProps.color,\n      height = _omitThemingProps.height,\n      h = _omitThemingProps.h,\n      minH = _omitThemingProps.minH,\n      minHeight = _omitThemingProps.minHeight,\n      iconColor = _omitThemingProps.iconColor,\n      iconSize = _omitThemingProps.iconSize,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"rootProps\", \"placeholder\", \"icon\", \"color\", \"height\", \"h\", \"minH\", \"minHeight\", \"iconColor\", \"iconSize\", \"isFullWidth\"]);\n\n  var _split = split(rest, layoutPropNames),\n      _split2 = _slicedToArray(_split, 2),\n      layoutProps = _split2[0],\n      otherProps = _split2[1];\n\n  var rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color: color\n  };\n  var fieldStyles = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: {\n      zIndex: \"unset\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles\n  }, layoutProps, rootProps), /*#__PURE__*/React.createElement(SelectField, _extends({\n    ref: ref,\n    height: h != null ? h : height,\n    minH: minH != null ? minH : minHeight,\n    placeholder: placeholder\n  }, otherProps, {\n    __css: fieldStyles\n  }), props.children), /*#__PURE__*/React.createElement(SelectIcon, _extends({\n    \"data-disabled\": props.isDisabled\n  }, (iconColor || color) && {\n    color: iconColor || color\n  }, {\n    __css: styles.icon\n  }, iconSize && {\n    fontSize: iconSize\n  }), icon));\n});\n\nif (__DEV__) {\n  Select.displayName = \"Select\";\n}\n\nexport var DefaultIcon = function DefaultIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\n\nvar SelectIcon = function SelectIcon(props) {\n  var _props$children = props.children,\n      children = _props$children === void 0 ? /*#__PURE__*/React.createElement(DefaultIcon, null) : _props$children,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\"]);\n\n  var clone = /*#__PURE__*/React.cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(IconWrapper, _extends({}, rest, {\n    className: \"chakra-select__icon-wrapper\"\n  }), /*#__PURE__*/React.isValidElement(children) ? clone : null);\n};\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\";\n}","map":{"version":3,"sources":["../../src/select.tsx"],"names":["SelectField","forwardRef","className","ownProps","useFormControl","cx","placeholder","Select","styles","useMultiStyleConfig","iconSize","omitThemingProps","split","rootStyles","width","height","position","color","fieldStyles","mergeWith","paddingEnd","_focus","zIndex","h","minH","props","isDisabled","iconColor","icon","fontSize","DefaultIcon","IconWrapper","chakra","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","SelectIcon","children","clone","role","focusable","style"],"mappings":"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","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mergeWith, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<HTMLChakraProps<\"select\">, Omitted> {\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  (props, ref) => {\n    const { children, placeholder, className, ...rest } = props\n    const ownProps = useFormControl<HTMLSelectElement>(rest)\n\n    return (\n      <chakra.select\n        {...ownProps}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<HTMLChakraProps<\"div\">, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps<\"Select\">,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const rootStyles: SystemStyleObject = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles: SystemStyleObject = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: { zIndex: \"unset\" },\n  })\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...otherProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={props.isDisabled}\n        {...((iconColor || color) && { color: iconColor || color })}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      >\n        {icon}\n      </SelectIcon>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ninterface SelectIconProps extends HTMLChakraProps<\"div\"> {}\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper {...rest} className=\"chakra-select__icon-wrapper\">\n      {React.isValidElement(children) ? clone : null}\n    </IconWrapper>\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}