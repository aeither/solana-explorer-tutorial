{"version":3,"sources":["../../src/component.ts"],"names":["runIfFn","mode","light","dark","props","colorMode","orient","options","orientation","vertical","horizontal"],"mappings":"AACA,SAAeA,OAAf,QAA8B,kBAA9B;AAEA;AACA;AACA;;AAuEA,SAASA,OAAT;AAIA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAA0BC,IAA1B,EAAqC;AAC1C,SAAQC,KAAD,IACLA,KAAK,CAACC,SAAN,KAAoB,MAApB,GAA6BF,IAA7B,GAAoCD,KADtC;AAED;AAED,OAAO,SAASI,MAAT,CAAgBC,OAAhB,EAIJ;AACD,MAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,MAAwCH,OAA9C;AACA,MAAI,CAACC,WAAL,EAAkB,OAAO,EAAP;AAClB,SAAOA,WAAW,KAAK,UAAhB,GAA6BC,QAA7B,GAAwCC,UAA/C;AACD","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/system\"\nimport { Dict, runIfFn } from \"@chakra-ui/utils\"\n\n/* -----------------------------------------------------------------------------\n * Style Configuration definition for components\n * -----------------------------------------------------------------------------*/\n\nexport interface StyleConfig {\n  baseStyle?: SystemStyleObject\n  sizes?: { [size: string]: SystemStyleObject }\n  variants?: { [variant: string]: SystemStyleObject }\n  defaultProps?: {\n    size?: string\n    variant?: string\n    colorScheme?: string\n  }\n}\n\n// minimal represenation of the anatomy object\ntype Anatomy = { __type: string }\n\nexport interface MultiStyleConfig<T extends Anatomy = Anatomy> {\n  baseStyle?: PartsStyleObject<T>\n  sizes?: { [size: string]: PartsStyleObject<T> | PartsStyleFunction<T> }\n  variants?: { [variant: string]: PartsStyleObject<T> | PartsStyleFunction<T> }\n  defaultProps?: StyleConfig[\"defaultProps\"]\n}\n\n/* -----------------------------------------------------------------------------\n * Style Functions used in the theme\n   - Single part components: use SystemStyleObject or SystemStyleFunction\n   - Multi part components: use PartsStyleObject or PartsStyleFunction\n * -----------------------------------------------------------------------------*/\n\nexport type { SystemStyleObject }\n\nexport type StyleFunctionProps = {\n  colorScheme: string\n  colorMode: \"light\" | \"dark\"\n  orientation?: \"horizontal\" | \"vertical\"\n  theme: Dict\n  [key: string]: any\n}\n\nexport type SystemStyleFunction = (\n  props: StyleFunctionProps,\n) => SystemStyleObject\n\nexport type SystemStyleInterpolation = SystemStyleObject | SystemStyleFunction\n\nexport type PartsStyleObject<T extends Anatomy = Anatomy> = Partial<\n  Record<T[\"__type\"], SystemStyleObject>\n>\n\nexport type PartsStyleFunction<T extends Anatomy = Anatomy> = (\n  props: StyleFunctionProps,\n) => PartsStyleObject<T>\n\nexport type PartsStyleInterpolation<T extends Anatomy = Anatomy> =\n  | PartsStyleObject<T>\n  | PartsStyleFunction<T>\n\n/* -----------------------------------------------------------------------------\n * Global Style object definitions\n * -----------------------------------------------------------------------------*/\n\nexport type GlobalStyleProps = StyleFunctionProps\n\nexport type GlobalStyles = {\n  global?: SystemStyleInterpolation\n}\n\nexport type JSXElementStyles = {\n  [K in keyof JSX.IntrinsicElements]?: SystemStyleObject\n}\n\nexport { runIfFn }\n\nexport type Styles = GlobalStyles & JSXElementStyles\n\nexport function mode(light: any, dark: any) {\n  return (props: Dict | StyleFunctionProps) =>\n    props.colorMode === \"dark\" ? dark : light\n}\n\nexport function orient(options: {\n  orientation?: \"vertical\" | \"horizontal\"\n  vertical: SystemStyleObject\n  horizontal: SystemStyleObject\n}) {\n  const { orientation, vertical, horizontal } = options\n  if (!orientation) return {}\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n"],"file":"component.js"}