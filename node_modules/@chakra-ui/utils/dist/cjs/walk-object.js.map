{"version":3,"sources":["../../src/walk-object.ts"],"names":["walkObject","target","predicate","inner","value","path","map","item","index","String","Object","fromEntries","entries","key","child"],"mappings":";;;;;AAAA;;AAeO,SAASA,UAAT,CACLC,MADK,EAELC,SAFK,EAGkE;AACvE,WAASC,KAAT,CAAeC,KAAf,EAA+BC,IAA/B,EAAyD;AAAA,QAA1BA,IAA0B;AAA1BA,MAAAA,IAA0B,GAAT,EAAS;AAAA;;AACvD,QAAI,wBAAQD,KAAR,CAAJ,EAAoB;AAClB,aAAOA,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP;AAAA,eAAiBL,KAAK,CAACI,IAAD,YAAWF,IAAX,GAAiBI,MAAM,CAACD,KAAD,CAAvB,GAAtB;AAAA,OAAV,CAAP;AACD;;AAED,QAAI,yBAASJ,KAAT,CAAJ,EAAqB;AACnB,aAAOM,MAAM,CAACC,WAAP,CACLD,MAAM,CAACE,OAAP,CAAeR,KAAf,EAAsBE,GAAtB,CAA0B;AAAA,YAAEO,GAAF;AAAA,YAAOC,KAAP;AAAA,eAAkB,CAC1CD,GAD0C,EAE1CV,KAAK,CAACW,KAAD,YAAYT,IAAZ,GAAkBQ,GAAlB,GAFqC,CAAlB;AAAA,OAA1B,CADK,CAAP;AAMD;;AAED,WAAOX,SAAS,CAACE,KAAD,EAAQC,IAAR,CAAhB;AACD;;AAED,SAAOF,KAAK,CAACF,MAAD,CAAZ;AACD","sourcesContent":["import { isArray, isObject } from \"./assertion\"\n\nexport type WalkObjectPredicate<Leaf = unknown> = (\n  value: unknown,\n  path: string[],\n) => Leaf\n\nexport type MappedLeavesObject<Obj, LeafType> = {\n  [Prop in keyof Obj]: Obj[Prop] extends Array<any>\n    ? MappedLeavesObject<Obj[Prop][number], LeafType>[]\n    : Obj[Prop] extends object\n    ? MappedLeavesObject<Obj[Prop], LeafType>\n    : LeafType\n}\n\nexport function walkObject<Target, LeafType>(\n  target: Target,\n  predicate: WalkObjectPredicate<LeafType>,\n): MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>> {\n  function inner(value: unknown, path: string[] = []): any {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]))\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, child]) => [\n          key,\n          inner(child, [...path, key]),\n        ]),\n      )\n    }\n\n    return predicate(value, path)\n  }\n\n  return inner(target)\n}\n"],"file":"walk-object.js"}