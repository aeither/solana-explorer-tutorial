{"version":3,"sources":["../../src/use-counter.ts"],"names":["useCallbackRef","useControllableProp","clampValue","countDecimalPlaces","maxSafeInteger","minSafeInteger","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","max","keepWithinRange","onChangeProp","valueState","setValue","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","Number","isNaN","undefined"],"mappings":"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","sourcesContent":["import { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  toPrecision,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"],"file":"use-counter.js"}