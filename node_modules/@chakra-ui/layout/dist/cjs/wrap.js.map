{"version":3,"sources":["../../src/wrap.tsx"],"names":["Wrap","props","ref","spacing","children","justify","direction","align","className","shouldWrapChildren","rest","styles","React","useMemo","theme","value","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","margin","childrenToRender","Children","map","child","index","__DEV__","displayName","WrapItem"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n  tokenToCSSVar,\n} from \"@chakra-ui/system\"\nimport { cx, Dict, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">((props, ref) => {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const styles = React.useMemo(\n    () => ({\n      \"--chakra-wrap-spacing\": (theme: Dict) =>\n        mapResponsive(spacing, (value) => tokenToCSSVar(\"space\", value)(theme)),\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\",\n      },\n    }),\n    [spacing, justify, align, direction],\n  )\n\n  const childrenToRender = shouldWrapChildren\n    ? React.Children.map(children, (child, index) => (\n        <WrapItem key={index}>{child}</WrapItem>\n      ))\n    : children\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul className=\"chakra-wrap__list\" __css={styles}>\n        {childrenToRender}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">((props, ref) => {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"],"file":"wrap.js"}