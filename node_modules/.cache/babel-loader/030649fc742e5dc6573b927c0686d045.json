{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\n\nexport function useClipboard(text, optionsOrTimeout) {\n  if (optionsOrTimeout === void 0) {\n    optionsOrTimeout = {};\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasCopied = _useState2[0],\n      setHasCopied = _useState2[1];\n\n  var _ref = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 1500 : _ref$timeout,\n      copyOptions = _objectWithoutPropertiesLoose(_ref, [\"timeout\"]);\n\n  var onCopy = useCallback(function () {\n    var didCopy = copy(text, copyOptions);\n    setHasCopied(didCopy);\n  }, [text, copyOptions]);\n  useEffect(function () {\n    var timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(function () {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return function () {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["../../src/use-clipboard.ts"],"names":["optionsOrTimeout","useState","timeout","onCopy","useCallback","didCopy","copy","setHasCopied","useEffect","timeoutId","window","value","hasCopied"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAA,QAAA,EAAA,WAAA,EAAA,SAAA,QAAA,OAAA;AACA,OAAA,IAAA,MAAA,mBAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,YAAA,CAAA,IAAA,EAAA,gBAAA,EAGL;AAAA,MADAA,gBACA,KAAA,KAAA,CAAA,EAAA;AADAA,IAAAA,gBACA,GADiD,EAAjDA;AACA;;AACA,kBAAkCC,QAAQ,CAA1C,KAA0C,CAA1C;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,YAAN;;AAEA,MAAA,IAAA,GACE,OAAA,gBAAA,KAAA,QAAA,GACI;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GADJ,GADF,gBAAA;AAAA,qBAAA,IAAA,CAAQE,OAAR;AAAA,MAAQA,OAAR,6BAAkB,IAAlB;AAAA,MAAA,WAAA,GAAA,6BAAA,CAAA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;AAKA,MAAMC,MAAM,GAAGC,WAAW,CAAC,YAAM;AAC/B,QAAMC,OAAO,GAAGC,IAAI,CAAA,IAAA,EAApB,WAAoB,CAApB;AACAC,IAAAA,YAAY,CAAZA,OAAY,CAAZA;AAFwB,GAAA,EAGvB,CAAA,IAAA,EAHH,WAGG,CAHuB,CAA1B;AAKAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIC,SAAwB,GAA5B,IAAA;;AAEA,QAAA,SAAA,EAAe;AACbA,MAAAA,SAAS,GAAG,MAAM,CAAN,UAAA,CAAkB,YAAM;AAClCF,QAAAA,YAAY,CAAZA,KAAY,CAAZA;AADU,OAAA,EAAZE,OAAY,CAAZA;AAGD;;AAED,WAAO,YAAM;AACX,UAAA,SAAA,EAAe;AACbC,QAAAA,MAAM,CAANA,YAAAA,CAAAA,SAAAA;AACD;AAHH,KAAA;AATO,GAAA,EAcN,CAAA,OAAA,EAdHF,SAcG,CAdM,CAATA;AAgBA,SAAO;AAAEG,IAAAA,KAAK,EAAP,IAAA;AAAeR,IAAAA,MAAf,EAAeA,MAAf;AAAuBS,IAAAA,SAAAA,EAAAA;AAAvB,GAAP;AACD","sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\nexport function useClipboard(\n  text: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text, copyOptions)\n    setHasCopied(didCopy)\n  }, [text, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return { value: text, onCopy, hasCopied }\n}\n"]},"metadata":{},"sourceType":"module"}