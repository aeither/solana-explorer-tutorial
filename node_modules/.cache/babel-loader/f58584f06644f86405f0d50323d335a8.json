{"ast":null,"code":"import { t } from \"../utils\";\nexport var space = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginInlineStart\", \"marginInlineEnd\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingInlineStart\", \"paddingInlineEnd\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\")\n};\nObject.assign(space, {\n  m: space.margin,\n  mt: space.marginTop,\n  mr: space.marginRight,\n  me: space.marginInlineEnd,\n  marginEnd: space.marginInlineEnd,\n  mb: space.marginBottom,\n  ml: space.marginLeft,\n  ms: space.marginInlineStart,\n  marginStart: space.marginInlineStart,\n  mx: space.marginX,\n  my: space.marginY,\n  p: space.padding,\n  pt: space.paddingTop,\n  py: space.paddingY,\n  px: space.paddingX,\n  pb: space.paddingBottom,\n  pl: space.paddingLeft,\n  ps: space.paddingInlineStart,\n  paddingStart: space.paddingInlineStart,\n  pr: space.paddingRight,\n  pe: space.paddingInlineEnd,\n  paddingEnd: space.paddingInlineEnd\n});\n/**\n * Types for space related CSS properties\n */","map":{"version":3,"sources":["../../../src/config/space.ts"],"names":["space","margin","t","marginTop","marginBlockStart","marginRight","marginInlineEnd","marginBottom","marginBlockEnd","marginLeft","marginInlineStart","marginX","marginInline","marginY","marginBlock","padding","paddingTop","paddingBlockStart","paddingRight","paddingBottom","paddingBlockEnd","paddingLeft","paddingInlineStart","paddingInlineEnd","paddingX","paddingInline","paddingY","paddingBlock","Object","m","mt","mr","me","marginEnd","mb","ml","ms","marginStart","mx","my","p","pt","py","px","pb","pl","ps","paddingStart","pr","pe","paddingEnd"],"mappings":"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","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config } from \"../utils/prop-config\"\nimport { t, Token } from \"../utils\"\n\nexport const space: Config = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginInlineStart\", \"marginInlineEnd\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingInlineStart\", \"paddingInlineEnd\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\"),\n}\n\nObject.assign(space, {\n  m: space.margin,\n  mt: space.marginTop,\n  mr: space.marginRight,\n  me: space.marginInlineEnd,\n  marginEnd: space.marginInlineEnd,\n  mb: space.marginBottom,\n  ml: space.marginLeft,\n  ms: space.marginInlineStart,\n  marginStart: space.marginInlineStart,\n  mx: space.marginX,\n  my: space.marginY,\n  p: space.padding,\n  pt: space.paddingTop,\n  py: space.paddingY,\n  px: space.paddingX,\n  pb: space.paddingBottom,\n  pl: space.paddingLeft,\n  ps: space.paddingInlineStart,\n  paddingStart: space.paddingInlineStart,\n  pr: space.paddingRight,\n  pe: space.paddingInlineEnd,\n  paddingEnd: space.paddingInlineEnd,\n})\n\n/**\n * Types for space related CSS properties\n */\nexport interface SpaceProps {\n  /**\n   * Margin on top, left, bottom and right\n   */\n  m?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top, left, bottom and right\n   */\n  margin?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top\n   */\n  mt?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlockStart?: Token<CSS.Property.MarginBlockStart | number, \"space\">\n  /**\n   * Margin on top\n   */\n  marginTop?: Token<CSS.Property.MarginTop | number, \"space\">\n  /**\n   * Margin on right\n   */\n  mr?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginInlineEnd` is equivalent to `marginLeft`.\n   */\n  marginInlineEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `me` is equivalent to `marginRight`.\n   * When direction is `rtl`, `me` is equivalent to `marginLeft`.\n   */\n  me?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * Margin on right\n   */\n  marginRight?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  mb?: Token<CSS.Property.MarginBottom | number, \"space\">\n  marginBlockEnd?: Token<CSS.Property.MarginBlockEnd | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  marginBottom?: Token<CSS.Property.MarginBottom | number, \"space\">\n  /**\n   * Margin on left\n   */\n  ml?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginInlineStart` is equivalent to `marginRight`.\n   */\n  marginInlineStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ms` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `ms` is equivalent to `marginRight`.\n   */\n  ms?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * Margin on left\n   */\n  marginLeft?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  mx?: Token<CSS.Property.Margin | number, \"space\">\n  marginInline?: Token<CSS.Property.MarginInline | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  marginX?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  my?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlock?: Token<CSS.Property.MarginBlock | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  marginY?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  p?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  padding?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top\n   */\n  pt?: Token<CSS.Property.PaddingTop | number, \"space\">\n  paddingBlockStart?: Token<CSS.Property.PaddingBlockStart | number, \"space\">\n  /**\n   * Padding on top\n   */\n  paddingTop?: Token<CSS.Property.PaddingTop | number, \"space\">\n  /**\n   * Padding on right\n   */\n  pr?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingInlineEnd` is equivalent to `paddingLeft`.\n   */\n  paddingInlineEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `pe` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `pe` is equivalent to `paddingLeft`.\n   */\n  pe?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * Padding on right\n   */\n  paddingRight?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  pb?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  paddingBlockEnd?: Token<CSS.Property.PaddingBlockEnd | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  paddingBottom?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  /**\n   * Padding on left\n   */\n  pl?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingInlineStart` is equivalent to `paddingRight`.\n   */\n  paddingInlineStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ps` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `ps` is equivalent to `paddingRight`.\n   */\n  ps?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * Padding on left\n   */\n  paddingLeft?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  px?: Token<CSS.Property.Padding | number, \"space\">\n  paddingInline?: Token<CSS.Property.PaddingInline | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  paddingX?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  py?: Token<CSS.Property.Padding | number, \"space\">\n  paddingBlock?: Token<CSS.Property.PaddingBlock | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  paddingY?: Token<CSS.Property.Padding | number, \"space\">\n}\n"]},"metadata":{},"sourceType":"module"}