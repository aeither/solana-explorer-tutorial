{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = function sanitize(value) {\n  return value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n};\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$focusInputOnCh = _props.focusInputOnChange,\n      focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh,\n      _props$clampValueOnBl = _props.clampValueOnBlur,\n      clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl,\n      _props$keepWithinRang = _props.keepWithinRange,\n      keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang,\n      _props$min = _props.min,\n      min = _props$min === void 0 ? minSafeInteger : _props$min,\n      _props$max = _props.max,\n      max = _props$max === void 0 ? maxSafeInteger : _props$max,\n      _props$step = _props.step,\n      stepProp = _props$step === void 0 ? 1 : _props$step,\n      isReadOnly = _props.isReadOnly,\n      isDisabled = _props.isDisabled,\n      isRequired = _props.isRequired,\n      getAriaValueText = _props.getAriaValueText,\n      isInvalid = _props.isInvalid,\n      _props$pattern = _props.pattern,\n      pattern = _props$pattern === void 0 ? \"[0-9]*(.[0-9]+)?\" : _props$pattern,\n      _props$inputMode = _props.inputMode,\n      inputMode = _props$inputMode === void 0 ? \"decimal\" : _props$inputMode,\n      allowMouseWheel = _props.allowMouseWheel,\n      id = _props.id,\n      name = _props.name,\n      ariaDescBy = _props[\"aria-describedby\"],\n      ariaLabel = _props[\"aria-label\"],\n      ariaLabelledBy = _props[\"aria-labelledby\"],\n      onFocus = _props.onFocus,\n      onBlur = _props.onBlur,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var updateFn = counter.update,\n      incrementFn = counter.increment,\n      decrementFn = counter.decrement;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(function (event) {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(function (event) {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: function ArrowUp() {\n        return increment(stepFactor);\n      },\n      ArrowDown: function ArrowDown() {\n        return decrement(stepFactor);\n      },\n      Home: function Home() {\n        return updateFn(min);\n      },\n      End: function End() {\n        return updateFn(max);\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = function getStepFactor(event) {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var ariaValueText = React.useMemo(function () {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(function () {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(function () {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(function () {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function (event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends2, pointerDown, callAllHandlers(props[pointerDown], spinUp)), _defineProperty(_extends2, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onMouseLeave\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends2, \"disabled\", disabled), _defineProperty(_extends2, \"aria-disabled\", ariaAttr(disabled)), _extends2));\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends3;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, (_extends3 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends3, pointerDown, callAllHandlers(props[pointerDown], spinDown)), _defineProperty(_extends3, \"onMouseLeave\", callAllHandlers(props.onMouseLeave, spinner.stop)), _defineProperty(_extends3, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends3, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends3, \"disabled\", disabled), _defineProperty(_extends3, \"aria-disabled\", ariaAttr(disabled)), _extends3));\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name: name,\n      inputMode: inputMode,\n      type: \"text\",\n      pattern: pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id: id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused: isFocused,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getInputProps: getInputProps,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-number-input.ts"],"names":["sanitize","value","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","pattern","inputMode","onBlur","onFocusProp","useCallbackRef","onBlurProp","getAriaValueTextProp","counter","useCounter","update","increment","decrement","decrementFn","useBoolean","inputRef","React","useSafeLayoutEffect","notInSync","isInteractive","isReadOnly","incrementFn","spinner","useSpinner","onChange","event","updateFn","onKeyDown","isValidNumericKeyboardEvent","stepFactor","getStepFactor","eventKey","normalizeEventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","ariaValueText","text","isNull","defaultText","validateAndClamp","next","onInputBlur","setFocused","focusInput","focus","nextTick","spinUp","spinDown","pointerDown","isBrowser","document","useEventListener","isInputFocused","direction","Math","passive","getIncrementButtonProps","ref","disabled","isDisabled","role","tabIndex","callAllHandlers","ariaAttr","getDecrementButtonProps","getInputProps","name","type","id","readOnly","required","mergeRefs","Number","isInvalid","autoComplete","autoCorrect","onFocus","valueAsNumber","isFocused","htmlProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,oBAAA;AACA,SAAA,UAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,mBAAA,QAAA,kBAAA;AAMA,SAAA,QAAA,EAAA,eAAA,EAAA,KAAA,EAAA,SAAA,EAAA,MAAA,EAAA,cAAA,EAAA,cAAA,EAAA,iBAAA,QAAA,kBAAA;AAWA,SAAA,SAAA,QAAA,wBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,eAAA;AACA,SAAA,+BAAA,EAAA,2BAAA,QAAA,SAAA;;AA2EA,IAAMA,QAAQ,GAAIC,SAAZD,QAAYC,CAAAA,KAAD;AAAA,SACfA,KAAK,CAALA,KAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAAA,+BAAAA,EAAAA,IAAAA,CADF,EACEA,CADe;AAAA,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAA,cAAA,CAAA,KAAA,EAAyD;AAAA,MAAjCC,KAAiC,KAAA,KAAA,CAAA,EAAA;AAAjCA,IAAAA,KAAiC,GAAJ,EAA7BA;AAAiC;;AAC9D,eAAA,KAAA;AAAA,qCACEC,kBADF;AAAA,MACEA,kBADF,sCAAM,IAAN;AAAA,qCAEEC,gBAFF;AAAA,MAEEA,gBAFF,sCAAM,IAAN;AAAA,qCAGEC,eAHF;AAAA,MAGEA,eAHF,sCAAM,IAAN;AAAA,0BAIEC,GAJF;AAAA,MAIEA,GAJF,2BAAM,cAAN;AAAA,0BAKEC,GALF;AAAA,MAKEA,GALF,2BAAM,cAAN;AAAA,2BAMEC,IANF;AAAA,MAMQC,QANR,4BAAM,CAAN;AAAA,MAAM,UAAN,UAAM,UAAN;AAAA,MAAM,UAAN,UAAM,UAAN;AAAA,MAAM,UAAN,UAAM,UAAN;AAAA,MAAM,gBAAN,UAAM,gBAAN;AAAA,MAAM,SAAN,UAAM,SAAN;AAAA,8BAYEC,OAZF;AAAA,MAYEA,OAZF,+BAAM,kBAAN;AAAA,gCAaEC,SAbF;AAAA,MAaEA,SAbF,iCAAM,SAAN;AAAA,MAAM,eAAN,UAAM,eAAN;AAAA,MAAM,EAAN,UAAM,EAAN;AAAA,MAAM,IAAN,UAAM,IAAN;AAAA,MAAM,UAAN,UAmBE,kBAnBF;AAAA,MAAM,SAAN,UAoBE,YApBF;AAAA,MAAM,cAAN,UAqBE,iBArBF;AAAA,MAAM,OAAN,UAAM,OAAN;AAAA,MAuBEC,MAvBF,UAuBEA,MAvBF;AAAA,MAAA,SAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,oBAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;;AA2BA,MAAMC,WAAW,GAAGC,cAAc,CAAlC,OAAkC,CAAlC;AACA,MAAMC,UAAU,GAAGD,cAAc,CAAjC,MAAiC,CAAjC;AACA,MAAME,oBAAoB,GAAGF,cAAc,CAA3C,gBAA2C,CAA3C;AAEA;AACF;AACA;AACA;AACA;;AACE,MAAMG,OAAO,GAAGC,UAAU,CAA1B,KAA0B,CAA1B;AAEA,MAAM,QAAN,GAAA,OAAA,CACEC,MADF;AAAA,MAAM,WAAN,GAAA,OAAA,CAEEC,SAFF;AAAA,MAGaE,WAHb,GAAA,OAAA,CAGED,SAHF;AAMA;AACF;AACA;AACA;AACA;;AACE,oBAAgCE,UAAhC,EAAA;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,UAAN;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CAAjB,IAAiBA,CAAjB;AAEA;AACF;AACA;;AACEC,EAAAA,mBAAmB,CAAC,YAAM;AACxB,QAAI,CAACF,QAAQ,CAAb,OAAA,EAAuB;AACvB,QAAMG,SAAS,GAAGH,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,IAA0BP,OAAO,CAAnD,KAAA;;AACA,QAAA,SAAA,EAAe;AACbA,MAAAA,OAAO,CAAPA,QAAAA,CAAiBjB,QAAQ,CAACwB,QAAQ,CAARA,OAAAA,CAA1BP,KAAyB,CAAzBA;AACD;AALgB,GAAA,EAAnBS,EAAmB,CAAnBA;AAQA,MAAME,aAAa,GAAG,EAAEC,UAAU,IAAlC,UAAsB,CAAtB;AAEA,MAAMT,SAAS,GAAG,KAAK,CAAL,WAAA,CAChB,UAAA,IAAA,EAAqB;AAAA,QAApBZ,IAAoB,KAAA,KAAA,CAAA,EAAA;AAApBA,MAAAA,IAAoB,GAAbC,QAAPD;AAAoB;;AACnB,QAAA,aAAA,EAAmB;AACjBsB,MAAAA,WAAW,CAAXA,IAAW,CAAXA;AACD;AAJa,GAAA,EAMhB,CAAA,WAAA,EAAA,aAAA,EANF,QAME,CANgB,CAAlB;AASA,MAAMT,SAAS,GAAG,KAAK,CAAL,WAAA,CAChB,UAAA,IAAA,EAAqB;AAAA,QAApBb,IAAoB,KAAA,KAAA,CAAA,EAAA;AAApBA,MAAAA,IAAoB,GAAbC,QAAPD;AAAoB;;AACnB,QAAA,aAAA,EAAmB;AACjBc,MAAAA,WAAW,CAAXA,IAAW,CAAXA;AACD;AAJa,GAAA,EAMhB,CAAA,WAAA,EAAA,aAAA,EANF,QAME,CANgB,CAAlB;AASA;AACF;AACA;AACA;AACA;AACA;;AACE,MAAMS,OAAO,GAAGC,UAAU,CAAA,SAAA,EAA1B,SAA0B,CAA1B;AAEA;AACF;AACA;AACA;;AACE,MAAMC,QAAQ,GAAG,KAAK,CAAL,WAAA,CACdC,UAAAA,KAAD,EAAgD;AAC9CC,IAAAA,QAAQ,CAACnC,QAAQ,CAACkC,KAAK,CAALA,MAAAA,CAAlBC,KAAiB,CAAT,CAARA;AAFa,GAAA,EAIf,CAJF,QAIE,CAJe,CAAjB;AAOA,MAAMC,SAAS,GAAG,KAAK,CAAL,WAAA,CACfF,UAAAA,KAAD,EAAgC;AAC9B;AACN;AACA;AACM,QAAI,CAACG,2BAA2B,CAAhC,KAAgC,CAAhC,EAAyC;AACvCH,MAAAA,KAAK,CAALA,cAAAA;AACD;AAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;AACM,QAAMI,UAAU,GAAGC,aAAa,CAAbA,KAAa,CAAbA,GAAnB,QAAA;AAEA,QAAMC,QAAQ,GAAGC,iBAAiB,CAAlC,KAAkC,CAAlC;AAEA,QAAMC,MAAmB,GAAG;AAC1BC,MAAAA,OAAO,EAAE;AAAA,eAAMvB,SAAS,CADE,UACF,CAAf;AAAA,OADiB;AAE1BwB,MAAAA,SAAS,EAAE;AAAA,eAAMvB,SAAS,CAFA,UAEA,CAAf;AAAA,OAFe;AAG1BwB,MAAAA,IAAI,EAAE;AAAA,eAAMV,QAAQ,CAHM,GAGN,CAAd;AAAA,OAHoB;AAI1BW,MAAAA,GAAG,EAAE;AAAA,eAAMX,QAAQ,CAAA,GAAA,CAAd;AAAA;AAJqB,KAA5B;AAOA,QAAMY,MAAM,GAAGL,MAAM,CAArB,QAAqB,CAArB;;AAEA,QAAA,MAAA,EAAY;AACVR,MAAAA,KAAK,CAALA,cAAAA;AACAa,MAAAA,MAAM,CAANA,KAAM,CAANA;AACD;AAjCa,GAAA,EAmChB,CAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,EAAA,GAAA,EAnCF,QAmCE,CAnCgB,CAAlB;;AAsCA,MAAMR,aAAa,GACjBL,SADIK,aACJL,CAAAA,KADoB,EAEjB;AACH,QAAIc,KAAK,GAAT,CAAA;;AACA,QAAId,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAA1B,OAAA,EAAoC;AAClCc,MAAAA,KAAK,GAALA,GAAAA;AACD;;AACD,QAAId,KAAK,CAAT,QAAA,EAAoB;AAClBc,MAAAA,KAAK,GAALA,EAAAA;AACD;;AACD,WAAA,KAAA;AAVF,GAAA;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAMC,aAAa,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;AACxC,QAAMC,IAAI,GAAGlC,oBAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,oBAAoB,CAAGC,OAAO,CAA3C,KAAiC,CAAjC;;AACA,QAAI,CAACkC,MAAM,CAAX,IAAW,CAAX,EAAmB;AACjB,aAAA,IAAA;AACD;;AAED,QAAMC,WAAW,GAAGnC,OAAO,CAAPA,KAAAA,CANoB,QAMpBA,EAApB,CANwC,CAOxC;;AACA,WAAO,CAAA,WAAA,GAAA,SAAA,GAAP,WAAA;AARoB,GAAA,EASnB,CAACA,OAAO,CAAR,KAAA,EATH,oBASG,CATmB,CAAtB;AAWA;AACF;AACA;;AACE,MAAMoC,gBAAgB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC/C,QAAIC,IAAI,GAAGrC,OAAO,CAAlB,KAAA;AAEA,QAAIqC,IAAI,KAAR,EAAA,EAAiB;;AAEjB,QAAIrC,OAAO,CAAPA,aAAAA,GAAJ,GAAA,EAAiC;AAC/BqC,MAAAA,IAAI,GAAJA,GAAAA;AACD;;AAED,QAAIrC,OAAO,CAAPA,aAAAA,GAAJ,GAAA,EAAiC;AAC/BqC,MAAAA,IAAI,GAAJA,GAAAA;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIrC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,IAAAA;AAnBuB,GAAA,EAoBtB,CAAA,OAAA,EAAA,GAAA,EApBH,GAoBG,CApBsB,CAAzB;AAsBA,MAAMsC,WAAW,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC1CC,IAAAA,UAAU,CAAVA,GAAAA;;AAEA,QAAA,gBAAA,EAAsB;AACpBH,MAAAA,gBAAgB;AACjB;AALiB,GAAA,EAMjB,CAAA,gBAAA,EAAA,UAAA,EANH,gBAMG,CANiB,CAApB;AAQA,MAAMI,UAAU,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACzC,QAAA,kBAAA,EAAwB;AACtBC,MAAAA,KAAK,CAAClC,QAAQ,CAAT,OAAA,EAAmB;AAAEmC,QAAAA,QAAQ,EAAE;AAAZ,OAAnB,CAALD;AACD;AAHgB,GAAA,EAIhB,CAJH,kBAIG,CAJgB,CAAnB;AAMA,MAAME,MAAM,GAAG,KAAK,CAAL,WAAA,CACZ1B,UAAAA,KAAD,EAAgB;AACdA,IAAAA,KAAK,CAALA,cAAAA;AACAH,IAAAA,OAAO,CAAPA,EAAAA;AACA0B,IAAAA,UAAU;AAJC,GAAA,EAMb,CAAA,UAAA,EANF,OAME,CANa,CAAf;AASA,MAAMI,QAAQ,GAAG,KAAK,CAAL,WAAA,CACd3B,UAAAA,KAAD,EAAgB;AACdA,IAAAA,KAAK,CAALA,cAAAA;AACAH,IAAAA,OAAO,CAAPA,IAAAA;AACA0B,IAAAA,UAAU;AAJG,GAAA,EAMf,CAAA,UAAA,EANF,OAME,CANe,CAAjB;AASA,MAAMK,WAAW,GACfC,SAAS,IAAI,CAAC,CAACC,QAAQ,CAARA,eAAAA,CAAfD,YAAAA,GAAAA,cAAAA,GADF,aAAA;AAKAE,EAAAA,gBAAgB,CAAA,OAAA,EAEb/B,UAAAA,KAAD,EAAW;AACT,QAAMgC,cAAc,GAAGF,QAAQ,CAARA,aAAAA,KAA2BxC,QAAQ,CAA1D,OAAA;AACA,QAAI,CAAA,eAAA,IAAoB,CAAxB,cAAA,EAAyC;AAEzCU,IAAAA,KAAK,CAALA,cAAAA;AAEA,QAAMI,UAAU,GAAGC,aAAa,CAAbA,KAAa,CAAbA,GAAnB,QAAA;AACA,QAAM4B,SAAS,GAAGC,IAAI,CAAJA,IAAAA,CAAUlC,KAAK,CAAjC,MAAkBkC,CAAlB;;AAEA,QAAID,SAAS,KAAK,CAAlB,CAAA,EAAsB;AACpB/C,MAAAA,SAAS,CAATA,UAAS,CAATA;AADF,KAAA,MAEO,IAAI+C,SAAS,KAAb,CAAA,EAAqB;AAC1B9C,MAAAA,SAAS,CAATA,UAAS,CAATA;AACD;AAfW,GAAA,EAiBdG,QAAQ,CAjBM,OAAA,EAkBd;AAAE6C,IAAAA,OAAO,EAAE;AAAX,GAlBc,CAAhBJ;AAqBA,MAAMK,uBAAmC,GAAG,KAAK,CAAL,WAAA,CAC1C,UAAA,KAAA,EAAA,GAAA,EAA4B;AAAA;;AAAA,QAA3BpE,KAA2B,KAAA,KAAA,CAAA,EAAA;AAA3BA,MAAAA,KAA2B,GAAnB,EAARA;AAA2B;;AAAA,QAAfqE,GAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,MAAAA,GAAe,GAAT,IAANA;AAAe;;AAC1B,QAAMC,QAAQ,GAAGC,UAAU,IAAKpE,eAAe,IAAIY,OAAO,CAA1D,OAAA;AACA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA;AAEEsD,MAAAA,GAFF,EAEEA,GAFF;AAGEG,MAAAA,IAAI,EAHN,QAAA;AAIEC,MAAAA,QAAQ,EAAE,CAJZ;AAAA,kCAKE,WALF,EAKiBC,eAAe,CAAC1E,KAAK,CAAN,WAAM,CAAN,EALhC,MAKgC,CALhC,2CAMa0E,eAAe,CAAC1E,KAAK,CAAN,SAAA,EAAkB6B,OAAO,CANrD,IAM4B,CAN5B,8CAOgB6C,eAAe,CAAC1E,KAAK,CAAN,SAAA,EAAkB6B,OAAO,CAPxD,IAO+B,CAP/B,4CAQc6C,eAAe,CAAC1E,KAAK,CAAN,UAAA,EAAmB6B,OAAO,CARvD,IAQ6B,CAR7B,0CAAA,QAAA,8BAUE,eAVF,EAUmB8C,QAAQ,CAAA,QAAA,CAV3B,cAAA;AAHwC,GAAA,EAgB1C,CAAA,WAAA,EAEE5D,OAAO,CAFT,OAAA,EAAA,eAAA,EAAA,MAAA,EAKEc,OAAO,CALT,IAAA,EAhBF,UAgBE,CAhB0C,CAA5C;AA0BA,MAAM+C,uBAAmC,GAAG,KAAK,CAAL,WAAA,CAC1C,UAAA,KAAA,EAAA,GAAA,EAA4B;AAAA;;AAAA,QAA3B5E,KAA2B,KAAA,KAAA,CAAA,EAAA;AAA3BA,MAAAA,KAA2B,GAAnB,EAARA;AAA2B;;AAAA,QAAfqE,GAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,MAAAA,GAAe,GAAT,IAANA;AAAe;;AAC1B,QAAMC,QAAQ,GAAGC,UAAU,IAAKpE,eAAe,IAAIY,OAAO,CAA1D,OAAA;AACA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA;AAEEsD,MAAAA,GAFF,EAEEA,GAFF;AAGEG,MAAAA,IAAI,EAHN,QAAA;AAIEC,MAAAA,QAAQ,EAAE,CAJZ;AAAA,kCAKE,WALF,EAKiBC,eAAe,CAAC1E,KAAK,CAAN,WAAM,CAAN,EALhC,QAKgC,CALhC,8CAMgB0E,eAAe,CAAC1E,KAAK,CAAN,YAAA,EAAqB6B,OAAO,CAN3D,IAM+B,CAN/B,2CAOa6C,eAAe,CAAC1E,KAAK,CAAN,SAAA,EAAkB6B,OAAO,CAPrD,IAO4B,CAP5B,4CAQc6C,eAAe,CAAC1E,KAAK,CAAN,UAAA,EAAmB6B,OAAO,CARvD,IAQ6B,CAR7B,0CAAA,QAAA,8BAUE,eAVF,EAUmB8C,QAAQ,CAAA,QAAA,CAV3B,cAAA;AAHwC,GAAA,EAgB1C,CAAA,WAAA,EAEE5D,OAAO,CAFT,OAAA,EAAA,eAAA,EAAA,QAAA,EAKEc,OAAO,CALT,IAAA,EAhBF,UAgBE,CAhB0C,CAA5C;AA0BA,MAAMgD,aAML,GAAG,KAAK,CAAL,WAAA,CACF,UAAA,KAAA,EAAA,GAAA,EAAA;AAAA,QAAA,eAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,gBAAA;;AAAA,QAAC7E,KAAD,KAAA,KAAA,CAAA,EAAA;AAACA,MAAAA,KAAD,GAAA,EAACA;AAAD;;AAAA,QAAaqE,GAAb,KAAA,KAAA,CAAA,EAAA;AAAaA,MAAAA,GAAb,GAAA,IAAaA;AAAb;;AAAA,WAAA,QAAA,CAAA;AACES,MAAAA,IADF,EACEA,IADF;AAEErE,MAAAA,SAFF,EAEEA,SAFF;AAGEsE,MAAAA,IAAI,EAHN,MAAA;AAIEvE,MAAAA,OAJF,EAIEA,OAJF;AAKE,yBALF,cAAA;AAME,oBANF,SAAA;AAOE,0BAPF,UAAA;AAQEwE,MAAAA,EARF,EAQEA,EARF;AASEV,MAAAA,QAAQ,EAAEC;AATZ,KAAA,EAAA,KAAA,EAAA;AAWEU,MAAAA,QAAQ,EAAA,CAAA,eAAA,GAAEjF,KAAK,CAAP,QAAA,KAAA,IAAA,GAAA,eAAA,GAXV,UAAA;AAYE,uBAAA,CAAA,gBAAA,GAAiBA,KAAK,CAAtB,QAAA,KAAA,IAAA,GAAA,gBAAA,GAZF,UAAA;AAaE,uBAAA,CAAA,eAAA,GAAiBA,KAAK,CAAtB,QAAA,KAAA,IAAA,GAAA,eAAA,GAbF,UAAA;AAcEkF,MAAAA,QAAQ,EAAA,CAAA,gBAAA,GAAElF,KAAK,CAAP,QAAA,KAAA,IAAA,GAAA,gBAAA,GAdV,UAAA;AAeEqE,MAAAA,GAAG,EAAEc,SAAS,CAAA,QAAA,EAfhB,GAegB,CAfhB;AAgBEpF,MAAAA,KAAK,EAAEgB,OAAO,CAhBhB,KAAA;AAiBEyD,MAAAA,IAAI,EAjBN,YAAA;AAkBE,uBAlBF,GAAA;AAmBE,uBAnBF,GAAA;AAoBE,uBAAiBY,MAAM,CAANA,KAAAA,CAAarE,OAAO,CAApBqE,aAAAA,IAAAA,SAAAA,GAEbrE,OAAO,CAtBb,aAAA;AAuBE,sBAAgB4D,QAAQ,CAACU,SAAD,IAAA,IAACA,GAAD,SAACA,GAAatE,OAAO,CAvB/C,YAuB0B,CAvB1B;AAwBE,wBAxBF,aAAA;AAyBEuE,MAAAA,YAAY,EAzBd,KAAA;AA0BEC,MAAAA,WAAW,EA1Bb,KAAA;AA2BExD,MAAAA,QAAQ,EAAE2C,eAAe,CAAC1E,KAAK,CAAN,QAAA,EA3B3B,QA2B2B,CA3B3B;AA4BEkC,MAAAA,SAAS,EAAEwC,eAAe,CAAC1E,KAAK,CAAN,SAAA,EA5B5B,SA4B4B,CA5B5B;AA6BEwF,MAAAA,OAAO,EAAEd,eAAe,CAAC1E,KAAK,CAAN,OAAA,EAAA,WAAA,EAA6BsD,UAAU,CA7BjE,EA6B0B,CA7B1B;AA8BE5C,MAAAA,MAAM,EAAEgE,eAAe,CAAC1E,KAAK,CAAN,MAAA,EAAA,UAAA,EAAA,WAAA;AA9BzB,KAAA,CAAA;AADE,GAAA,EAiCF,CAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,cAAA,EAAA,SAAA,EAAA,UAAA,EAAA,EAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAYEe,OAAO,CAZT,KAAA,EAaEA,OAAO,CAbT,aAAA,EAcEA,OAAO,CAdT,YAAA,EAAA,GAAA,EAAA,GAAA,EAAA,aAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAqBEuC,UAAU,CArBZ,EAAA,EAAA,UAAA,EAvCF,WAuCE,CAjCE,CANJ;AAkEA,SAAO;AACLvD,IAAAA,KAAK,EAAEgB,OAAO,CADT,KAAA;AAEL0E,IAAAA,aAAa,EAAE1E,OAAO,CAFjB,aAAA;AAGL2E,IAAAA,SAHK,EAGLA,SAHK;AAILnB,IAAAA,UAJK,EAILA,UAJK;AAKL5C,IAAAA,UALK,EAKLA,UALK;AAMLyC,IAAAA,uBANK,EAMLA,uBANK;AAOLQ,IAAAA,uBAPK,EAOLA,uBAPK;AAQLC,IAAAA,aARK,EAQLA,aARK;AASLc,IAAAA,SAAAA,EAAAA;AATK,GAAP;AAWD","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}