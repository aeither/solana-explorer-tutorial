{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { usePopper, popperCSSVars } from \"@chakra-ui/popper\";\nimport { callAllHandlers, px } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$openDelay = _props.openDelay,\n      openDelay = _props$openDelay === void 0 ? 0 : _props$openDelay,\n      _props$closeDelay = _props.closeDelay,\n      closeDelay = _props$closeDelay === void 0 ? 0 : _props$closeDelay,\n      _props$closeOnClick = _props.closeOnClick,\n      closeOnClick = _props$closeOnClick === void 0 ? true : _props$closeOnClick,\n      closeOnMouseDown = _props.closeOnMouseDown,\n      onOpenProp = _props.onOpen,\n      onCloseProp = _props.onClose,\n      placement = _props.placement,\n      id = _props.id,\n      isOpenProp = _props.isOpen,\n      defaultIsOpen = _props.defaultIsOpen,\n      _props$arrowSize = _props.arrowSize,\n      arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize,\n      arrowShadowColor = _props.arrowShadowColor,\n      arrowPadding = _props.arrowPadding,\n      modifiers = _props.modifiers,\n      isDisabled = _props.isDisabled,\n      gutter = _props.gutter,\n      offset = _props.offset,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\"]);\n\n  var _useDisclosure = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen: defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  }),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var _usePopper = usePopper({\n    enabled: isOpen,\n    placement: placement,\n    arrowPadding: arrowPadding,\n    modifiers: modifiers,\n    gutter: gutter,\n    offset: offset\n  }),\n      referenceRef = _usePopper.referenceRef,\n      getPopperProps = _usePopper.getPopperProps,\n      getArrowInnerProps = _usePopper.getArrowInnerProps,\n      getArrowProps = _usePopper.getArrowProps;\n\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = React.useRef(null);\n  var enterTimeout = React.useRef();\n  var exitTimeout = React.useRef();\n  var openWithDelay = React.useCallback(function () {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = React.useCallback(function () {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = React.useCallback(function () {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = React.useCallback(function () {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n\n  var onKeyDown = function onKeyDown(event) {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n\n  useEventListener(\"keydown\", onKeyDown);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    };\n  }, []);\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n\n  useEventListener(\"mouseleave\", closeWithDelay, function () {\n    return ref.current;\n  });\n  var getTriggerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, referenceRef]);\n  var getTooltipPositionerProps = React.useCallback(function (props, forwardedRef) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return getPopperProps(_extends({}, props, {\n      style: _extends({}, props.style, (_extends2 = {}, _defineProperty(_extends2, popperCSSVars.arrowSize.var, arrowSize ? px(arrowSize) : undefined), _defineProperty(_extends2, popperCSSVars.arrowShadowColor.var, arrowShadowColor), _extends2))\n    }), forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  var getTooltipProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var tooltipProps = _extends({\n      ref: _ref\n    }, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\",\n      style: _extends({}, props.style, {\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      })\n    });\n\n    return tooltipProps;\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen: isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps: getTriggerProps,\n    getTooltipProps: getTooltipProps,\n    getTooltipPositionerProps: getTooltipPositionerProps,\n    getArrowProps: getArrowProps,\n    getArrowInnerProps: getArrowInnerProps\n  };\n}","map":{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["props","openDelay","closeDelay","closeOnClick","onOpen","onClose","isOpen","arrowSize","offset","useDisclosure","defaultIsOpen","onCloseProp","getArrowProps","usePopper","enabled","placement","arrowPadding","modifiers","gutter","tooltipId","useId","ref","React","enterTimeout","exitTimeout","openWithDelay","window","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","useEventListener","getTriggerProps","_ref","triggerProps","mergeRefs","onMouseEnter","callAllHandlers","onFocus","onBlur","undefined","getTooltipPositionerProps","forwardedRef","getPopperProps","style","popperCSSVars","px","arrowShadowColor","getTooltipProps","tooltipProps","id","role","position","transformOrigin","varRef","show","hide","getArrowInnerProps"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport {\n  Placement,\n  usePopper,\n  UsePopperProps,\n  popperCSSVars,\n} from \"@chakra-ui/popper\"\nimport { callAllHandlers, px } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    \"modifiers\" | \"gutter\" | \"offset\" | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps,\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, () => ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: {\n          ...props.style,\n          position: \"relative\",\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}