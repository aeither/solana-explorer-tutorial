{"version":3,"sources":["../../src/drawer.tsx"],"names":["chakra","forwardRef","useStyles","useTheme","Slide","cx","__DEV__","createContext","React","Modal","ModalFocusScope","useModalContext","DrawerContextProvider","useDrawerContext","Drawer","props","isOpen","onClose","placement","children","rest","theme","drawerStyleConfig","components","StyleSlide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","displayName","ModalBody","DrawerBody","ModalCloseButton","DrawerCloseButton","ModalFooter","DrawerFooter","ModalHeader","DrawerHeader","ModalOverlay","DrawerOverlay"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps extends Omit<ModalProps, \"scrollBehavior\"> {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyleSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyleSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyleSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"],"file":"drawer.js"}