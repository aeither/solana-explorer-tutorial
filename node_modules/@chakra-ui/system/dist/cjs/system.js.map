{"version":3,"sources":["../../src/system.ts"],"names":["toCSSObject","baseStyle","props","theme","cssProp","css","__css","sx","rest","styleProps","_","prop","finalBaseStyle","finalStyles","Object","assign","computedCSS","styled","component","options","styledOptions","shouldForwardProp","styleObject","chakra","domElements","forEach","tag"],"mappings":";;;;;;AAAA;;AAMA;;AACA;;AACA;;AAEA;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,WAA2B,GAAG,SAA9BA,WAA8B;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,SAAmB,UAACC,KAAD,EAAW;AAAA,QAC/DC,KAD+D,GACnBD,KADmB,CAC/DC,KAD+D;AAAA,QACnDC,OADmD,GACnBF,KADmB,CACxDG,GADwD;AAAA,QAC1CC,KAD0C,GACnBJ,KADmB,CAC1CI,KAD0C;AAAA,QACnCC,EADmC,GACnBL,KADmB,CACnCK,EADmC;AAAA,QAC5BC,IAD4B,iCACnBN,KADmB;;AAEvE,QAAMO,UAAU,GAAG,yBAAaD,IAAb,EAAmB,UAACE,CAAD,EAAIC,IAAJ;AAAA,aAAa,+BAAYA,IAAZ,CAAb;AAAA,KAAnB,CAAnB;AACA,QAAMC,cAAc,GAAG,oBAAQX,SAAR,EAAmBC,KAAnB,CAAvB;AACA,QAAMW,WAAW,GAAGC,MAAM,CAACC,MAAP,CAClB,EADkB,EAElBT,KAFkB,EAGlBM,cAHkB,EAIlB,4BAAgBH,UAAhB,CAJkB,EAKlBF,EALkB,CAApB;AAOA,QAAMS,WAAW,GAAG,uBAAIH,WAAJ,EAAiBX,KAAK,CAACC,KAAvB,CAApB;AACA,WAAOC,OAAO,GAAG,CAACY,WAAD,EAAcZ,OAAd,CAAH,GAA4BY,WAA1C;AACD,GAb0C;AAAA,CAApC;;;;AAuBA,SAASC,MAAT,CACLC,SADK,EAELC,OAFK,EAGL;AAAA,cACwCA,OADxC,WACwCA,OADxC,GACmD,EADnD;AAAA,MACQlB,SADR,SACQA,SADR;AAAA,MACsBmB,aADtB;;AAGA,MAAI,CAACA,aAAa,CAACC,iBAAnB,EAAsC;AACpCD,IAAAA,aAAa,CAACC,iBAAd,GAAkCA,oCAAlC;AACD;;AAED,MAAMC,WAAW,GAAGtB,WAAW,CAAC;AAAEC,IAAAA,SAAS,EAATA;AAAF,GAAD,CAA/B;AACA,SAAO,yBACLiB,SADK,EAELE,aAFK,EAGLE,WAHK,CAAP;AAID;;AAqBM,IAAMC,MAAM,GAAIN,MAAhB;;;AAGPO,oBAAYC,OAAZ,CAAoB,UAACC,GAAD,EAAS;AAC3BH,EAAAA,MAAM,CAACG,GAAD,CAAN,GAAcH,MAAM,CAACG,GAAD,CAApB;AACD,CAFD","sourcesContent":["import {\n  css,\n  isStyleProp,\n  StyleProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\"\nimport _styled, { CSSObject, FunctionInterpolation } from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\ntype StyleResolverProps = SystemStyleObject & {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: any\n  css?: CSSObject\n}\n\ninterface GetStyleObject {\n  (options: {\n    baseStyle?:\n      | SystemStyleObject\n      | ((props: StyleResolverProps) => SystemStyleObject)\n  }): FunctionInterpolation<StyleResolverProps>\n}\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const toCSSObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const { theme, css: cssProp, __css, sx, ...rest } = props\n  const styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop))\n  const finalBaseStyle = runIfFn(baseStyle, props)\n  const finalStyles = Object.assign(\n    {},\n    __css,\n    finalBaseStyle,\n    filterUndefined(styleProps),\n    sx,\n  )\n  const computedCSS = css(finalStyles)(props.theme)\n  return cssProp ? [computedCSS, cssProp] : computedCSS\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?:\n    | SystemStyleObject\n    | ((props: StyleResolverProps) => SystemStyleObject)\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = toCSSObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof StyleProps\n    : \"ref\" | keyof StyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"],"file":"system.js"}