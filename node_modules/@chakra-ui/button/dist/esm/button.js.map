{"version":3,"sources":["../../src/button.tsx"],"names":["mergeRefs","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","ButtonSpinner","ButtonIcon","useButtonType","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","buttonStyles","useMemo","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","width","_ref","defaultType","contentProps","displayName","ButtonContent"],"mappings":"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","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = React.useMemo(() => {\n    const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group, isFullWidth])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"],"file":"button.js"}