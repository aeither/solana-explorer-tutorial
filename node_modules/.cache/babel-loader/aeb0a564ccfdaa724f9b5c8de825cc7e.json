{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nexport var useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\n\nexport function ColorModeProvider(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options,\n      useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      colorMode = _React$useState2[0],\n      rawSetColorMode = _React$useState2[1];\n\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(function (value) {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var removeListener;\n\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return function () {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nexport var DarkMode = function DarkMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nexport var LightMode = function LightMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}","map":{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["ColorModeContext","React","useColorMode","context","options","initialColorMode","colorModeManager","localStorageManager","isBrowser","mode","useSystemColorMode","getColorScheme","root","rawSetColorMode","isDark","colorMode","syncBodyClassName","setColorMode","value","toggleColorMode","removeListener","addListener","ColorModeProvider","DarkMode","props","noop","LightMode"],"mappings":"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","sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n  root,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"]},"metadata":{},"sourceType":"module"}