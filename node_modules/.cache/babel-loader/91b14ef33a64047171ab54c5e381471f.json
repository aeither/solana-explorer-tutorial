{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useCallbackRef, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultIsChecked = _props.defaultIsChecked,\n      _props$defaultChecked = _props.defaultChecked,\n      defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n      checkedProp = _props.isChecked,\n      isFocusable = _props.isFocusable,\n      isDisabled = _props.isDisabled,\n      isReadOnly = _props.isReadOnly,\n      isRequired = _props.isRequired,\n      onChange = _props.onChange,\n      isIndeterminate = _props.isIndeterminate,\n      isInvalid = _props.isInvalid,\n      name = _props.name,\n      value = _props.value,\n      id = _props.id,\n      onBlur = _props.onBlur,\n      onFocus = _props.onFocus,\n      ariaLabel = _props[\"aria-label\"],\n      ariaLabelledBy = _props[\"aria-labelledby\"],\n      ariaInvalid = _props[\"aria-invalid\"],\n      ariaDescribedBy = _props[\"aria-describedby\"],\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\", \"onBlur\", \"onFocus\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\", \"aria-describedby\"]);\n\n  var onChangeProp = useCallbackRef(onChange);\n  var onBlurProp = useCallbackRef(onBlur);\n  var onFocusProp = useCallbackRef(onFocus);\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isHovered = _useBoolean4[0],\n      setHovered = _useBoolean4[1];\n\n  var _useBoolean5 = useBoolean(),\n      _useBoolean6 = _slicedToArray(_useBoolean5, 2),\n      isActive = _useBoolean6[0],\n      setActive = _useBoolean6[1];\n\n  var inputRef = useRef(null);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      rootIsLabelElement = _useState2[0],\n      setRootIsLabelElement = _useState2[1];\n\n  var _useState3 = useState(!!defaultChecked),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkedState = _useState4[0],\n      setCheckedState = _useState4[1];\n\n  var _useControllableProp = useControllableProp(checkedProp, checkedState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      isChecked = _useControllableProp2[1];\n\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = function onPressDown(event) {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);\n  var getRootProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, htmlProps, props, {\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props.onClick, function () {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          var _inputRef$current;\n\n          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();\n          focus(inputRef.current, {\n            nextTick: true\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled)\n    });\n  }, [htmlProps, isDisabled, rootIsLabelElement]);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled]);\n  var getLabelProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isIndeterminate: isIndeterminate,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["props","defaultChecked","isChecked","ariaDescribedBy","onChangeProp","useCallbackRef","onBlurProp","onFocusProp","useBoolean","inputRef","useRef","useState","useControllableProp","warn","condition","message","handleChange","useCallback","event","isReadOnly","setCheckedState","isIndeterminate","useSafeLayoutEffect","Boolean","trulyDisabled","isDisabled","onKeyDown","setActive","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovered","onMouseLeave","getRootProps","mergeRefs","node","setRootIsLabelElement","onClick","focus","nextTick","getInputProps","type","name","value","id","onChange","onBlur","setFocused","onFocus","required","checked","disabled","readOnly","ariaInvalid","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isInvalid","isFocused","isActive","isHovered","isRequired","htmlProps"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n    }),\n    [htmlProps, isDisabled, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}