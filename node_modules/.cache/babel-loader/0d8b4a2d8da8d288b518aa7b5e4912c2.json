{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * React component to render inline code snippets.\n *\n * @see Docs https://chakra-ui.com/code\n */\n\nexport var Code = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Code\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.code, _extends({\n    ref: ref,\n    className: cx(\"chakra-code\", props.className)\n  }, rest, {\n    __css: _extends({\n      display: \"inline-block\"\n    }, styles)\n  }));\n});\n\nif (__DEV__) {\n  Code.displayName = \"Code\";\n}","map":{"version":3,"sources":["../../src/code.tsx"],"names":["Code","forwardRef","styles","useStyleConfig","rest","omitThemingProps","cx","props","display"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AAQA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,IAAI,GAAA,aAAGC,UAAU,CAAoB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAChE,MAAMC,MAAM,GAAGC,cAAc,CAAA,MAAA,EAA7B,KAA6B,CAA7B;;AACA,MAAA,iBAAA,GAA+BE,gBAAgB,CAA/C,KAA+C,CAA/C;AAAA,MAAsBD,IAAtB,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,SAAS,EAAEE,EAAE,CAAA,aAAA,EAAgBC,KAAK,CAArB,SAAA;AAFf,GAAA,EAAA,IAAA,EAAA;AAIE,IAAA,KAAK,EAAA,QAAA,CAAA;AACHC,MAAAA,OAAO,EAAE;AADN,KAAA,EAAA,MAAA;AAJP,GAAA,CAAA,CADF;AAJK,CAAuB,CAAvB;;AAiBP,IAAA,OAAA,EAAa;AACXR,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface CodeProps\n  extends HTMLChakraProps<\"code\">,\n    ThemingProps<\"Code\"> {}\n\n/**\n * React component to render inline code snippets.\n *\n * @see Docs https://chakra-ui.com/code\n */\nexport const Code = forwardRef<CodeProps, \"code\">((props, ref) => {\n  const styles = useStyleConfig(\"Code\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.code\n      ref={ref}\n      className={cx(\"chakra-code\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  Code.displayName = \"Code\"\n}\n"]},"metadata":{},"sourceType":"module"}