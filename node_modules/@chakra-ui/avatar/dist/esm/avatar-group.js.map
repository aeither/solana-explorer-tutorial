{"version":3,"sources":["../../src/avatar-group.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","filterUndefined","__DEV__","getValidChildren","React","baseStyle","AvatarGroup","props","ref","styles","children","borderColor","max","spacing","borderRadius","rest","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","childProps","marginEnd","size","showBorder","cloneElement","groupStyles","display","alignItems","justifyContent","flexDirection","excessStyles","marginStart","excessLabel","className","displayName"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAOEC,mBAPF,QASO,mBATP;AAUA,SAASC,EAAT,EAAaC,eAAb,EAA8BC,OAA9B,QAA6C,kBAA7C;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAyBA;AACA;AACA;AACA,OAAO,IAAMC,WAAW,gBAAGT,UAAU,CAA0B,CAACU,KAAD,EAAQC,GAAR,KAAgB;AAC7E,MAAMC,MAAM,GAAGV,mBAAmB,CAAC,QAAD,EAAWQ,KAAX,CAAlC;;AAEA,0BAOIT,gBAAgB,CAACS,KAAD,CAPpB;AAAA,MAAM;AACJG,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,OAAO,GAAG,UAJN;AAKJC,IAAAA,YAAY,GAAG;AALX,GAAN;AAAA,MAMKC,IANL;;AASA,MAAMC,aAAa,GAAGb,gBAAgB,CAACO,QAAD,CAAtC;AAEA;AACF;AACA;;AACE,MAAMO,iBAAiB,GAAGL,GAAG,GAAGI,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuBN,GAAvB,CAAH,GAAiCI,aAA9D;AAEA;AACF;AACA;;AACE,MAAMG,MAAM,GAAGP,GAAG,IAAI,IAAP,IAAeI,aAAa,CAACI,MAAd,GAAuBR,GAArD;AAEA;AACF;AACA;AACA;;AACE,MAAMS,gBAAgB,GAAGJ,iBAAiB,CAACK,OAAlB,EAAzB;AAEA,MAAMC,MAAM,GAAGF,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAAA;;AACpD,QAAMC,aAAa,GAAGD,KAAK,KAAK,CAAhC;AAEA,QAAME,UAAU,GAAG;AACjBC,MAAAA,SAAS,EAAEF,aAAa,GAAG,CAAH,GAAOd,OADd;AAEjBiB,MAAAA,IAAI,EAAEvB,KAAK,CAACuB,IAFK;AAGjBnB,MAAAA,WAAW,2BAAEc,KAAK,CAAClB,KAAN,CAAYI,WAAd,oCAA6BA,WAHvB;AAIjBoB,MAAAA,UAAU,EAAE;AAJK,KAAnB;AAOA,wBAAO3B,KAAK,CAAC4B,YAAN,CAAmBP,KAAnB,EAA0BxB,eAAe,CAAC2B,UAAD,CAAzC,CAAP;AACD,GAXc,CAAf;AAaA,MAAMK,WAA8B,GAAG;AACrCC,IAAAA,OAAO,EAAE,MAD4B;AAErCC,IAAAA,UAAU,EAAE,QAFyB;AAGrCC,IAAAA,cAAc,EAAE,UAHqB;AAIrCC,IAAAA,aAAa,EAAE;AAJsB,GAAvC;;AAOA,MAAMC,YAA+B;AACnCxB,IAAAA,YADmC;AAEnCyB,IAAAA,WAAW,EAAE1B;AAFsB,KAGhCR,SAHgC,EAIhCI,MAAM,CAAC+B,WAJyB,CAArC;;AAOA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,GAAG,EAAEhC,GADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEyB;AAHT,KAIMlB,IAJN;AAKE,IAAA,SAAS,EAAEf,EAAE,CAAC,sBAAD,EAAyBO,KAAK,CAACkC,SAA/B;AALf,MAOGtB,MAAM,GAAG,CAAT,iBACC,oBAAC,MAAD,CAAQ,IAAR;AAAa,IAAA,SAAS,EAAC,uBAAvB;AAA+C,IAAA,KAAK,EAAEmB;AAAtD,WACOnB,MADP,CARJ,EAYGI,MAZH,CADF;AAgBD,CAzEoC,CAA9B;;AA2EP,IAAIrB,OAAJ,EAAa;AACXI,EAAAA,WAAW,CAACoC,WAAZ,GAA0B,aAA1B;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, filterUndefined, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { baseStyle } from \"./avatar\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  /**\n   * get the avatars within the max\n   */\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren\n\n  /**\n   * get the remaining avatar count\n   */\n  const excess = max != null && validChildren.length - max\n\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n  const reversedChildren = childrenWithinMax.reverse()\n\n  const clones = reversedChildren.map((child, index) => {\n    const isFirstAvatar = index === 0\n\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: child.props.borderColor ?? borderColor,\n      showBorder: true,\n    }\n\n    return React.cloneElement(child, filterUndefined(childProps))\n  })\n\n  const groupStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n  }\n\n  const excessStyles: SystemStyleObject = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      role=\"group\"\n      __css={groupStyles}\n      {...rest}\n      className={cx(\"chakra-avatar__group\", props.className)}\n    >\n      {excess > 0 && (\n        <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n          {`+${excess}`}\n        </chakra.span>\n      )}\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\"\n}\n"],"file":"avatar-group.js"}