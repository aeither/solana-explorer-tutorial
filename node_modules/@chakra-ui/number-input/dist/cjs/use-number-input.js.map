{"version":3,"sources":["../../src/use-number-input.ts"],"names":["sanitize","value","split","filter","isFloatingPointNumericCharacter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","minSafeInteger","max","maxSafeInteger","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","_","onChange","precision","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","onFocusProp","onBlurProp","getAriaValueTextProp","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","isFocused","setFocused","inputRef","React","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","isBrowser","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","getInputProps","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}