{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","PanSession","noop","end"],"mappings":";;;;;AAAA;;AAOA;;AACA;;AACA;;AAUO,SAASA,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;AAAA,MAEEC,KAFF,GAOID,KAPJ,CAEEC,KAFF;AAAA,MAGEC,UAHF,GAOIF,KAPJ,CAGEE,UAHF;AAAA,MAIEC,QAJF,GAOIH,KAPJ,CAIEG,QAJF;AAAA,MAKEC,iBALF,GAOIJ,KAPJ,CAKEI,iBALF;AAAA,MAMEC,eANF,GAOIL,KAPJ,CAMEK,eANF;AASA,MAAMC,YAAY,GAAGC,OAAO,CAC1BN,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAnC,IAAwDC,eAD9B,CAA5B;AAIA,MAAMG,UAAU,GAAG,mBAA0B,IAA1B,CAAnB;AAEA,MAAMC,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAAEN,iBAD4B;AAE5CO,IAAAA,YAAY,EAAEN,eAF8B;AAG5CO,IAAAA,OAAO,EAAEV,UAHmC;AAI5CW,IAAAA,MAAM,EAAEZ,KAJoC;AAK5Ca,IAAAA,KAL4C,iBAKtCC,KALsC,EAK/BC,IAL+B,EAKzB;AACjBR,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACAd,MAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGY,KAAH,EAAUC,IAAV,CAAR;AACD;AAR2C,GAA9C;AAWA,wBAAU,YAAM;AAAA;;AACd,2BAAAR,UAAU,CAACS,OAAX,yCAAoBC,cAApB,CAAmCT,QAAnC;AACD,GAFD;;AAIA,WAASU,aAAT,CAAuBJ,KAAvB,EAA+C;AAC7CP,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAAIG,iBAAJ,CAAeL,KAAf,EAAsBN,QAAtB,CAArB;AACD;;AAED,wCACE;AAAA,WAAMV,GAAG,CAACkB,OAAV;AAAA,GADF,EAEE,aAFF,EAGEX,YAAY,GAAGa,aAAH,GAAmBE,WAHjC;AAMA,0CAAiB,YAAM;AAAA;;AACrB,4BAAAb,UAAU,CAACS,OAAX,0CAAoBK,GAApB;AACAd,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACD,GAHD;AAID","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"],"file":"use-pan-gesture.js"}