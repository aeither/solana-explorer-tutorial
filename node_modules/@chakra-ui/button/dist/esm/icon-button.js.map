{"version":3,"sources":["../../src/icon-button.tsx"],"names":["forwardRef","__DEV__","React","Button","IconButton","props","ref","icon","children","isRound","ariaLabel","rest","element","_children","isValidElement","cloneElement","focusable","undefined","displayName"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAoC,UAApC;AA4BA,OAAO,IAAMC,UAAU,gBAAGJ,UAAU,CAClC,CAACK,KAAD,EAAQC,GAAR,KAAgB;AACd,MAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,OAAlB;AAA2B,kBAAcC;AAAzC,MAAgEL,KAAtE;AAAA,MAA6DM,IAA7D,iCAAsEN,KAAtE;AAEA;AACJ;AACA;;;AACI,MAAMO,OAAO,GAAGL,IAAI,IAAIC,QAAxB;;AACA,MAAMK,SAAS,GAAG,aAAAX,KAAK,CAACY,cAAN,CAAqBF,OAArB,iBACdV,KAAK,CAACa,YAAN,CAAmBH,OAAnB,EAAmC;AACjC,mBAAe,IADkB;AAEjCI,IAAAA,SAAS,EAAE;AAFsB,GAAnC,CADc,GAKd,IALJ;;AAOA,sBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,GADV;AAEE,IAAA,YAAY,EAAEP,OAAO,GAAG,MAAH,GAAYQ,SAFnC;AAGE,IAAA,GAAG,EAAEX,GAHP;AAIE,kBAAYI;AAJd,KAKMC,IALN,GAOGE,SAPH,CADF;AAWD,CA1BiC,CAA7B;;AA6BP,IAAIZ,OAAJ,EAAa;AACXG,EAAAA,UAAU,CAACc,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n"],"file":"icon-button.js"}