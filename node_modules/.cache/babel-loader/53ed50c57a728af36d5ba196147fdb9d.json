{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { isInputEvent } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\n/**\n * React hook to manage a group of radio inputs\n */\n\nexport function useRadioGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onChangeProp = _props.onChange,\n      valueProp = _props.value,\n      defaultValue = _props.defaultValue,\n      nameProp = _props.name,\n      isDisabled = _props.isDisabled,\n      isFocusable = _props.isFocusable,\n      isNative = _props.isNative,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isDisabled\", \"isFocusable\", \"isNative\"]);\n\n  var _React$useState = React.useState(defaultValue || \"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      value = _useControllableProp2[1];\n\n  var ref = React.useRef(null);\n  var focus = React.useCallback(function () {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  /**\n   * All radio options must use the same name\n   */\n\n  var fallbackName = useId(undefined, \"radio\");\n  var name = nameProp || fallbackName;\n  var onChange = React.useCallback(function (eventOrValue) {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  }, []);\n  var getRadioProps = React.useCallback(function (props, ref) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      name: name\n    }, _defineProperty(_extends2, checkedKey, value != null ? props.value === value : undefined), _defineProperty(_extends2, \"onChange\", onChange), _defineProperty(_extends2, \"data-radiogroup\", true), _extends2));\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps: getRootProps,\n    getRadioProps: getRadioProps,\n    name: name,\n    ref: ref,\n    focus: focus,\n    setValue: setValue,\n    value: value,\n    onChange: onChange,\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["props","onChange","value","name","isNative","React","defaultValue","useControllableProp","ref","focus","rootNode","query","firstEnabledAndCheckedInput","firstEnabledInput","fallbackName","useId","nameProp","eventOrValue","nextValue","isInputEvent","setValue","onChangeProp","String","getRootProps","forwardedRef","mergeRefs","role","getRadioProps","checkedKey","isDisabled","isFocusable","htmlProps"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { StringOrNumber, isInputEvent } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\ntype RadioPropGetter = PropGetter<\n  HTMLInputElement,\n  { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"size\" | \"value\"\n  >\n>\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = React.useState<StringOrNumber>(\n    defaultValue || \"\",\n  )\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = React.useRef<any>(null)\n\n  const focus = React.useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = React.useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: RadioPropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange,\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}