{"version":3,"sources":["../../src/providers.tsx"],"names":["ThemeProvider","props","cssVarsRoot","theme","children","computedTheme","React","useMemo","__cssVars","useTheme","useContext","ThemeContext","Error","name","errorMessage","StylesProvider","useStyles","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":";;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AAOA;;;;;;AAUO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAA+B;AAAA,2BACAA,KADA,CAClDC,WADkD;AAAA,MAClDA,WADkD,mCACpC,cADoC;AAAA,MACpBC,KADoB,GACAF,KADA,CACpBE,KADoB;AAAA,MACbC,QADa,GACAH,KADA,CACbG,QADa;AAE1D,MAAMC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAc;AAAA,WAAM,4BAASJ,KAAT,CAAN;AAAA,GAAd,EAAqC,CAACA,KAAD,CAArC,CAAtB;AACA,sBACE,oBAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEE;AAA7B,kBACE,oBAAC,aAAD;AAAQ,IAAA,MAAM,EAAE,gBAACF,KAAD;AAAA;;AAAA,6BAAoBD,WAApB,IAAkCC,KAAK,CAACK,SAAxC;AAAA;AAAhB,IADF,EAEGJ,QAFH,CADF;AAMD,CATM;;;;AAWA,SAASK,QAAT,GAA6C;AAClD,MAAMN,KAAK,GAAGG,KAAK,CAACI,UAAN,CACXC,mBADW,CAAd;;AAGA,MAAI,CAACR,KAAL,EAAY;AACV,UAAMS,KAAK,CACT,kHADS,CAAX;AAGD;;AAED,SAAOT,KAAP;AACD;;qBAEmC,+BAAuC;AACzEU,EAAAA,IAAI,EAAE,eADmE;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAAvC,C;IAA7BC,c;IAAgBC,S;;;;;AAOvB;AACA;AACA;AACA;AACO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACT,8BADS;AAAA,MACvBC,SADuB,iBACvBA,SADuB;;AAE/B,sBACE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAE,gBAACf,KAAD,EAAgB;AACtB,UAAMgB,eAAe,GAAG,wBAAIhB,KAAJ,EAAW,eAAX,CAAxB;AACA,UAAMiB,YAAY,GAAG,oBAAQD,eAAR,EAAyB;AAAEhB,QAAAA,KAAK,EAALA,KAAF;AAASe,QAAAA,SAAS,EAATA;AAAT,OAAzB,CAArB;AACA,UAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAMC,MAAM,GAAG,uBAAIF,YAAJ,EAAkBjB,KAAlB,CAAf;AACA,aAAOmB,MAAP;AACD;AAPH,IADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"],"file":"providers.js"}