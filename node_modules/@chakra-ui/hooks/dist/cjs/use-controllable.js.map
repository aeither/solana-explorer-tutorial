{"version":3,"sources":["../../src/use-controllable.ts"],"names":["useControllableProp","prop","state","isControlled","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","React","useState","valueState","setValue","updateValue","useCallback","nextValue"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;AAEO,SAASA,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,MAAMC,YAAY,GAAGF,IAAI,KAAKG,SAA9B;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAOF,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACC,YAAD,EAAeE,KAAf,CAAP;AACD;;AAqBD;AACA;AACA;AACA;AACO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAAA,MAElEC,SAFkE,GAMvED,KANuE,CAEzEF,KAFyE;AAAA,MAGzEI,YAHyE,GAMvEF,KANuE,CAGzEE,YAHyE;AAAA,MAIzEC,QAJyE,GAMvEH,KANuE,CAIzEG,QAJyE;AAAA,4BAMvEH,KANuE,CAKzEI,YALyE;AAAA,MAKzEA,YALyE,oCAK1D,UAACC,IAAD,EAAOC,IAAP;AAAA,WAAgBD,IAAI,KAAKC,IAAzB;AAAA,GAL0D;AAO3E,MAAMC,YAAY,GAAG,oCAAeJ,QAAf,CAArB;AACA,MAAMK,gBAAgB,GAAG,oCAAeJ,YAAf,CAAzB;;AAR2E,wBAU5CK,KAAK,CAACC,QAAN,CAAeR,YAAf,CAV4C;AAAA,MAUpES,UAVoE;AAAA,MAUxDC,QAVwD;;AAY3E,MAAMhB,YAAY,GAAGK,SAAS,KAAKJ,SAAnC;AACA,MAAMC,KAAK,GAAGF,YAAY,GAAIK,SAAJ,GAAsBU,UAAhD;AAEA,MAAME,WAAW,GAAGJ,KAAK,CAACK,WAAN,CAClB,UAACR,IAAD,EAAmC;AACjC,QAAMS,SAAS,GAAG,oBAAQT,IAAR,EAAcR,KAAd,CAAlB;;AAEA,QAAI,CAACU,gBAAgB,CAACV,KAAD,EAAQiB,SAAR,CAArB,EAAyC;AACvC;AACD;;AAED,QAAI,CAACnB,YAAL,EAAmB;AACjBgB,MAAAA,QAAQ,CAACG,SAAD,CAAR;AACD;;AAEDR,IAAAA,YAAY,CAACQ,SAAD,CAAZ;AACD,GAbiB,EAclB,CAACnB,YAAD,EAAeW,YAAf,EAA6BT,KAA7B,EAAoCU,gBAApC,CAdkB,CAApB;AAiBA,SAAO,CAACV,KAAD,EAAQe,WAAR,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}