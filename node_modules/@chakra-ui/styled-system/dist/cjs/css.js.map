{"version":3,"sources":["../../src/css.ts"],"names":["isCSSVariableTokenValue","key","value","startsWith","resolveTokenValue","theme","getVar","val","__cssMap","varRef","getValue","valueSplit","split","map","v","trim","tokenValue","fallbackValue","getCss","options","configs","pseudos","css","stylesOrFn","nested","_styles","styles","computedStyles","valueOrFn","config","property","rawValue","transform","processResult","configProperty","staticStyles","Array","isArray","cssFn","pseudoSelectors","systemPropConfigs"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  isString,\n  mergeWith as merge,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { StyleObjectOrFn } from \"./system.types\"\nimport { expandResponsive } from \"./utils/expand-responsive\"\nimport { Config, PropConfig } from \"./utils/prop-config\"\nimport { CssTheme } from \"./utils/types\"\n\nconst isCSSVariableTokenValue = (key: string, value: any): value is string =>\n  key.startsWith(\"--\") && isString(value) && !isCssVar(value)\n\nconst resolveTokenValue = (theme: Dict, value: string) => {\n  if (value == null) return value\n\n  const getVar = (val: string) => theme.__cssMap?.[val]?.varRef\n  const getValue = (val: string) => getVar(val) ?? val\n\n  const valueSplit = value.split(\",\").map((v) => v.trim())\n  const [tokenValue, fallbackValue] = valueSplit\n  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value)\n\n  return value\n}\n\ninterface GetCSSOptions {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: GetCSSOptions) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (let key in styles) {\n      const valueOrFn = styles[key]\n\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n      let value = runIfFn(valueOrFn, theme)\n\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n      if (key in pseudos) {\n        key = pseudos[key]\n      }\n\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value)\n      }\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"],"file":"css.js"}