{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useCheckbox","props","defaultIsChecked","defaultChecked","checkedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","onBlur","onFocus","ariaLabel","ariaLabelledBy","ariaInvalid","ariaDescribedBy","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","node","tagName","onClick","click","nextTick","getInputProps","type","required","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n    }),\n    [htmlProps, isDisabled, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"file":"use-checkbox.js"}