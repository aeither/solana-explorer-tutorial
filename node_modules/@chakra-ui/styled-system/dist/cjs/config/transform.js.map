{"version":3,"sources":["../../../src/config/transform.ts"],"names":["transform","clipPath","t","propT","transforms","transformOrigin","translateX","spaceT","translateY","skewX","degreeT","skewY","scaleX","prop","scaleY","scale","rotate"],"mappings":";;;;;AAEA;;AAEO,IAAMA,SAAiB,GAAG;AAC/BC,EAAAA,QAAQ,EAAE,IADqB;AAE/BD,EAAAA,SAAS,EAAEE,SAAEC,KAAF,CAAQ,WAAR,EAAqBC,kBAAWJ,SAAhC,CAFoB;AAG/BK,EAAAA,eAAe,EAAE,IAHc;AAI/BC,EAAAA,UAAU,EAAEJ,SAAEK,MAAF,CAAS,sBAAT,CAJmB;AAK/BC,EAAAA,UAAU,EAAEN,SAAEK,MAAF,CAAS,sBAAT,CALmB;AAM/BE,EAAAA,KAAK,EAAEP,SAAEQ,OAAF,CAAU,iBAAV,CANwB;AAO/BC,EAAAA,KAAK,EAAET,SAAEQ,OAAF,CAAU,iBAAV,CAPwB;AAQ/BE,EAAAA,MAAM,EAAEV,SAAEW,IAAF,CAAO,kBAAP,CARuB;AAS/BC,EAAAA,MAAM,EAAEZ,SAAEW,IAAF,CAAO,kBAAP,CATuB;AAU/BE,EAAAA,KAAK,EAAEb,SAAEW,IAAF,CAAO,CAAC,kBAAD,EAAqB,kBAArB,CAAP,CAVwB;AAW/BG,EAAAA,MAAM,EAAEd,SAAEQ,OAAF,CAAU,iBAAV;AAXuB,CAA1B","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config } from \"../utils/prop-config\"\nimport { Length, t, Token, transforms } from \"../utils\"\n\nexport const transform: Config = {\n  clipPath: true,\n  transform: t.propT(\"transform\", transforms.transform),\n  transformOrigin: true,\n  translateX: t.spaceT(\"--chakra-translate-x\"),\n  translateY: t.spaceT(\"--chakra-translate-y\"),\n  skewX: t.degreeT(\"--chakra-skew-x\"),\n  skewY: t.degreeT(\"--chakra-skew-y\"),\n  scaleX: t.prop(\"--chakra-scale-x\"),\n  scaleY: t.prop(\"--chakra-scale-y\"),\n  scale: t.prop([\"--chakra-scale-x\", \"--chakra-scale-y\"]),\n  rotate: t.degreeT(\"--chakra-rotate\"),\n}\n\nexport interface TransformProps {\n  /**\n   * The CSS `transform` property\n   */\n  transform?: Token<CSS.Property.Transform | \"auto\" | \"auto-gpu\">\n  /**\n   * The CSS `transform-origin` property\n   */\n  transformOrigin?: Token<CSS.Property.TransformOrigin | number, \"sizes\">\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: Token<CSS.Property.ClipPath>\n  /**\n   * Translate value of an elements in the x-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-translate-x`\n   */\n  translateX?: Token<Length>\n  /**\n   * Translate value of an elements in the y-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-translate-y`\n   */\n  translateY?: Token<Length>\n  /**\n   * Sets the rotate value of the element\n   */\n  rotate?: Token<Length>\n  /**\n   * Skew value of an elements in the x-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-skew-x`\n   */\n  skewX?: Token<Length>\n  /**\n   * Skew value of an elements in the y-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-skew-y`\n   */\n  skewY?: Token<Length>\n  /**\n   * Scale value of an elements in the x-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-scale-x`\n   */\n  scaleX?: Token<Length>\n  /**\n   * Scale value of an elements in the y-direction.\n   * - Only works if `transform=auto`\n   * - It sets the value of `--chakra-scale-y`\n   */\n  scaleY?: Token<Length>\n  /**\n   * Sets the scale value of the element\n   */\n  scale?: Token<Length>\n}\n"],"file":"transform.js"}