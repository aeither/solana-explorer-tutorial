{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { fadeConfig } from \"@chakra-ui/transition\";\nimport { callAllHandlers, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { AnimatePresence, motion, usePresence } from \"framer-motion\";\nimport * as React from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { ModalTransition } from \"./modal-transition\";\nimport { useModal } from \"./use-modal\";\n\nvar _createContext = createContext({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    ModalContextProvider = _createContext2[0],\n    useModalContext = _createContext2[1];\n\nexport { ModalContextProvider, useModalContext };\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\n\nexport var Modal = function Modal(props) {\n  var portalProps = props.portalProps,\n      children = props.children,\n      autoFocus = props.autoFocus,\n      trapFocus = props.trapFocus,\n      initialFocusRef = props.initialFocusRef,\n      finalFocusRef = props.finalFocusRef,\n      returnFocusOnClose = props.returnFocusOnClose,\n      blockScrollOnMount = props.blockScrollOnMount,\n      allowPinchZoom = props.allowPinchZoom,\n      preserveScrollBarGap = props.preserveScrollBarGap,\n      motionPreset = props.motionPreset,\n      lockFocusAcrossFrames = props.lockFocusAcrossFrames;\n  var styles = useMultiStyleConfig(\"Modal\", props);\n  var modal = useModal(props);\n\n  var context = _extends({}, modal, {\n    autoFocus: autoFocus,\n    trapFocus: trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    returnFocusOnClose: returnFocusOnClose,\n    blockScrollOnMount: blockScrollOnMount,\n    allowPinchZoom: allowPinchZoom,\n    preserveScrollBarGap: preserveScrollBarGap,\n    motionPreset: motionPreset,\n    lockFocusAcrossFrames: lockFocusAcrossFrames\n  });\n\n  return /*#__PURE__*/React.createElement(ModalContextProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(AnimatePresence, null, context.isOpen && /*#__PURE__*/React.createElement(Portal, portalProps, children))));\n};\nModal.defaultProps = {\n  lockFocusAcrossFrames: true,\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n  motionPreset: \"scale\"\n};\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\";\n}\n\nvar MotionDiv = chakra(motion.div);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var ModalContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      rootProps = props.containerProps,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"containerProps\"]);\n\n  var _useModalContext = useModalContext(),\n      getDialogProps = _useModalContext.getDialogProps,\n      getDialogContainerProps = _useModalContext.getDialogContainerProps;\n\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps(rootProps);\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    \"@supports(height: -webkit-fill-available)\": {\n      height: \"-webkit-fill-available\"\n    },\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var _useModalContext2 = useModalContext(),\n      motionPreset = _useModalContext2.motionPreset;\n\n  return /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalTransition, _extends({\n    preset: motionPreset,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\";\n}\n\nexport function ModalFocusScope(props) {\n  var _useModalContext3 = useModalContext(),\n      autoFocus = _useModalContext3.autoFocus,\n      trapFocus = _useModalContext3.trapFocus,\n      dialogRef = _useModalContext3.dialogRef,\n      initialFocusRef = _useModalContext3.initialFocusRef,\n      blockScrollOnMount = _useModalContext3.blockScrollOnMount,\n      allowPinchZoom = _useModalContext3.allowPinchZoom,\n      finalFocusRef = _useModalContext3.finalFocusRef,\n      returnFocusOnClose = _useModalContext3.returnFocusOnClose,\n      preserveScrollBarGap = _useModalContext3.preserveScrollBarGap,\n      lockFocusAcrossFrames = _useModalContext3.lockFocusAcrossFrames;\n\n  var _usePresence = usePresence(),\n      _usePresence2 = _slicedToArray(_usePresence, 2),\n      isPresent = _usePresence2[0],\n      safeToRemove = _usePresence2[1];\n\n  React.useEffect(function () {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  return /*#__PURE__*/React.createElement(FocusLock, {\n    autoFocus: autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames: lockFocusAcrossFrames\n  }, /*#__PURE__*/React.createElement(RemoveScroll, {\n    removeScrollBar: !preserveScrollBarGap,\n    allowPinchZoom: allowPinchZoom,\n    enabled: blockScrollOnMount,\n    forwardProps: true\n  }, props.children));\n}\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/modal\n */\n\nexport var ModalOverlay = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"transition\"]);\n\n  var _className = cx(\"chakra-modal__overlay\", className);\n\n  var styles = useStyles();\n\n  var overlayStyle = _extends({\n    pos: \"fixed\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100vw\",\n    h: \"100vh\"\n  }, styles.overlay);\n\n  var _useModalContext4 = useModalContext(),\n      motionPreset = _useModalContext4.motionPreset;\n\n  var motionProps = motionPreset === \"none\" ? {} : fadeConfig;\n  return /*#__PURE__*/React.createElement(MotionDiv, _extends({}, motionProps, {\n    __css: overlayStyle,\n    ref: ref,\n    className: _className\n  }, rest));\n});\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\";\n}\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\n\n\nexport var ModalHeader = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _useModalContext5 = useModalContext(),\n      headerId = _useModalContext5.headerId,\n      setHeaderMounted = _useModalContext5.setHeaderMounted;\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-labelledby` automatically\n   */\n\n\n  React.useEffect(function () {\n    setHeaderMounted(true);\n    return function () {\n      return setHeaderMounted(false);\n    };\n  }, [setHeaderMounted]);\n\n  var _className = cx(\"chakra-modal__header\", className);\n\n  var styles = useStyles();\n\n  var headerStyles = _extends({\n    flex: 0\n  }, styles.header);\n\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({\n    ref: ref,\n    className: _className,\n    id: headerId\n  }, rest, {\n    __css: headerStyles\n  }));\n});\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\";\n}\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\n\n\nexport var ModalBody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _useModalContext6 = useModalContext(),\n      bodyId = _useModalContext6.bodyId,\n      setBodyMounted = _useModalContext6.setBodyMounted;\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n\n\n  React.useEffect(function () {\n    setBodyMounted(true);\n    return function () {\n      return setBodyMounted(false);\n    };\n  }, [setBodyMounted]);\n\n  var _className = cx(\"chakra-modal__body\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: _className,\n    id: bodyId\n  }, rest, {\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\";\n}\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/modal\n */\n\n\nexport var ModalFooter = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _className = cx(\"chakra-modal__footer\", className);\n\n  var styles = useStyles();\n\n  var footerStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  }, styles.footer);\n\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({\n    ref: ref\n  }, rest, {\n    __css: footerStyles,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\";\n}\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\n\n\nexport var ModalCloseButton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var onClick = props.onClick,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"onClick\", \"className\"]);\n\n  var _useModalContext7 = useModalContext(),\n      onClose = _useModalContext7.onClose;\n\n  var _className = cx(\"chakra-modal__close-btn\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    ref: ref,\n    __css: styles.closeButton,\n    className: _className,\n    onClick: callAllHandlers(onClick, function (event) {\n      event.stopPropagation();\n      onClose();\n    })\n  }, rest));\n});\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\";\n}","map":{"version":3,"sources":["../../src/modal.tsx"],"names":["createContext","strict","name","errorMessage","Modal","props","lockFocusAcrossFrames","styles","useMultiStyleConfig","modal","useModal","context","autoFocus","trapFocus","initialFocusRef","finalFocusRef","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","preserveScrollBarGap","motionPreset","scrollBehavior","MotionDiv","chakra","motion","ModalContent","forwardRef","containerProps","rootProps","getDialogContainerProps","useModalContext","dialogProps","getDialogProps","_className","cx","useStyles","dialogStyles","display","flexDirection","position","width","outline","dialogContainerStyles","height","left","top","usePresence","React","setTimeout","ModalOverlay","className","overlayStyle","pos","w","h","motionProps","ModalHeader","setHeaderMounted","headerStyles","flex","headerId","ModalBody","setBodyMounted","bodyId","body","ModalFooter","footerStyles","alignItems","justifyContent","ref","ModalCloseButton","onClose","callAllHandlers","event"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock, FocusLockProps } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  HTMLChakraProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { fadeConfig } from \"@chakra-ui/transition\"\nimport {\n  callAllHandlers,\n  cx,\n  FocusableElement,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  usePresence,\n} from \"framer-motion\"\nimport * as React from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { MouseEvent } from \"react\"\nimport { ModalTransition } from \"./modal-transition\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface ModalOptions extends Pick<FocusLockProps, \"lockFocusAcrossFrames\"> {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * 🚨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset = \"slideInBottom\" | \"slideInRight\" | \"scale\" | \"none\"\n\nexport interface ModalProps\n  extends UseModalProps,\n    ModalOptions,\n    ThemingProps<\"Modal\"> {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\nexport { ModalContextProvider, useModalContext }\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <StylesProvider value={styles}>\n        <AnimatePresence>\n          {context.isOpen && <Portal {...portalProps}>{children}</Portal>}\n        </AnimatePresence>\n      </StylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  lockFocusAcrossFrames: true,\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n  motionPreset: \"scale\",\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n}\n\nconst MotionDiv = chakra(motion.div)\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, containerProps: rootProps, ...rest } = props\n\n    const { getDialogProps, getDialogContainerProps } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      \"@supports(height: -webkit-fill-available)\": {\n        height: \"-webkit-fill-available\",\n      },\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { motionPreset } = useModalContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <ModalTransition\n            preset={motionPreset}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </ModalTransition>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  React.useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        enabled={blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n\nexport interface ModalOverlayProps\n  extends Omit<HTMLMotionProps<\"div\">, \"color\" | \"transition\">,\n    ChakraProps {\n  children?: React.ReactNode\n}\n\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  (props, ref) => {\n    const { className, transition, ...rest } = props\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n    const overlayStyle: SystemStyleObject = {\n      pos: \"fixed\",\n      left: \"0\",\n      top: \"0\",\n      w: \"100vw\",\n      h: \"100vh\",\n      ...styles.overlay,\n    }\n\n    const { motionPreset } = useModalContext()\n    const motionProps: any = motionPreset === \"none\" ? {} : fadeConfig\n\n    return (\n      <MotionDiv\n        {...motionProps}\n        __css={overlayStyle}\n        ref={ref}\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    React.useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n\n    const styles = useStyles()\n    const headerStyles: SystemStyleObject = {\n      flex: 0,\n      ...styles.header,\n    }\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={headerStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">((props, ref) => {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  React.useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\nexport interface ModalFooterProps extends HTMLChakraProps<\"footer\"> {}\n\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n\n    const styles = useStyles()\n    const footerStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      ...styles.footer,\n    }\n\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={footerStyles}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    const styles = useStyles()\n\n    return (\n      <CloseButton\n        ref={ref}\n        __css={styles.closeButton}\n        className={_className}\n        onClick={callAllHandlers(onClick, (event: MouseEvent) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"]},"metadata":{},"sourceType":"module"}