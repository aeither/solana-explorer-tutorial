{"ast":null,"code":"// Number assertions\nexport function isNumber(value) {\n  return typeof value === \"number\";\n}\nexport function isNotNumber(value) {\n  return typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value);\n}\nexport function isNumeric(value) {\n  return value != null && value - parseFloat(value) + 1 >= 0;\n} // Array assertions\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\nexport function isEmptyArray(value) {\n  return isArray(value) && value.length === 0;\n} // Function assertions\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n} // Generic assertions\n\nexport function isDefined(value) {\n  return typeof value !== \"undefined\" && value !== undefined;\n}\nexport function isUndefined(value) {\n  return typeof value === \"undefined\" || value === undefined;\n} // Object assertions\n\nexport function isObject(value) {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n}\nexport function isEmptyObject(value) {\n  return isObject(value) && Object.keys(value).length === 0;\n}\nexport function isNotEmptyObject(value) {\n  return value && !isEmptyObject(value);\n}\nexport function isNull(value) {\n  return value == null;\n} // String assertions\n\nexport function isString(value) {\n  return Object.prototype.toString.call(value) === \"[object String]\";\n}\nexport function isCssVar(value) {\n  return /^var\\(--.+\\)$/.test(value);\n} // Empty assertions\n\nexport function isEmpty(value) {\n  if (isArray(value)) return isEmptyArray(value);\n  if (isObject(value)) return isEmptyObject(value);\n  if (value == null || value === \"\") return true;\n  return false;\n}\nexport var __DEV__ = process.env.NODE_ENV !== \"production\";\nexport var __TEST__ = process.env.NODE_ENV === \"test\";\nexport function isRefObject(val) {\n  return \"current\" in val;\n}\nexport function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}","map":{"version":3,"sources":["../../src/assertion.ts"],"names":["Number","value","parseFloat","Array","isArray","type","isObject","Object","isEmptyObject","isEmptyArray","__DEV__","process","__TEST__"],"mappings":"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","sourcesContent":["import { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport function isNotNumber(value: any) {\n  return (\n    typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n  )\n}\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport function isEmptyArray(value: any) {\n  return isArray(value) && value.length === 0\n}\n\n// Function assertions\nexport function isFunction<T extends Function = Function>(\n  value: any,\n): value is T {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport function isDefined(value: any) {\n  return typeof value !== \"undefined\" && value !== undefined\n}\n\nexport function isUndefined(value: any): value is undefined {\n  return typeof value === \"undefined\" || value === undefined\n}\n\n// Object assertions\nexport function isObject(value: any): value is Dict {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport function isEmptyObject(value: any) {\n  return isObject(value) && Object.keys(value).length === 0\n}\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport function isNull(value: any): value is null {\n  return value == null\n}\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\nexport function isCssVar(value: string): boolean {\n  return /^var\\(--.+\\)$/.test(value)\n}\n\n// Empty assertions\nexport function isEmpty(value: any): boolean {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n\nexport const __TEST__ = process.env.NODE_ENV === \"test\"\n\nexport function isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n\nexport function isInputEvent(\n  value: any,\n): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n"]},"metadata":{},"sourceType":"module"}