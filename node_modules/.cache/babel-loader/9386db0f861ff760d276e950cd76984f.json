{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { isUndefined, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, rotate, spin } from \"./progress.utils\";\n\nvar Circle = function Circle(props) {\n  return /*#__PURE__*/React.createElement(chakra.circle, _extends({\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\"\n  }, props));\n};\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}\n\nvar Shape = function Shape(props) {\n  var size = props.size,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"isIndeterminate\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? rotate + \" 2s linear infinite\" : undefined\n    }\n  }, rest));\n};\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\";\n}\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\n\n\nexport var CircularProgress = function CircularProgress(props) {\n  var _progress$percent;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? \"48px\" : _props$size,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      valueText = props.valueText,\n      getValueText = props.getValueText,\n      value = props.value,\n      capIsRound = props.capIsRound,\n      children = props.children,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n      _props$color = props.color,\n      color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n      _props$trackColor = props.trackColor,\n      trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"]);\n\n  var progress = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;\n  var strokeDasharray = isUndefined(determinant) ? undefined : determinant + \" \" + (264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: spin + \" 1.5s linear infinite\"\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-progress\"\n  }, progress.bind, rest, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /*#__PURE__*/React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /*#__PURE__*/React.createElement(Circle, _extends({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : undefined\n    /**\n     * fix issue in Safari where indictor still shows when value is 0\n     * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n     */\n    ,\n    opacity: progress.value === 0 && !isIndeterminate ? 0 : undefined\n  }, indicatorProps))), children);\n};\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\";\n}\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\n\n\nexport var CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\";\n}","map":{"version":3,"sources":["../../src/circular-progress.tsx"],"names":["Circle","props","Shape","isIndeterminate","width","height","animation","rotate","undefined","CircularProgress","size","max","min","thickness","color","trackColor","progress","getProgressProps","value","valueText","getValueText","determinant","strokeDasharray","isUndefined","indicatorProps","css","spin","strokeDashoffset","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","display","position","verticalAlign","fontSize","capIsRound","CircularProgressLabel","chakra","baseStyle","top","left","textAlign","transform"],"mappings":"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","sourcesContent":["import { chakra, SystemStyleObject, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { isUndefined, StringOrNumber, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { getProgressProps, rotate, spin } from \"./progress.utils\"\n\ninterface CircleProps extends HTMLChakraProps<\"circle\"> {}\n\nconst Circle: React.FC<CircleProps> = (props) => (\n  <chakra.circle cx={50} cy={50} r={42} fill=\"transparent\" {...props} />\n)\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n\ninterface ShapeProps extends HTMLChakraProps<\"svg\"> {\n  size?: StringOrNumber\n  isIndeterminate?: boolean\n}\n\nconst Shape: React.FC<ShapeProps> = (props) => {\n  const { size, isIndeterminate, ...rest } = props\n  return (\n    <chakra.svg\n      viewBox=\"0 0 100 100\"\n      __css={{\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : undefined,\n      }}\n      {...rest}\n    />\n  )\n}\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\"\n}\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: StringOrNumber\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   */\n  min?: number\n  /**\n   * This defines the stroke width of the svg circle.\n   */\n  thickness?: StringOrNumber\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface CircularProgressProps\n  extends Omit<HTMLChakraProps<\"div\">, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress: React.FC<CircularProgressProps> = (props) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props\n\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  })\n\n  const determinant = isIndeterminate\n    ? undefined\n    : (progress.percent ?? 0) * 2.64\n\n  const strokeDasharray = isUndefined(determinant)\n    ? undefined\n    : `${determinant} ${264 - determinant}`\n\n  const indicatorProps = isIndeterminate\n    ? {\n        css: { animation: `${spin} 1.5s linear infinite` },\n      }\n    : {\n        strokeDashoffset: 66,\n        strokeDasharray,\n        transitionProperty: \"stroke-dasharray, stroke\",\n        transitionDuration: \"0.6s\",\n        transitionTimingFunction: \"ease\",\n      }\n\n  const rootStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size,\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-progress\"\n      {...progress.bind}\n      {...rest}\n      __css={rootStyles}\n    >\n      <Shape size={size} isIndeterminate={isIndeterminate}>\n        <Circle\n          stroke={trackColor}\n          strokeWidth={thickness}\n          className=\"chakra-progress__track\"\n        />\n        <Circle\n          stroke={color}\n          strokeWidth={thickness}\n          className=\"chakra-progress__indicator\"\n          strokeLinecap={capIsRound ? \"round\" : undefined}\n          /**\n           * fix issue in Safari where indictor still shows when value is 0\n           * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n           */\n          opacity={progress.value === 0 && !isIndeterminate ? 0 : undefined}\n          {...indicatorProps}\n        />\n      </Shape>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\"\n}\n\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\nexport const CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n  },\n})\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\"\n}\n\nexport interface CircularProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n"]},"metadata":{},"sourceType":"module"}