{"version":3,"sources":["../../src/use-editable.ts"],"names":["useEditable","props","onChangeProp","onChange","onCancelProp","onCancel","onSubmitProp","onSubmit","valueProp","value","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEditProp","onEdit","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","selectTextIfInput","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","onBlur","relatedTarget","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","undefined","children","hidden","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"mappings":"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","sourcesContent":["import {\n  useControllableState,\n  useFocusOnPointerDown,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  contains,\n  focus,\n  getRelatedTarget,\n  isEmpty,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current)\n      return\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus,\n    })\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      const relatedTarget = getRelatedTarget(event)\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur && submitOnBlur) {\n        onSubmit()\n      }\n    },\n    [submitOnBlur, onSubmit],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    [onEdit],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    [onSubmit],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    [onCancel],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}