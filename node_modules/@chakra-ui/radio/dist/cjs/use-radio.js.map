{"version":3,"sources":["../../src/use-radio.ts"],"names":["useRadio","props","defaultIsChecked","defaultChecked","isCheckedProp","isChecked","isFocusable","isDisabledProp","isDisabled","isReadOnlyProp","isReadOnly","isRequiredProp","isRequired","onChange","isInvalidProp","isInvalid","name","value","idProp","id","dataRadioGroup","htmlProps","uuid","undefined","formControl","group","isWithinRadioGroup","isWithinFormControl","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","Boolean","isCheckedState","setChecked","isControlled","condition","message","handleChange","event","preventDefault","target","checked","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","forwardedRef","trulyDisabled","type","disabled","readOnly","required","style","visuallyHiddenStyle","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    ...htmlProps\n  } = props\n\n  const uuid = useId(undefined, \"radio\")\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const trulyDisabled = isDisabled && !isFocusable\n\n      return {\n        ...props,\n        id,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        required: isRequired,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-required\": ariaAttr(isRequired),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      isDisabled,\n      isFocusable,\n      id,\n      name,\n      value,\n      handleChange,\n      onBlur,\n      setFocused,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n      isReadOnly,\n      isRequired,\n      isInvalid,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}