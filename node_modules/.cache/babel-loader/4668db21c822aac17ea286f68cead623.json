{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isArray, isObject } from \"./assertion\";\nexport function walkObject(target, predicate) {\n  function inner(value, path) {\n    if (path === void 0) {\n      path = [];\n    }\n\n    if (isArray(value)) {\n      return value.map(function (item, index) {\n        return inner(item, [].concat(_toConsumableArray(path), [String(index)]));\n      });\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(Object.entries(value).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            child = _ref2[1];\n\n        return [key, inner(child, [].concat(_toConsumableArray(path), [key]))];\n      }));\n    }\n\n    return predicate(value, path);\n  }\n\n  return inner(target);\n}","map":{"version":3,"sources":["../../src/walk-object.ts"],"names":["path","isArray","value","inner","String","isObject","predicate"],"mappings":";;AAAA,SAAA,OAAA,EAAA,QAAA,QAAA,aAAA;AAeA,OAAO,SAAA,UAAA,CAAA,MAAA,EAAA,SAAA,EAGkE;AACvE,WAAA,KAAA,CAAA,KAAA,EAAA,IAAA,EAAyD;AAAA,QAA1BA,IAA0B,KAAA,KAAA,CAAA,EAAA;AAA1BA,MAAAA,IAA0B,GAAT,EAAjBA;AAA0B;;AACvD,QAAIC,OAAO,CAAX,KAAW,CAAX,EAAoB;AAClB,aAAOC,KAAK,CAALA,GAAAA,CAAU,UAAA,IAAA,EAAA,KAAA;AAAA,eAAiBC,KAAK,CAAA,IAAA,+BAAO,IAAP,IAAiBC,MAAM,CAA9D,KAA8D,CAAvB,GAAtB;AAAA,OAAVF,CAAP;AACD;;AAED,QAAIG,QAAQ,CAAZ,KAAY,CAAZ,EAAqB;AACnB,aAAO,MAAM,CAAN,WAAA,CACL,MAAM,CAAN,OAAA,CAAA,KAAA,EAAA,GAAA,CAA0B,UAAA,IAAA,EAAA;AAAA,mCAAA,IAAA;AAAA,YAAC,GAAD;AAAA,YAAA,KAAA;;AAAA,eAAkB,CAAA,GAAA,EAE1CF,KAAK,CAAA,KAAA,+BAAQ,IAAR,IAFmB,GAEnB,GAFqC,CAAlB;AAD5B,OACE,CADK,CAAP;AAMD;;AAED,WAAOG,SAAS,CAAA,KAAA,EAAhB,IAAgB,CAAhB;AACD;;AAED,SAAOH,KAAK,CAAZ,MAAY,CAAZ;AACD","sourcesContent":["import { isArray, isObject } from \"./assertion\"\n\nexport type WalkObjectPredicate<Leaf = unknown> = (\n  value: unknown,\n  path: string[],\n) => Leaf\n\nexport type MappedLeavesObject<Obj, LeafType> = {\n  [Prop in keyof Obj]: Obj[Prop] extends Array<any>\n    ? MappedLeavesObject<Obj[Prop][number], LeafType>[]\n    : Obj[Prop] extends object\n    ? MappedLeavesObject<Obj[Prop], LeafType>\n    : LeafType\n}\n\nexport function walkObject<Target, LeafType>(\n  target: Target,\n  predicate: WalkObjectPredicate<LeafType>,\n): MappedLeavesObject<Target, ReturnType<WalkObjectPredicate<LeafType>>> {\n  function inner(value: unknown, path: string[] = []): any {\n    if (isArray(value)) {\n      return value.map((item, index) => inner(item, [...path, String(index)]))\n    }\n\n    if (isObject(value)) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, child]) => [\n          key,\n          inner(child, [...path, key]),\n        ]),\n      )\n    }\n\n    return predicate(value, path)\n  }\n\n  return inner(target)\n}\n"]},"metadata":{},"sourceType":"module"}