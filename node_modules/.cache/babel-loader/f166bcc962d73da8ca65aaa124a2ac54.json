{"ast":null,"code":"import { contains, focus, getAllFocusable, isRefObject } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\nimport { useEventListener } from \"./use-event-listener\";\nimport { useUpdateEffect } from \"./use-update-effect\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nexport function useFocusOnShow(target, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var _options = options,\n      focusRef = _options.focusRef,\n      preventScroll = _options.preventScroll,\n      shouldFocus = _options.shouldFocus,\n      visible = _options.visible;\n  var element = isRefObject(target) ? target.current : target;\n  var autoFocus = shouldFocus && visible;\n  var onFocus = useCallback(function () {\n    if (!element || !autoFocus) return;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef != null && focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll: preventScroll,\n        nextTick: true\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll: preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef]);\n  useUpdateEffect(function () {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}","map":{"version":3,"sources":["../../src/use-focus-on-show.ts"],"names":["defaultOptions","preventScroll","shouldFocus","options","visible","element","isRefObject","target","autoFocus","onFocus","useCallback","contains","document","focusRef","focus","nextTick","tabbableEls","getAllFocusable","useUpdateEffect","useEventListener"],"mappings":"AAAA,SAAA,QAAA,EAAA,KAAA,EAAA,eAAA,EAAA,WAAA,QAAA,kBAAA;AAOA,SAAA,WAAA,QAAA,OAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AACA,SAAA,eAAA,QAAA,qBAAA;AASA,IAAMA,cAAqC,GAAG;AAC5CC,EAAAA,aAAa,EAD+B,IAAA;AAE5CC,EAAAA,WAAW,EAAE;AAF+B,CAA9C;AAKA,OAAO,SAAA,cAAA,CAAA,MAAA,EAAA,OAAA,EAGL;AAAA,MADAC,OACA,KAAA,KAAA,CAAA,EAAA;AADAA,IAAAA,OACA,GADUH,cAAVG;AACA;;AACA,iBAAA,OAAA;AAAA,MAAM,QAAN,YAAM,QAAN;AAAA,MAAM,aAAN,YAAM,aAAN;AAAA,MAAM,WAAN,YAAM,WAAN;AAAA,MAA8CC,OAA9C,YAA8CA,OAA9C;AACA,MAAMC,OAAO,GAAGC,WAAW,CAAXA,MAAW,CAAXA,GAAsBC,MAAM,CAA5BD,OAAAA,GAAhB,MAAA;AAEA,MAAME,SAAS,GAAGN,WAAW,IAA7B,OAAA;AAEA,MAAMO,OAAO,GAAGC,WAAW,CAAC,YAAM;AAChC,QAAI,CAAA,OAAA,IAAY,CAAhB,SAAA,EAA4B;AAE5B,QAAIC,QAAQ,CAAA,OAAA,EAAUC,QAAQ,CAA9B,aAAY,CAAZ,EAA8D;;AAE9D,QAAIC,QAAJ,IAAA,IAAIA,IAAAA,QAAQ,CAAZ,OAAA,EAAuB;AACrBC,MAAAA,KAAK,CAACD,QAAQ,CAAT,OAAA,EAAmB;AAAEZ,QAAAA,aAAF,EAAEA,aAAF;AAAiBc,QAAAA,QAAQ,EAAE;AAA3B,OAAnB,CAALD;AADF,KAAA,MAEO;AACL,UAAME,WAAW,GAAGC,eAAe,CAAnC,OAAmC,CAAnC;;AACA,UAAID,WAAW,CAAXA,MAAAA,GAAJ,CAAA,EAA4B;AAC1BF,QAAAA,KAAK,CAACE,WAAW,CAAZ,CAAY,CAAZ,EAAiB;AAAEf,UAAAA,aAAF,EAAEA,aAAF;AAAiBc,UAAAA,QAAQ,EAAE;AAA3B,SAAjB,CAALD;AACD;AACF;AAZwB,GAAA,EAaxB,CAAA,SAAA,EAAA,aAAA,EAAA,OAAA,EAbH,QAaG,CAbwB,CAA3B;AAeAI,EAAAA,eAAe,CAAC,YAAM;AACpBT,IAAAA,OAAO;AADM,GAAA,EAEZ,CAFHS,OAEG,CAFY,CAAfA;AAIAC,EAAAA,gBAAgB,CAAA,eAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = useCallback(() => {\n    if (!element || !autoFocus) return\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll, nextTick: true })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll, nextTick: true })\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module"}