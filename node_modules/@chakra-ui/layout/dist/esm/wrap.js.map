{"version":3,"sources":["../../src/wrap.tsx"],"names":["chakra","forwardRef","tokenToCSSVar","cx","mapResponsive","__DEV__","React","Wrap","props","ref","spacing","children","justify","direction","align","className","shouldWrapChildren","rest","styles","useMemo","theme","value","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","margin","childrenToRender","Children","map","child","index","displayName","WrapItem"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAKEC,aALF,QAMO,mBANP;AAOA,SAASC,EAAT,EAAmBC,aAAnB,EAAkCC,OAAlC,QAAiD,kBAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,IAAI,gBAAGN,UAAU,CAAmB,CAACO,KAAD,EAAQC,GAAR,KAAgB;AAC/D,MAAM;AACJC,IAAAA,OAAO,GAAG,QADN;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA;AAPI,MASFR,KATJ;AAAA,MAQKS,IARL,iCASIT,KATJ;;AAWA,MAAMU,MAAM,GAAGZ,KAAK,CAACa,OAAN,CACb,OAAO;AACL,6BAA0BC,KAAD,IACvBhB,aAAa,CAACM,OAAD,EAAWW,KAAD,IAAWnB,aAAa,CAAC,OAAD,EAAUmB,KAAV,CAAb,CAA8BD,KAA9B,CAArB,CAFV;AAGL,sBAAkB,sCAHb;AAILE,IAAAA,OAAO,EAAE,MAJJ;AAKLC,IAAAA,QAAQ,EAAE,MALL;AAMLC,IAAAA,cAAc,EAAEZ,OANX;AAOLa,IAAAA,UAAU,EAAEX,KAPP;AAQLY,IAAAA,aAAa,EAAEb,SARV;AASLc,IAAAA,aAAa,EAAE,MATV;AAULC,IAAAA,OAAO,EAAE,GAVJ;AAWLC,IAAAA,MAAM,EAAE,gCAXH;AAYL,wBAAoB;AAClBA,MAAAA,MAAM,EAAE;AADU;AAZf,GAAP,CADa,EAiBb,CAACnB,OAAD,EAAUE,OAAV,EAAmBE,KAAnB,EAA0BD,SAA1B,CAjBa,CAAf;AAoBA,MAAMiB,gBAAgB,GAAGd,kBAAkB,GACvCV,KAAK,CAACyB,QAAN,CAAeC,GAAf,CAAmBrB,QAAnB,EAA6B,CAACsB,KAAD,EAAQC,KAAR,kBAC3B,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA;AAAf,KAAuBD,KAAvB,CADF,CADuC,GAIvCtB,QAJJ;AAMA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEF,GAAjB;AAAsB,IAAA,SAAS,EAAEN,EAAE,CAAC,aAAD,EAAgBY,SAAhB;AAAnC,KAAmEE,IAAnE,gBACE,oBAAC,MAAD,CAAQ,EAAR;AAAW,IAAA,SAAS,EAAC,mBAArB;AAAyC,IAAA,KAAK,EAAEC;AAAhD,KACGY,gBADH,CADF,CADF;AAOD,CA7C6B,CAAvB;;AA+CP,IAAIzB,OAAJ,EAAa;AACXE,EAAAA,IAAI,CAAC4B,WAAL,GAAmB,MAAnB;AACD;;AAID,OAAO,IAAMC,QAAQ,gBAAGnC,UAAU,CAAsB,CAACO,KAAD,EAAQC,GAAR,KAAgB;AACtE,MAAM;AAAEM,IAAAA;AAAF,MAAyBP,KAA/B;AAAA,MAAsBS,IAAtB,iCAA+BT,KAA/B;;AACA,sBACE,oBAAC,MAAD,CAAQ,EAAR;AACE,IAAA,GAAG,EAAEC,GADP;AAEE,IAAA,KAAK,EAAE;AAAEa,MAAAA,OAAO,EAAE,MAAX;AAAmBG,MAAAA,UAAU,EAAE;AAA/B,KAFT;AAGE,IAAA,SAAS,EAAEtB,EAAE,CAAC,uBAAD,EAA0BY,SAA1B;AAHf,KAIME,IAJN,EADF;AAQD,CAViC,CAA3B;;AAYP,IAAIZ,OAAJ,EAAa;AACX+B,EAAAA,QAAQ,CAACD,WAAT,GAAuB,UAAvB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n  tokenToCSSVar,\n} from \"@chakra-ui/system\"\nimport { cx, Dict, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">((props, ref) => {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const styles = React.useMemo(\n    () => ({\n      \"--chakra-wrap-spacing\": (theme: Dict) =>\n        mapResponsive(spacing, (value) => tokenToCSSVar(\"space\", value)(theme)),\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\",\n      },\n    }),\n    [spacing, justify, align, direction],\n  )\n\n  const childrenToRender = shouldWrapChildren\n    ? React.Children.map(children, (child, index) => (\n        <WrapItem key={index}>{child}</WrapItem>\n      ))\n    : children\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul className=\"chakra-wrap__list\" __css={styles}>\n        {childrenToRender}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">((props, ref) => {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"],"file":"wrap.js"}