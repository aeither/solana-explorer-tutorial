{"version":3,"sources":["../../src/index.tsx"],"names":["React","ReactFocusLock","__DEV__","getAllFocusable","focus","FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","useCallback","current","focusables","length","nextTick","onDeactivation","returnFocus","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,OADF,EAEEC,eAFF,EAGEC,KAHF,QAKO,kBALP;AAoDA,OAAO,IAAMC,SAAmC,GAAIC,KAAD,IAAW;AAC5D,MAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA;AATI,MAUFT,KAVJ;AAYA,MAAMU,YAAY,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,MAAM;AAC3C,QAAIV,eAAJ,YAAIA,eAAe,CAAEW,OAArB,EAA8B;AAC5BX,MAAAA,eAAe,CAACW,OAAhB,CAAwBd,KAAxB;AACD,KAFD,MAEO,IAAIK,UAAJ,YAAIA,UAAU,CAAES,OAAhB,EAAyB;AAC9B,UAAMC,UAAU,GAAGhB,eAAe,CAACM,UAAU,CAACS,OAAZ,CAAlC;;AACA,UAAIC,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BhB,QAAAA,KAAK,CAACK,UAAU,CAACS,OAAZ,EAAqB;AAAEG,UAAAA,QAAQ,EAAE;AAAZ,SAArB,CAAL;AACD;AACF;AACF,GAToB,EASlB,CAACd,eAAD,EAAkBE,UAAlB,CATkB,CAArB;AAWA,MAAMa,cAAc,GAAGtB,KAAK,CAACiB,WAAN,CAAkB,MAAM;AAAA;;AAC7CT,IAAAA,aAAa,QAAb,qCAAAA,aAAa,CAAEU,OAAf,2CAAwBd,KAAxB;AACD,GAFsB,EAEpB,CAACI,aAAD,CAFoB,CAAvB;AAIA,MAAMe,WAAW,GAAGb,YAAY,IAAI,CAACF,aAArC;AAEA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEO,qBADd;AAEE,IAAA,eAAe,EAAED,eAFnB;AAGE,IAAA,SAAS,EAAED,SAHb;AAIE,IAAA,QAAQ,EAAED,UAJZ;AAKE,IAAA,YAAY,EAAEI,YALhB;AAME,IAAA,cAAc,EAAEM,cANlB;AAOE,IAAA,WAAW,EAAEC;AAPf,KASGZ,QATH,CADF;AAaD,CA3CM;;AA6CP,IAAIT,OAAJ,EAAa;AACXG,EAAAA,SAAS,CAACmB,WAAV,GAAwB,WAAxB;AACD;;AAED,eAAenB,SAAf","sourcesContent":["import * as React from \"react\"\nimport ReactFocusLock from \"react-focus-lock\"\nimport {\n  __DEV__,\n  getAllFocusable,\n  focus,\n  FocusableElement,\n} from \"@chakra-ui/utils\"\n\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focuable element within the `children`\n   * will ne auto-focused once `FocusLock` mounts\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock.\n   * @default `false`\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = React.useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        focus(contentRef.current, { nextTick: true })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = React.useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <ReactFocusLock\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </ReactFocusLock>\n  )\n}\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\"\n}\n\nexport default FocusLock\n"],"file":"index.js"}