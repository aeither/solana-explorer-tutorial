{"version":3,"sources":["../../src/grid.tsx"],"names":["Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","__DEV__","displayName","spanFn","span","value","GridItem","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"],"file":"grid.js"}