{"version":3,"sources":["../../src/number-input.tsx"],"names":["name","errorMessage","NumberInputProvider","useNumberInputContext","NumberInput","props","ref","styles","ownProps","controlProps","htmlProps","context","ctx","React","useMemo","className","position","zIndex","root","__DEV__","displayName","NumberInputStepper","display","flexDirection","top","insetEnd","margin","height","stepperGroup","NumberInputField","getInputProps","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transitionProperty","transitionDuration","userSelect","cursor","lineHeight","NumberDecrementStepper","getDecrementButtonProps","decrement","stepper","children","NumberIncrementStepper","getIncrementButtonProps","increment"],"mappings":"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","sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { __DEV__, cx } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [\n  NumberInputProvider,\n  useNumberInputContext,\n] = createContext<NumberInputContext>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps<\"NumberInput\">,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"NumberInput\", props)\n\n  const ownProps = omitThemingProps(props)\n  const controlProps = useFormControlProps(ownProps)\n\n  const { htmlProps, ...context } = useNumberInput(controlProps)\n  const ctx = React.useMemo(() => context, [context])\n\n  return (\n    <NumberInputProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...htmlProps}\n          ref={ref}\n          className={cx(\"chakra-numberinput\", props.className)}\n          __css={{\n            position: \"relative\",\n            zIndex: 0,\n            ...styles.root,\n          }}\n        />\n      </StylesProvider>\n    </NumberInputProvider>\n  )\n})\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          insetEnd: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        className={cx(\"chakra-numberinput__field\", props.className)}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transitionProperty: \"common\",\n    transitionDuration: \"normal\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"],"file":"number-input.js"}