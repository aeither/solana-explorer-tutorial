{"version":3,"sources":["../../src/form-control.tsx"],"names":["strict","name","FormControlProvider","useFormControlContext","useFormControlProvider","props","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","React","useState","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","ref","node","getLabelProps","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","children","onFocus","on","onBlur","off","FormControl","styles","ownProps","_","context","className","contextValue","useMemo","__DEV__","displayName","FormHelperText","field","helperText"],"mappings":";;;;;AAAA;;AACA;;AAUA;;AACA;;AAMA;;;;;;;;;;qBAmDI,+BAA0C;AAC5CA,EAAAA,MAAM,EAAE,KADoC;AAE5CC,EAAAA,IAAI,EAAE;AAFsC,CAA1C,C;IAFFC,mB;IACAC,qB;;;;AAQF,SAASC,sBAAT,CAAgCC,KAAhC,EAA2D;AAAA,MAEnDC,MAFmD,GAQrDD,KARqD,CAEvDE,EAFuD;AAAA,MAGvDC,UAHuD,GAQrDH,KARqD,CAGvDG,UAHuD;AAAA,MAIvDC,SAJuD,GAQrDJ,KARqD,CAIvDI,SAJuD;AAAA,MAKvDC,UALuD,GAQrDL,KARqD,CAKvDK,UALuD;AAAA,MAMvDC,UANuD,GAQrDN,KARqD,CAMvDM,UANuD;AAAA,MAOpDC,SAPoD,iCAQrDP,KARqD,kEAUzD;;;AACA,MAAMQ,IAAI,GAAG,mBAAb;AACA,MAAMN,EAAE,GAAGD,MAAM,eAAaO,IAA9B;AAEA,MAAMC,OAAO,GAAMP,EAAN,WAAb;AACA,MAAMQ,UAAU,GAAMR,EAAN,cAAhB;AACA,MAAMS,UAAU,GAAMT,EAAN,cAAhB;AAEA;AACF;AACA;AACA;;AArB2D,wBAsBXU,KAAK,CAACC,QAAN,CAAe,KAAf,CAtBW;AAAA,MAsBlDC,eAtBkD;AAAA,MAsBjCC,kBAtBiC;AAwBzD;AACF;AACA;AACA;;;AA3B2D,yBA4BnBH,KAAK,CAACC,QAAN,CAAe,KAAf,CA5BmB;AAAA,MA4BlDG,WA5BkD;AAAA,MA4BrCC,cA5BqC,wBA8BzD;;;AA9ByD,oBA+B3B,wBA/B2B;AAAA,MA+BlDC,SA/BkD;AAAA,MA+BvCC,QA/BuC;;AAiCzD,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,WAAN,CACvB,UAACrB,KAAD,EAAasB,YAAb;AAAA,QAACtB,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAasB,YAAb;AAAaA,MAAAA,YAAb,GAA4B,IAA5B;AAAA;;AAAA;AACEpB,MAAAA,EAAE,EAAES;AADN,OAEKX,KAFL;AAGE;AACN;AACA;AACA;AACMuB,MAAAA,GAAG,EAAE,2BAAUD,YAAV,EAAwB,UAACE,IAAD,EAAU;AACrC,YAAI,CAACA,IAAL,EAAW;AACXP,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OAHI;AAPP;AAAA,GADuB,EAavB,CAACN,UAAD,CAbuB,CAAzB;AAgBA,MAAMc,aAAa,GAAGb,KAAK,CAACS,WAAN,CACpB,UAACrB,KAAD,EAAasB,YAAb;AAAA;;AAAA,QAACtB,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAasB,YAAb;AAAaA,MAAAA,YAAb,GAA4B,IAA5B;AAAA;;AAAA,wBACKtB,KADL;AAEEuB,MAAAA,GAAG,EAAED,YAFP;AAGE,oBAAc,qBAASJ,SAAT,CAHhB;AAIE,uBAAiB,qBAASb,UAAT,CAJnB;AAKE,sBAAgB,qBAASD,SAAT,CALlB;AAME,uBAAiB,qBAASE,UAAT,CANnB;AAOEJ,MAAAA,EAAE,eAAEF,KAAK,CAACE,EAAR,wBAAcO,OAPlB;AAQEiB,MAAAA,OAAO,oBAAE1B,KAAK,CAAC0B,OAAR,6BAAmBxB;AAR5B;AAAA,GADoB,EAWpB,CAACA,EAAD,EAAKG,UAAL,EAAiBa,SAAjB,EAA4Bd,SAA5B,EAAuCE,UAAvC,EAAmDG,OAAnD,CAXoB,CAAtB;AAcA,MAAMkB,oBAAoB,GAAGf,KAAK,CAACS,WAAN,CAC3B,UAACrB,KAAD,EAAasB,YAAb;AAAA,QAACtB,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAasB,YAAb;AAAaA,MAAAA,YAAb,GAA4B,IAA5B;AAAA;;AAAA;AACEpB,MAAAA,EAAE,EAAEQ;AADN,OAEKV,KAFL;AAGE;AACN;AACA;AACA;AACMuB,MAAAA,GAAG,EAAE,2BAAUD,YAAV,EAAwB,UAACE,IAAD,EAAU;AACrC,YAAI,CAACA,IAAL,EAAW;AACXT,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,OAHI,CAPP;AAWE,mBAAa;AAXf;AAAA,GAD2B,EAc3B,CAACL,UAAD,CAd2B,CAA7B;AAiBA,MAAMkB,YAAY,GAAGhB,KAAK,CAACS,WAAN,CACnB,UAACrB,KAAD,EAAasB,YAAb;AAAA,QAACtB,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAasB,YAAb;AAAaA,MAAAA,YAAb,GAA4B,IAA5B;AAAA;;AAAA,wBACKtB,KADL,EAEKO,SAFL;AAGEgB,MAAAA,GAAG,EAAED,YAHP;AAIEO,MAAAA,IAAI,EAAE;AAJR;AAAA,GADmB,EAOnB,CAACtB,SAAD,CAPmB,CAArB;AAUA,MAAMuB,yBAAyB,GAAGlB,KAAK,CAACS,WAAN,CAChC,UAACrB,KAAD,EAAasB,YAAb;AAAA,QAACtB,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAasB,YAAb;AAAaA,MAAAA,YAAb,GAA4B,IAA5B;AAAA;;AAAA,wBACKtB,KADL;AAEEuB,MAAAA,GAAG,EAAED,YAFP;AAGEO,MAAAA,IAAI,EAAE,cAHR;AAIE,qBAAe,IAJjB;AAKEE,MAAAA,QAAQ,EAAE/B,KAAK,CAAC+B,QAAN,IAAkB;AAL9B;AAAA,GADgC,EAQhC,EARgC,CAAlC;AAWA,SAAO;AACL5B,IAAAA,UAAU,EAAE,CAAC,CAACA,UADT;AAELC,IAAAA,SAAS,EAAE,CAAC,CAACA,SAFR;AAGLE,IAAAA,UAAU,EAAE,CAAC,CAACA,UAHT;AAILD,IAAAA,UAAU,EAAE,CAAC,CAACA,UAJT;AAKLa,IAAAA,SAAS,EAAE,CAAC,CAACA,SALR;AAMLc,IAAAA,OAAO,EAAEb,QAAQ,CAACc,EANb;AAOLC,IAAAA,MAAM,EAAEf,QAAQ,CAACgB,GAPZ;AAQLrB,IAAAA,eAAe,EAAfA,eARK;AASLC,IAAAA,kBAAkB,EAAlBA,kBATK;AAULC,IAAAA,WAAW,EAAXA,WAVK;AAWLC,IAAAA,cAAc,EAAdA,cAXK;AAYLf,IAAAA,EAAE,EAAFA,EAZK;AAaLO,IAAAA,OAAO,EAAPA,OAbK;AAcLC,IAAAA,UAAU,EAAVA,UAdK;AAeLC,IAAAA,UAAU,EAAVA,UAfK;AAgBLJ,IAAAA,SAAS,EAATA,SAhBK;AAiBLa,IAAAA,gBAAgB,EAAhBA,gBAjBK;AAkBLO,IAAAA,oBAAoB,EAApBA,oBAlBK;AAmBLC,IAAAA,YAAY,EAAZA,YAnBK;AAoBLH,IAAAA,aAAa,EAAbA,aApBK;AAqBLK,IAAAA,yBAAyB,EAAzBA;AArBK,GAAP;AAuBD;;AAOD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMM,WAAW,gBAAG,wBAAoC,UAACpC,KAAD,EAAQuB,GAAR,EAAgB;AAC7E,MAAMc,MAAM,GAAG,iCAAoB,MAApB,EAA4BrC,KAA5B,CAAf;AACA,MAAMsC,QAAQ,GAAG,8BAAiBtC,KAAjB,CAAjB;;AAF6E,8BAG1BD,sBAAsB,CACvEuC,QADuE,CAHI;AAAA,MAGrEV,YAHqE,yBAGrEA,YAHqE;AAAA,MAG5CW,CAH4C,yBAGvDhC,SAHuD;AAAA,MAGtCiC,OAHsC;;AAO7E,MAAMC,SAAS,GAAG,eAAG,qBAAH,EAA0BzC,KAAK,CAACyC,SAAhC,CAAlB;AACA,MAAMC,YAAY,GAAG9B,KAAK,CAAC+B,OAAN,CAAc;AAAA,WAAMH,OAAN;AAAA,GAAd,EAA6B,CAACA,OAAD,CAA7B,CAArB;AAEA,sBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEE;AAA5B,kBACE,oBAAC,sBAAD;AAAgB,IAAA,KAAK,EAAEL;AAAvB,kBACE,oBAAC,cAAD,CAAQ,GAAR,eACMT,YAAY,CAAC,EAAD,EAAKL,GAAL,CADlB;AAEE,IAAA,SAAS,EAAEkB,SAFb;AAGE,IAAA,KAAK,EAAEJ,MAAM,CAAC,WAAD;AAHf,KADF,CADF,CADF;AAWD,CArB0B,CAApB;;;AAuBP,IAAIO,cAAJ,EAAa;AACXR,EAAAA,WAAW,CAACS,WAAZ,GAA0B,aAA1B;AACD;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,cAAc,gBAAG,wBAAiC,UAAC9C,KAAD,EAAQuB,GAAR,EAAgB;AAC7E,MAAMwB,KAAK,GAAGjD,qBAAqB,EAAnC;AACA,MAAMuC,MAAM,GAAG,wBAAf;AACA,MAAMI,SAAS,GAAG,eAAG,0BAAH,EAA+BzC,KAAK,CAACyC,SAArC,CAAlB;AACA,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACMM,KADN,oBACMA,KAAK,CAAE3B,gBAAP,CAAwBpB,KAAxB,EAA+BuB,GAA/B,CADN;AAEE,IAAA,KAAK,EAAEc,MAAM,CAACW,UAFhB;AAGE,IAAA,SAAS,EAAEP;AAHb,KADF;AAOD,CAX6B,CAAvB;;;AAaP,IAAIG,cAAJ,EAAa;AACXE,EAAAA,cAAc,CAACD,WAAf,GAA6B,gBAA7B;AACD","sourcesContent":["import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  mergeRefs,\n  PropGetter,\n  PropGetterV2,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = React.useCallback<PropGetterV2<\"label\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id ?? labelId,\n      htmlFor: props.htmlFor ?? id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = React.useCallback<PropGetterV2<\"div\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={styles[\"container\"]}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"],"file":"form-control.js"}