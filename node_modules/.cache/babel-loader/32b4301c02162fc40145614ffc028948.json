{"ast":null,"code":"import { isFunction } from \"@chakra-ui/utils\";\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\n\nexport function assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\n\nexport function mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      return assignRef(ref, node);\n    });\n  };\n}","map":{"version":3,"sources":["../../src/refs.ts"],"names":["ref","isFunction","refs","node","assignRef"],"mappings":"AAAA,SAAA,UAAA,QAAA,kBAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAoE;AACzE,MAAIA,GAAG,IAAP,IAAA,EAAiB;;AAEjB,MAAIC,UAAU,CAAd,GAAc,CAAd,EAAqB;AACnBD,IAAAA,GAAG,CAAHA,KAAG,CAAHA;AACA;AACD;;AAED,MAAI;AACF;AACAA,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AAFF,GAAA,CAGE,OAAA,KAAA,EAAc;AACd,UAAM,IAAA,KAAA,CAAA,0BAAA,KAAA,GAAA,YAAA,GAAA,GAAA,GAAN,GAAM,CAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,SAAA,GAA4D;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnCE,IAAmC,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAnCA,IAAAA,IAAmC,CAAA,IAAA,CAAnCA,GAAmC,SAAA,CAAA,IAAA,CAAnCA;AAAmC;;AACjE,SAAQC,UAAAA,IAAD,EAAoB;AACzBD,IAAAA,IAAI,CAAJA,OAAAA,CAAcF,UAAAA,GAAD;AAAA,aAASI,SAAS,CAAA,GAAA,EAA/BF,IAA+B,CAAlB;AAAA,KAAbA;AADF,GAAA;AAGD","sourcesContent":["import { isFunction } from \"@chakra-ui/utils\"\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}