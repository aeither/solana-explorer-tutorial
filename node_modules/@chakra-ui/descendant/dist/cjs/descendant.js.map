{"version":3,"sources":["../../src/descendant.ts"],"names":["DescendantsManager","Map","nodeOrOptions","registerNode","node","descendants","sorted","Array","from","keys","assignIndex","clear","forEach","descendant","index","indexOf","dataset","toString","size","enabledValues","length","values","sort","a","b","filter","disabled","count","undefined","enabledCount","item","enabledItem","lastIndex","get","findIndex","i","isSameNode","loop","next","enabledIndex","enabledIndexOf","nextEnabledIndex","prev","prevEnabledIndex","options","has","concat","set"],"mappings":"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","sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {}\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset.index = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"],"file":"descendant.js"}