{"version":3,"sources":["../../src/use-descendant.ts"],"names":["useDescendants","DescendantsManager","descendants","destroy","name","errorMessage","DescendantsContextProvider","useDescendantsContext","useDescendant","options","index","setIndex","ref","current","unregister","dataIndex","Number","dataset","isNaN","refCallback","register","enabledIndex","enabledIndexOf","createDescendantContext","ContextProvider","_useDescendantsContext","_useDescendant","_useDescendants"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,cAAT,GAAuE;AAAA,kBAC/C,qBAAS;AAAA,WAAM,IAAIC,8BAAJ,EAAN;AAAA,GAAT,CAD+C;AAAA,MAC9DC,WAD8D;;AAErE,kCAAoB,YAAM;AACxB,WAAO;AAAA,aAAMA,WAAW,CAACC,OAAZ,EAAN;AAAA,KAAP;AACD,GAFD;AAGA,SAAOD,WAAP;AACD;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;qBAKI,+BAAoC;AACtCE,EAAAA,IAAI,EAAE,qBADgC;AAEtCC,EAAAA,YAAY,EAAE;AAFwB,CAApC,C;IAFFC,0B;IACAC,qB;AAMF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CACEC,OADF,EAEE;AACA,MAAMP,WAAW,GAAGK,qBAAqB,EAAzC;;AADA,mBAE0B,qBAAS,CAAC,CAAV,CAF1B;AAAA,MAEOG,KAFP;AAAA,MAEcC,QAFd;;AAGA,MAAMC,GAAG,GAAG,mBAAU,IAAV,CAAZ;AAEA,kCAAoB,YAAM;AACxB,WAAO,YAAM;AACX,UAAI,CAACA,GAAG,CAACC,OAAT,EAAkB;AAClBX,MAAAA,WAAW,CAACY,UAAZ,CAAuBF,GAAG,CAACC,OAA3B;AACD,KAHD;AAID,GALD,EAKG,EALH;AAOA,kCAAoB,YAAM;AACxB,QAAI,CAACD,GAAG,CAACC,OAAT,EAAkB;AAClB,QAAME,SAAS,GAAGC,MAAM,CAACJ,GAAG,CAACC,OAAJ,CAAYI,OAAZ,CAAoBP,KAArB,CAAxB;;AACA,QAAIA,KAAK,IAAIK,SAAT,IAAsB,CAACC,MAAM,CAACE,KAAP,CAAaH,SAAb,CAA3B,EAAoD;AAClDJ,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACD;AACF,GAND;AAQA,MAAMI,WAAW,GAAGV,OAAO,GACvB,iBAAqBP,WAAW,CAACkB,QAAZ,CAAqBX,OAArB,CAArB,CADuB,GAEvB,iBAAqBP,WAAW,CAACkB,QAAjC,CAFJ;AAIA,SAAO;AACLlB,IAAAA,WAAW,EAAXA,WADK;AAELQ,IAAAA,KAAK,EAALA,KAFK;AAGLW,IAAAA,YAAY,EAAEnB,WAAW,CAACoB,cAAZ,CAA2BV,GAAG,CAACC,OAA/B,CAHT;AAILO,IAAAA,QAAQ,EAAE,2BAAUD,WAAV,EAAuBP,GAAvB;AAJL,GAAP;AAMD;AAED;AACA;AACA;AACA;;;AAEO,SAASW,uBAAT,GAGH;AAEF,MAAMC,eAAe,GAAG,iBAA0BlB,0BAA1B,CAAxB;;AAEA,MAAMmB,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,WAC7B,iBAA+BlB,qBAAqB,EAApD,CAD6B;AAAA,GAA/B;;AAGA,MAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACjB,OAAD;AAAA,WACrBD,aAAa,CAAOC,OAAP,CADQ;AAAA,GAAvB;;AAGA,MAAMkB,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAM3B,cAAc,EAApB;AAAA,GAAxB;;AAEA,SAAO,CACL;AACAwB,EAAAA,eAFK,EAGL;AACAC,EAAAA,sBAJK,EAKL;AACAE,EAAAA,eANK,EAOL;AACAD,EAAAA,cARK,CAAP;AAUD","sourcesContent":["import { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport { RefCallback, useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<T extends HTMLElement = HTMLElement, K = {}>() {\n  const [descendants] = useState(() => new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.destroy()\n  })\n  return descendants\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [\n  DescendantsContextProvider,\n  useDescendantsContext,\n] = createContext<UseDescendantsReturn>({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\",\n})\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<T extends HTMLElement = HTMLElement, K = {}>(\n  options?: DescendantOptions<K>,\n) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset.index)\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<RefCallback<T>>(descendants.register(options))\n    : cast<RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K = {}\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"],"file":"use-descendant.js"}