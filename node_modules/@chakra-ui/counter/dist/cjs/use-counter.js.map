{"version":3,"sources":["../../src/use-counter.ts"],"names":["useCounter","props","onChange","precisionProp","precision","defaultValue","valueProp","value","step","stepProp","min","minSafeInteger","max","maxSafeInteger","keepWithinRange","onChangeProp","cast","valueState","setValue","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","Number","isNaN","undefined"],"mappings":"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","sourcesContent":["import { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  toPrecision,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"],"file":"use-counter.js"}