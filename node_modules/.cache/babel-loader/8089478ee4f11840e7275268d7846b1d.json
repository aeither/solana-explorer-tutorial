{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nexport var InputGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _child$props, _child$props2;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}","map":{"version":3,"sources":["../../src/input-group.tsx"],"names":["InputGroup","forwardRef","styles","useMultiStyleConfig","className","omitThemingProps","_className","cx","groupStyles","validChildren","getValidChildren","input","child","clones","theming","size","props","variant","React","Object","width","display","position"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(\n          child,\n          Object.assign(theming, groupStyles, child.props),\n        )\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}