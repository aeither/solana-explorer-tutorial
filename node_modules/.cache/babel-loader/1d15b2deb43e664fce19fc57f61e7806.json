{"ast":null,"code":"import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.js';\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\n\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(function (instance) {\n    var _a;\n\n    instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\n\n    if (visualElement) {\n      instance ? visualElement.mount(instance) : visualElement.unmount();\n    }\n\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Only pass a new ref callback to React if we've received a visual element\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\n   * or other dependencies change.\n   */\n  [visualElement]);\n}\n\nexport { useMotionRef };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js"],"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","_a","mount","call","unmount","current"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,aAAnC,EAAkDC,WAAlD,EAA+D;AAC3D,SAAOL,WAAW,CAAC,UAAUM,QAAV,EAAoB;AACnC,QAAIC,EAAJ;;AACAD,IAAAA,QAAQ,KAAK,CAACC,EAAE,GAAGJ,WAAW,CAACK,KAAlB,MAA6B,IAA7B,IAAqCD,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACE,IAAH,CAAQN,WAAR,EAAqBG,QAArB,CAAnE,CAAR;;AACA,QAAIF,aAAJ,EAAmB;AACfE,MAAAA,QAAQ,GACFF,aAAa,CAACI,KAAd,CAAoBF,QAApB,CADE,GAEFF,aAAa,CAACM,OAAd,EAFN;AAGH;;AACD,QAAIL,WAAJ,EAAiB;AACb,UAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;AACnCA,QAAAA,WAAW,CAACC,QAAD,CAAX;AACH,OAFD,MAGK,IAAIL,WAAW,CAACI,WAAD,CAAf,EAA8B;AAC/BA,QAAAA,WAAW,CAACM,OAAZ,GAAsBL,QAAtB;AACH;AACJ;AACJ,GAhBiB;AAiBlB;AACJ;AACA;AACA;AACA;AACI,GAACF,aAAD,CAtBkB,CAAlB;AAuBH;;AAED,SAASF,YAAT","sourcesContent":["import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.js';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback(function (instance) {\n        var _a;\n        instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n"]},"metadata":{},"sourceType":"module"}