{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["useTheme","arrayToObjectNotation","fromEntries","isArray","getClosestValue","useBreakpoint","useBreakpointValue","values","defaultBreakpoint","breakpoint","theme","undefined","breakpoints","Object","keys","obj","entries","map","key","value"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,qBAAT,EAAgCC,WAAhC,EAA6CC,OAA7C,QAA4D,kBAA5D;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CACLC,MADK,EAELC,iBAFK,EAGU;AACf,MAAMC,UAAU,GAAGJ,aAAa,CAACG,iBAAD,CAAhC;AACA,MAAME,KAAK,GAAGV,QAAQ,EAAtB;AAEA,MAAI,CAACS,UAAL,EAAiB,OAAOE,SAAP;AAEjB;AACF;AACA;;AACE,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACE,WAAlB,CAApB;AAEA,MAAMG,GAAG,GAAGZ,OAAO,CAACI,MAAD,CAAP,GACRL,WAAW,CACTW,MAAM,CAACG,OAAP,CACEf,qBAAqB,CAACM,MAAD,EAASK,WAAT,CADvB,EAEEK,GAFF,CAEM;AAAA,QAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;AAAA,WAAkB,CAACD,GAAD,EAAMC,KAAN,CAAlB;AAAA,GAFN,CADS,CADH,GAMRZ,MANJ;AAQA,SAAOH,eAAe,CAACW,GAAD,EAAMN,UAAN,EAAkBG,WAAlB,CAAtB;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { arrayToObjectNotation, fromEntries, isArray } from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n  defaultBreakpoint?: string,\n): T | undefined {\n  const breakpoint = useBreakpoint(defaultBreakpoint)\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"],"file":"use-breakpoint-value.js"}