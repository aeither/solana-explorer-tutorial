{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\n\nexport var Checkbox = /*#__PURE__*/forwardRef(function (props, ref) {\n  var group = useCheckboxGroupContext();\n\n  var mergedProps = _extends({}, group, props);\n\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n\n  var _ownProps$spacing = ownProps.spacing,\n      spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n      className = ownProps.className,\n      children = ownProps.children,\n      iconColor = ownProps.iconColor,\n      iconSize = ownProps.iconSize,\n      _ownProps$icon = ownProps.icon,\n      icon = _ownProps$icon === void 0 ? /*#__PURE__*/React.createElement(CheckboxIcon, null) : _ownProps$icon,\n      isCheckedProp = ownProps.isChecked,\n      _ownProps$isDisabled = ownProps.isDisabled,\n      isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n      onChangeProp = ownProps.onChange,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\"]);\n\n  var isChecked = isCheckedProp;\n\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var _useCheckbox = useCheckbox(_extends({}, rest, {\n    isDisabled: isDisabled,\n    isChecked: isChecked,\n    onChange: onChange\n  })),\n      state = _useCheckbox.state,\n      getInputProps = _useCheckbox.getInputProps,\n      getCheckboxProps = _useCheckbox.getCheckboxProps,\n      getLabelProps = _useCheckbox.getLabelProps,\n      getRootProps = _useCheckbox.getRootProps;\n\n  var iconStyles = React.useMemo(function () {\n    return _extends({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  var clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    __css: styles.container,\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(CheckboxControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"sources":["../../src/checkbox.tsx"],"names":["CheckboxControl","chakra","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","forwardRef","group","useCheckboxGroupContext","mergedProps","styles","useMultiStyleConfig","ownProps","omitThemingProps","spacing","icon","isChecked","isDisabled","onChange","onChangeProp","callAll","getRootProps","useCheckbox","iconStyles","opacity","state","transform","fontSize","color","iconColor","clonedIcon","__css","isIndeterminate","cx","getInputProps","getCheckboxProps","children","getLabelProps","marginStart"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"]},"metadata":{},"sourceType":"module"}