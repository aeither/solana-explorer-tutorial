{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { analyzeBreakpoints } from \"@chakra-ui/utils\";\nimport { createThemeVars } from \"./create-theme-vars\";\nimport { extractTokens, omitVars } from \"./theme-tokens\";\nexport function toCSSVar(rawTheme) {\n  var _theme$config;\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n\n\n  var theme = omitVars(rawTheme); // omit components and breakpoints from css variable map\n\n  var tokens = extractTokens(theme);\n  var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;\n\n  var _createThemeVars = createThemeVars(tokens, {\n    cssVarPrefix: cssVarPrefix\n  }),\n      cssMap = _createThemeVars.cssMap,\n      cssVars = _createThemeVars.cssVars;\n\n  var defaultCssVars = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: _extends({}, defaultCssVars, cssVars),\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}","map":{"version":3,"sources":["../../../src/create-theme-vars/to-css-var.ts"],"names":["theme","omitVars","tokens","extractTokens","cssVarPrefix","cssVars","createThemeVars","defaultCssVars","Object","__cssVars","__cssMap","__breakpoints","analyzeBreakpoints"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,kBAAA;AAEA,SAAA,eAAA,QAAA,qBAAA;AACA,SAAA,aAAA,EAAA,QAAA,QAAA,gBAAA;AAEA,OAAO,SAAA,QAAA,CAAA,QAAA,EAA+C;AAAA,MAAA,aAAA;AACpD;AACF;AACA;AACA;;;AACE,MAAMA,KAAK,GAAGC,QAAQ,CAL8B,QAK9B,CAAtB,CALoD,CAOpD;;AACA,MAAMC,MAAM,GAAGC,aAAa,CAA5B,KAA4B,CAA5B;AAEA,MAAMC,YAAY,GAAA,CAAA,aAAA,GAAGJ,KAAK,CAAR,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,aAAAA,CAArB,YAAA;;AAEA,yBAWIM,eAAe,CAAA,MAAA,EAAS;AAAEF,IAAAA,YAAAA,EAAAA;AAAF,GAAT,CAXnB;AAAA,MAAM,MAAN,oBAAM,MAAN;AAAA,MAUEC,OAVF,oBAUEA,OAVF;;AAaA,MAAME,cAAoB,GAAG;AAC3B,2BAD2B,iCAAA;AAE3B,kCAF2B,KAAA;AAG3B,kCAH2B,MAAA;AAI3B,2BAJ2B,yBAAA;AAK3B,mCAL2B,WAAA;AAM3B,4BAN2B,WAAA;AAO3B,gCAP2B,GAAA;AAQ3B,gCAA4B;AARD,GAA7B;AAWAC,EAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqB;AACnBC,IAAAA,SAAS,EAAA,QAAA,CAAA,EAAA,EAAA,cAAA,EADU,OACV,CADU;AAEnBC,IAAAA,QAAQ,EAFW,MAAA;AAGnBC,IAAAA,aAAa,EAAEC,kBAAkB,CAACZ,KAAK,CAAN,WAAA;AAHd,GAArBQ;AAMA,SAAA,KAAA;AACD","sourcesContent":["import { analyzeBreakpoints, Dict } from \"@chakra-ui/utils\"\nimport type { WithCSSVar } from \"../utils/types\"\nimport { createThemeVars } from \"./create-theme-vars\"\nimport { extractTokens, omitVars } from \"./theme-tokens\"\n\nexport function toCSSVar<T extends Dict>(rawTheme: T) {\n  /**\n   * In the case the theme has already been converted to css-var (e.g extending the theme),\n   * we can omit the computed css vars and recompute it for the extended theme.\n   */\n  const theme = omitVars(rawTheme)\n\n  // omit components and breakpoints from css variable map\n  const tokens = extractTokens(theme)\n\n  const cssVarPrefix = theme.config?.cssVarPrefix\n\n  const {\n    /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */\n    cssMap,\n    /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */\n    cssVars,\n  } = createThemeVars(tokens, { cssVarPrefix })\n\n  const defaultCssVars: Dict = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\",\n  }\n\n  Object.assign(theme, {\n    __cssVars: { ...defaultCssVars, ...cssVars },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints),\n  })\n\n  return theme as WithCSSVar<T>\n}\n"]},"metadata":{},"sourceType":"module"}