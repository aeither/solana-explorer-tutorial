{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useBoolean","useCallbackRef","useControllableProp","useSafeLayoutEffect","mergeRefs","callAllHandlers","dataAttr","focus","warn","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","defaultChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","onBlur","onFocus","ariaLabel","ariaLabelledBy","ariaInvalid","ariaDescribedBy","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","node","tagName","onClick","click","nextTick","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n    }),\n    [htmlProps, isDisabled, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"file":"use-checkbox.js"}