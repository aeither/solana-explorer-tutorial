{"version":3,"sources":["../../src/use-focus-on-pointerdown.ts"],"names":["useFocusOnPointerDown","props","ref","elements","enabled","isSafari","doc","current","event","target","els","isValidTarget","some","elementOrRef","el","preventDefault"],"mappings":";;;;;AAAA;;AASA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,qBAAT,CAA+BC,KAA/B,EAAgE;AAAA,MAC7DC,GAD6D,GAClCD,KADkC,CAC7DC,GAD6D;AAAA,MACxDC,QADwD,GAClCF,KADkC,CACxDE,QADwD;AAAA,MAC9CC,OAD8C,GAClCH,KADkC,CAC9CG,OAD8C;AAGrE,MAAMC,QAAQ,GAAG,0BAAc,QAAd,CAAjB;;AACA,MAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,WAAM,6BAAiBJ,GAAG,CAACK,OAArB,CAAN;AAAA,GAAZ;;AAEA,wCAAgBD,GAAhB,EAAqB,aAArB,EAAoC,UAACE,KAAD,EAAW;AAC7C,QAAI,CAACH,QAAD,IAAa,CAACD,OAAlB,EAA2B;AAC3B,QAAMK,MAAM,GAAGD,KAAK,CAACC,MAArB;AAEA,QAAMC,GAAG,GAAGP,QAAH,WAAGA,QAAH,GAAe,CAACD,GAAD,CAAxB;AACA,QAAMS,aAAa,GAAGD,GAAG,CAACE,IAAJ,CAAS,UAACC,YAAD,EAAkB;AAC/C,UAAMC,EAAE,GAAG,wBAAYD,YAAZ,IAA4BA,YAAY,CAACN,OAAzC,GAAmDM,YAA9D;AACA,aAAO,qBAASC,EAAT,EAAaL,MAAb,CAAP;AACD,KAHqB,CAAtB;;AAKA,QAAI,CAAC,4BAAgBA,MAAhB,CAAD,IAA4BE,aAAhC,EAA+C;AAC7CH,MAAAA,KAAK,CAACO,cAAN;AACA,wBAAMN,MAAN;AACD;AACF,GAdD;AAeD","sourcesContent":["import {\n  contains,\n  detectBrowser,\n  focus,\n  getOwnerDocument,\n  isActiveElement,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: RefObject<HTMLElement>\n  elements?: Array<RefObject<HTMLElement> | HTMLElement | null>\n}\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const isSafari = detectBrowser(\"Safari\")\n  const doc = () => getOwnerDocument(ref.current)\n\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return contains(el, target)\n    })\n\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault()\n      focus(target)\n    }\n  })\n}\n"],"file":"use-focus-on-pointerdown.js"}