{"ast":null,"code":"import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\";\nimport themeSizes from \"../foundations/sizes\";\n\nvar baseStyleBadge = function baseStyleBadge(props) {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props)\n  };\n};\n\nvar baseStyleExcessLabel = function baseStyleExcessLabel(props) {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props)\n  };\n};\n\nvar baseStyleContainer = function baseStyleContainer(props) {\n  var name = props.name,\n      theme = props.theme;\n  var bg = name ? randomColor({\n    string: name\n  }) : \"gray.400\";\n  var isBgDark = isDark(bg)(theme);\n  var color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  var borderColor = mode(\"white\", \"gray.800\")(props);\n  return {\n    bg: bg,\n    color: color,\n    borderColor: borderColor,\n    verticalAlign: \"top\"\n  };\n};\n\nvar baseStyle = function baseStyle(props) {\n  return {\n    badge: baseStyleBadge(props),\n    excessLabel: baseStyleExcessLabel(props),\n    container: baseStyleContainer(props)\n  };\n};\n\nfunction getSize(size) {\n  var themeSize = themeSizes[size];\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: \"calc(\" + (themeSize != null ? themeSize : size) + \" / 2.5)\"\n    },\n    excessLabel: {\n      width: size,\n      height: size\n    },\n    label: {\n      fontSize: \"calc(\" + (themeSize != null ? themeSize : size) + \" / 2.5)\",\n      lineHeight: size !== \"100%\" ? themeSize != null ? themeSize : size : undefined\n    }\n  };\n}\n\nvar sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\")\n};\nvar defaultProps = {\n  size: \"md\"\n};\nexport default {\n  parts: parts.keys,\n  baseStyle: baseStyle,\n  sizes: sizes,\n  defaultProps: defaultProps\n};","map":{"version":3,"sources":["../../../src/components/avatar.ts"],"names":["avatarAnatomy","baseStyleBadge","props","transform","borderRadius","border","borderColor","mode","baseStyleExcessLabel","bg","baseStyleContainer","theme","name","randomColor","string","isBgDark","isDark","color","verticalAlign","baseStyle","badge","excessLabel","container","themeSize","themeSizes","width","height","fontSize","size","label","lineHeight","undefined","sizes","getSize","xs","sm","md","lg","xl","full","defaultProps","parts"],"mappings":"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","sourcesContent":["import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\"\nimport type {\n  PartsStyleFunction,\n  PartsStyleObject,\n  SystemStyleFunction,\n} from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\n\nconst baseStyleBadge: SystemStyleFunction = (props) => {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props),\n  }\n}\n\nconst baseStyleExcessLabel: SystemStyleFunction = (props) => {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props),\n  }\n}\n\nconst baseStyleContainer: SystemStyleFunction = (props) => {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  const borderColor = mode(\"white\", \"gray.800\")(props)\n\n  return {\n    bg,\n    color,\n    borderColor,\n    verticalAlign: \"top\",\n  }\n}\n\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\n  badge: baseStyleBadge(props),\n  excessLabel: baseStyleExcessLabel(props),\n  container: baseStyleContainer(props),\n})\n\nfunction getSize(size: string): PartsStyleObject<typeof parts> {\n  const themeSize = themeSizes[size]\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      width: size,\n      height: size,\n    },\n    label: {\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n      lineHeight: size !== \"100%\" ? themeSize ?? size : undefined,\n    },\n  }\n}\n\nconst sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\"),\n}\n\nconst defaultProps = {\n  size: \"md\",\n}\n\nexport default {\n  parts: parts.keys,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"]},"metadata":{},"sourceType":"module"}