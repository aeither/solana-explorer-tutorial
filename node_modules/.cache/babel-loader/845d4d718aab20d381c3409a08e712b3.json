{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/lin/Documents/Projects/solana-explorer-tutorial/src/SearchResult/HistoryCard.tsx\",\n    _s = $RefreshSig$();\n\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport Moment from \"react-moment\";\nimport { Table, Tbody, Tr, Td, Heading, VStack } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar MAX_TRANSACTION_BATCH_SIZE = 10;\n\nfunction fetchParsedTransactions(_x, _x2) {\n  return _fetchParsedTransactions.apply(this, arguments);\n}\n\nfunction _fetchParsedTransactions() {\n  _fetchParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, transactionSignatures) {\n    var transactionMap, connection, _loop;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            transactionMap = new Map();\n            connection = new Connection(url);\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var signatures, fetched;\n              return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      signatures = transactionSignatures.splice(0, MAX_TRANSACTION_BATCH_SIZE);\n                      _context2.next = 3;\n                      return connection.getParsedConfirmedTransactions(signatures);\n\n                    case 3:\n                      fetched = _context2.sent;\n                      fetched.forEach(function (parsed, index) {\n                        if (parsed !== null) {\n                          transactionMap.set(signatures[index], parsed);\n                        }\n                      });\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n\n          case 3:\n            if (!(transactionSignatures.length > 0)) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(), \"t0\", 5);\n\n          case 5:\n            _context3.next = 3;\n            break;\n\n          case 7:\n            return _context3.abrupt(\"return\", transactionMap);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchParsedTransactions.apply(this, arguments);\n}\n\nexport default function HistoryCard(_ref) {\n  _s();\n\n  var _this = this;\n\n  var pubkey = _ref.pubkey;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      history = _useState2[0],\n      setHistory = _useState2[1];\n\n  useEffect(function () {\n    getHistory();\n  });\n\n  function getHistory() {\n    return _getHistory.apply(this, arguments);\n  }\n\n  function _getHistory() {\n    _getHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, connection, options, fetched;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Hello\");\n              url = clusterApiUrl(\"devnet\").replace(\"api\", \"explorer-api\");\n              connection = new Connection(url);\n              options = {\n                limit: 25\n              };\n              _context.next = 6;\n              return connection.getConfirmedSignaturesForAddress2(pubkey, options);\n\n            case 6:\n              fetched = _context.sent;\n              // let transactionMap;\n              // if (fetched) {\n              //   try {\n              //     const signatures = fetched.map((signature) => signature.signature);\n              //     transactionMap = await fetchParsedTransactions(url, signatures);\n              //   } catch (error) {\n              //     console.log(error);\n              //   }\n              // }\n              setHistory({\n                fetched: fetched\n              });\n              console.log(fetched); // console.log(transactionMap);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getHistory.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    my: \"2\",\n    w: \"100%\",\n    align: \"start\",\n    background: \"white\",\n    rounded: \"lg\",\n    p: \"4\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      size: \"md\",\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), (history === null || history === void 0 ? void 0 : history.fetched) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        variant: \"simple\",\n        children: /*#__PURE__*/_jsxDEV(Tbody, {\n          children: history.fetched.map(function (item, i) {\n            return /*#__PURE__*/_jsxDEV(Tr, {\n              children: [/*#__PURE__*/_jsxDEV(Td, {\n                children: item.signature\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(Td, {\n                children: item.slot\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(Td, {\n                isNumeric: true,\n                children: [\" \", (item === null || item === void 0 ? void 0 : item.blockTime) ? /*#__PURE__*/_jsxDEV(Moment, {\n                  date: item.blockTime * 1000,\n                  fromNow: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, _this) : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, _this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), history.fetched.map(function (item, i) {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.signature\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.slot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (item === null || item === void 0 ? void 0 : item.blockTime) ? /*#__PURE__*/_jsxDEV(Moment, {\n              date: item.blockTime * 1000,\n              fromNow: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, _this) : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (item === null || item === void 0 ? void 0 : item.err) ? \"Failed\" : \"Success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (item === null || item === void 0 ? void 0 : item.memo) ? item.memo : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, _this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, _this);\n      })]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No History \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HistoryCard, \"m2zlKD6z2d5JHwcHk/9BlD37tsE=\");\n\n_c = HistoryCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoryCard\");","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/src/SearchResult/HistoryCard.tsx"],"names":["Connection","clusterApiUrl","useEffect","useState","Moment","Table","Tbody","Tr","Td","Heading","VStack","MAX_TRANSACTION_BATCH_SIZE","fetchParsedTransactions","url","transactionSignatures","transactionMap","Map","connection","signatures","splice","getParsedConfirmedTransactions","fetched","forEach","parsed","index","set","length","HistoryCard","pubkey","history","setHistory","getHistory","console","log","replace","options","limit","getConfirmedSignaturesForAddress2","map","item","i","signature","slot","blockTime","err","memo"],"mappings":"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","sourcesContent":["import {\n  Connection,\n  clusterApiUrl,\n  PublicKey,\n  ParsedConfirmedTransaction,\n  ConfirmedSignatureInfo,\n} from \"@solana/web3.js\";\nimport { useEffect, useState, useMemo } from \"react\";\nimport Moment from \"react-moment\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  Heading,\n  VStack,\n} from \"@chakra-ui/react\";\n\nexport type History = {\n  fetched: ConfirmedSignatureInfo[];\n  // transactionMap?: Map<any, any>;\n};\n\nconst MAX_TRANSACTION_BATCH_SIZE = 10;\n\nasync function fetchParsedTransactions(\n  url: string,\n  transactionSignatures: string[]\n) {\n  const transactionMap = new Map();\n  const connection = new Connection(url);\n\n  while (transactionSignatures.length > 0) {\n    const signatures = transactionSignatures.splice(\n      0,\n      MAX_TRANSACTION_BATCH_SIZE\n    );\n    const fetched = await connection.getParsedConfirmedTransactions(signatures);\n    fetched.forEach(\n      (parsed: ParsedConfirmedTransaction | null, index: number) => {\n        if (parsed !== null) {\n          transactionMap.set(signatures[index], parsed);\n        }\n      }\n    );\n  }\n\n  return transactionMap;\n}\n\nexport default function HistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const [history, setHistory] = useState<History>();\n  useEffect(() => {\n    getHistory();\n  });\n\n  async function getHistory() {\n    console.log(\"Hello\");\n    const url = clusterApiUrl(\"devnet\").replace(\"api\", \"explorer-api\");\n    const connection = new Connection(url);\n    const options = {\n      limit: 25,\n    };\n    const fetched = await connection.getConfirmedSignaturesForAddress2(\n      pubkey,\n      options\n    );\n\n    // let transactionMap;\n    // if (fetched) {\n    //   try {\n    //     const signatures = fetched.map((signature) => signature.signature);\n    //     transactionMap = await fetchParsedTransactions(url, signatures);\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    // }\n    setHistory({ fetched });\n    console.log(fetched);\n    // console.log(transactionMap);\n  }\n\n  return (\n    <VStack my=\"2\" w=\"100%\" align=\"start\" background=\"white\" rounded=\"lg\" p=\"4\">\n      <Heading size=\"md\">History</Heading>\n      {/* <button onClick={() => getHistory()}>get History</button> */}\n      {history?.fetched ? (\n        <>\n          <Table variant=\"simple\">\n            <Tbody>\n              {history.fetched.map((item, i) => (\n                <Tr key={i}>\n                  <Td>{item.signature}</Td>\n                  <Td>{item.slot}</Td>\n                  <Td isNumeric>\n                    {\" \"}\n                    {item?.blockTime ? (\n                      <Moment date={item.blockTime * 1000} fromNow />\n                    ) : (\n                      \"\"\n                    )}\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n          {history.fetched.map((item, i) => (\n            <tr key={i}>\n              <td>{item.signature}</td>\n              <td>{item.slot}</td>\n\n              <td>\n                {item?.blockTime ? (\n                  <Moment date={item.blockTime * 1000} fromNow />\n                ) : (\n                  \"\"\n                )}\n              </td>\n              <td>{item?.err ? \"Failed\" : \"Success\"}</td>\n              <td>{item?.memo ? item.memo : \"\"}</td>\n            </tr>\n          ))}\n        </>\n      ) : (\n        <p> No History </p>\n      )}\n    </VStack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}