{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { useTimeout, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { isFunction, __DEV__ } from \"@chakra-ui/utils\";\nimport ReachAlert from \"@reach/alert\";\nimport { motion, useIsPresent } from \"framer-motion\";\nimport * as React from \"react\";\nimport { getToastStyle } from \"./toast.utils\";\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\n\nvar toastMotionVariants = {\n  initial: function initial(props) {\n    var position = props.position;\n    var dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    var factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return _defineProperty({\n      opacity: 0\n    }, dir, factor * 24);\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\nexport var Toast = function Toast(props) {\n  var id = props.id,\n      message = props.message,\n      onCloseComplete = props.onCloseComplete,\n      onRequestRemove = props.onRequestRemove,\n      _props$requestClose = props.requestClose,\n      requestClose = _props$requestClose === void 0 ? false : _props$requestClose,\n      _props$position = props.position,\n      position = _props$position === void 0 ? \"bottom\" : _props$position,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 5000 : _props$duration;\n\n  var _React$useState = React.useState(duration),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      delay = _React$useState2[0],\n      setDelay = _React$useState2[1];\n\n  var isPresent = useIsPresent();\n  useUpdateEffect(function () {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(function () {\n    setDelay(duration);\n  }, [duration]);\n\n  var onMouseEnter = function onMouseEnter() {\n    return setDelay(null);\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    return setDelay(duration);\n  };\n\n  var close = function close() {\n    if (isPresent) onRequestRemove();\n  };\n\n  React.useEffect(function () {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  var style = React.useMemo(function () {\n    return getToastStyle(position);\n  }, [position]);\n  return /*#__PURE__*/React.createElement(motion.li, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: toastMotionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position: position\n    },\n    style: style\n  }, /*#__PURE__*/React.createElement(ReachAlert, {\n    className: \"chakra-toast__inner\",\n    style: {\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: \"0.5rem\"\n    }\n  }, isFunction(message) ? message({\n    id: id,\n    onClose: close\n  }) : message));\n};\n\nif (__DEV__) {\n  Toast.displayName = \"Toast\";\n}","map":{"version":3,"sources":["../../src/toast.tsx"],"names":["toastMotionVariants","initial","props","position","dir","factor","opacity","animate","y","x","scale","transition","duration","ease","exit","Toast","requestClose","React","isPresent","useIsPresent","useUpdateEffect","onCloseComplete","setDelay","onMouseEnter","onMouseLeave","close","onRequestRemove","useTimeout","style","getToastStyle","pointerEvents","maxWidth","minWidth","margin","message","id","onClose"],"mappings":"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","sourcesContent":["import { useTimeout, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport { isFunction, __DEV__ } from \"@chakra-ui/utils\"\nimport ReachAlert from \"@reach/alert\"\nimport { motion, useIsPresent, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { ToastOptions } from \"./toast.types\"\nimport { getToastStyle } from \"./toast.utils\"\n\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\nconst toastMotionVariants: Variants = {\n  initial: (props) => {\n    const { position } = props\n\n    const dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\"\n\n    let factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1\n    if (position === \"bottom\") factor = 1\n\n    return {\n      opacity: 0,\n      [dir]: factor * 24,\n    }\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n}\n\nexport interface ToastProps extends ToastOptions {}\n\nexport const Toast: React.FC<ToastProps> = (props) => {\n  const {\n    id,\n    message,\n    onCloseComplete,\n    onRequestRemove,\n    requestClose = false,\n    position = \"bottom\",\n    duration = 5000,\n  } = props\n\n  const [delay, setDelay] = React.useState(duration)\n\n  const isPresent = useIsPresent()\n\n  useUpdateEffect(() => {\n    if (!isPresent) {\n      onCloseComplete?.()\n    }\n  }, [isPresent])\n\n  useUpdateEffect(() => {\n    setDelay(duration)\n  }, [duration])\n\n  const onMouseEnter = () => setDelay(null)\n  const onMouseLeave = () => setDelay(duration)\n\n  const close = () => {\n    if (isPresent) onRequestRemove()\n  }\n\n  React.useEffect(() => {\n    if (isPresent && requestClose) {\n      onRequestRemove()\n    }\n  }, [isPresent, requestClose, onRequestRemove])\n\n  useTimeout(close, delay)\n\n  const style = React.useMemo(() => getToastStyle(position), [position])\n\n  return (\n    <motion.li\n      layout\n      className=\"chakra-toast\"\n      variants={toastMotionVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      onHoverStart={onMouseEnter}\n      onHoverEnd={onMouseLeave}\n      custom={{ position }}\n      style={style}\n    >\n      <ReachAlert\n        className=\"chakra-toast__inner\"\n        style={{\n          pointerEvents: \"auto\",\n          maxWidth: 560,\n          minWidth: 300,\n          margin: \"0.5rem\",\n        }}\n      >\n        {isFunction(message) ? message({ id, onClose: close }) : message}\n      </ReachAlert>\n    </motion.li>\n  )\n}\n\nif (__DEV__) {\n  Toast.displayName = \"Toast\"\n}\n"]},"metadata":{},"sourceType":"module"}