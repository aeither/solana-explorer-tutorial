{"version":3,"sources":["../../src/chakra-provider.tsx"],"names":["CSSReset","PortalManager","ColorModeProvider","GlobalStyle","ThemeProvider","EnvironmentProvider","React","IdProvider","ChakraProvider","props","children","colorModeManager","portalZIndex","resetCSS","theme","environment","cssVarsRoot","_children","config"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SACEC,iBADF,EAGEC,WAHF,EAIEC,aAJF,QAMO,mBANP;AAQA,SACEC,mBADF,QAGO,sBAHP;AAIA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AA4CA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAA6C,GAAIC,KAAD,IAAW;AACtE,MAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,gBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,QAAQ,GAAG,IAJP;AAKJC,IAAAA,KAAK,GAAG,EALJ;AAMJC,IAAAA,WANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;;AAUA,MAAMQ,SAAS,gBACb,oBAAC,mBAAD;AAAqB,IAAA,WAAW,EAAEF;AAAlC,KACGL,QADH,CADF;;AAMA,sBACE,oBAAC,UAAD,qBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEI,KAAtB;AAAqC,IAAA,WAAW,EAAEE;AAAlD,kBACE,oBAAC,iBAAD;AACE,IAAA,gBAAgB,EAAEL,gBADpB;AAEE,IAAA,OAAO,EAAEG,KAAK,CAACI;AAFjB,KAIGL,QAAQ,iBAAI,oBAAC,QAAD,OAJf,eAKE,oBAAC,WAAD,OALF,EAMGD,YAAY,gBACX,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEA;AAAvB,KAAsCK,SAAtC,CADW,GAGXA,SATJ,CADF,CADF,CADF;AAkBD,CAnCM","sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\nimport * as React from \"react\"\nimport { IdProvider } from \"@chakra-ui/hooks\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider environment={environment}>\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <IdProvider>\n      <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n        <ColorModeProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          {resetCSS && <CSSReset />}\n          <GlobalStyle />\n          {portalZIndex ? (\n            <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n          ) : (\n            _children\n          )}\n        </ColorModeProvider>\n      </ThemeProvider>\n    </IdProvider>\n  )\n}\n"],"file":"chakra-provider.js"}