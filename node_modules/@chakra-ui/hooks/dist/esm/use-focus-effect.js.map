{"version":3,"sources":["../../src/use-focus-effect.ts"],"names":["hasFocusWithin","focus","useUpdateEffect","useFocusEffect","ref","options","shouldFocus","preventScroll","node","current","nextTick"],"mappings":"AACA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,kBAAtC;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAT,CACLC,GADK,EAELC,OAFK,EAGL;AACA,MAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAiCF,OAAvC;AAEAH,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAMM,IAAI,GAAGJ,GAAG,CAACK,OAAjB;AAEA,QAAI,CAACD,IAAD,IAAS,CAACF,WAAd,EAA2B;;AAE3B,QAAI,CAACN,cAAc,CAACQ,IAAD,CAAnB,EAA2B;AACzBP,MAAAA,KAAK,CAACO,IAAD,EAAO;AAAED,QAAAA,aAAF;AAAiBG,QAAAA,QAAQ,EAAE;AAA3B,OAAP,CAAL;AACD;AACF,GARc,EAQZ,CAACJ,WAAD,EAAcF,GAAd,EAAmBG,aAAnB,CARY,CAAf;AASD","sourcesContent":["import * as React from \"react\"\nimport { hasFocusWithin, focus } from \"@chakra-ui/utils\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport type UseFocusEffectOptions = {\n  shouldFocus: boolean\n  preventScroll?: boolean\n}\n/**\n * React hook to focus an element conditionally\n *\n * @param ref the ref of the element to focus\n * @param options focus management options\n */\nexport function useFocusEffect<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  options: UseFocusEffectOptions,\n) {\n  const { shouldFocus, preventScroll } = options\n\n  useUpdateEffect(() => {\n    const node = ref.current\n\n    if (!node || !shouldFocus) return\n\n    if (!hasFocusWithin(node)) {\n      focus(node, { preventScroll, nextTick: true })\n    }\n  }, [shouldFocus, ref, preventScroll])\n}\n"],"file":"use-focus-effect.js"}