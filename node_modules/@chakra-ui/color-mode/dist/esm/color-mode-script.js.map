{"version":3,"sources":["../../src/color-mode-script.tsx"],"names":["React","setScript","initialValue","mql","window","matchMedia","systemPreference","matches","persistedPreference","localStorage","getItem","error","console","log","isInStorage","colorMode","root","document","documentElement","style","setProperty","ColorModeScript","props","initialColorMode","html","String","nonce","__html"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAKA,SAASC,SAAT,CAAmBC,YAAnB,EAAuC;AACrC,MAAMC,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAZ;AACA,MAAMC,gBAAgB,GAAGH,GAAG,CAACI,OAAJ,GAAc,MAAd,GAAuB,OAAhD;AAEA,MAAIC,mBAAJ;;AAEA,MAAI;AACFA,IAAAA,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,sBAArB,CAAtB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CACE,6FADF;AAGD;;AAED,MAAMC,WAAW,GAAG,OAAON,mBAAP,KAA+B,QAAnD;AAEA,MAAIO,SAAJ;;AAEA,MAAID,WAAJ,EAAiB;AACfC,IAAAA,SAAS,GAAGP,mBAAZ;AACD,GAFD,MAEO;AACLO,IAAAA,SAAS,GAAGb,YAAY,KAAK,QAAjB,GAA4BI,gBAA5B,GAA+CJ,YAA3D;AACD;;AAED,MAAIa,SAAJ,EAAe;AACb,QAAMC,IAAI,GAAGC,QAAQ,CAACC,eAAtB;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAWC,WAAX,CAAuB,wBAAvB,EAAiDL,SAAjD;AACD;AACF;;AAUD;AACA;AACA;AACA;AACA,OAAO,IAAMM,eAAe,GAAIC,KAAD,IAAiC;AAC9D,MAAM;AAAEC,IAAAA,gBAAgB,GAAG;AAArB,MAAiCD,KAAvC;AACA,MAAME,IAAI,SAAOC,MAAM,CAACxB,SAAD,CAAb,WAA8BsB,gBAA9B,OAAV;AACA,sBACE;AAAQ,IAAA,KAAK,EAAED,KAAK,CAACI,KAArB;AAA4B,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEH;AAAV;AAArD,IADF;AAGD,CANM","sourcesContent":["import * as React from \"react\"\nimport { ColorMode } from \"./color-mode-provider\"\n\ntype Mode = ColorMode | \"system\" | undefined\n\nfunction setScript(initialValue: Mode) {\n  const mql = window.matchMedia(\"(prefers-color-scheme: dark)\")\n  const systemPreference = mql.matches ? \"dark\" : \"light\"\n\n  let persistedPreference: Mode\n\n  try {\n    persistedPreference = localStorage.getItem(\"chakra-ui-color-mode\") as Mode\n  } catch (error) {\n    console.log(\n      \"Chakra UI: localStorage is not available. Color mode persistence might not work as expected\",\n    )\n  }\n\n  const isInStorage = typeof persistedPreference === \"string\"\n\n  let colorMode: Mode\n\n  if (isInStorage) {\n    colorMode = persistedPreference\n  } else {\n    colorMode = initialValue === \"system\" ? systemPreference : initialValue\n  }\n\n  if (colorMode) {\n    const root = document.documentElement\n    root.style.setProperty(\"--chakra-ui-color-mode\", colorMode)\n  }\n}\n\ninterface ColorModeScriptProps {\n  initialColorMode?: Mode\n  /**\n   * Optional nonce that will be passed to the created `<script>` tag.\n   */\n  nonce?: string\n}\n\n/**\n * Script to add to the root of your application when using localStorage,\n * to help prevent flash of color mode that can happen during page load.\n */\nexport const ColorModeScript = (props: ColorModeScriptProps) => {\n  const { initialColorMode = \"light\" } = props\n  const html = `(${String(setScript)})('${initialColorMode}')`\n  return (\n    <script nonce={props.nonce} dangerouslySetInnerHTML={{ __html: html }} />\n  )\n}\n"],"file":"color-mode-script.js"}