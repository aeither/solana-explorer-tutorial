{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { motion } from \"framer-motion\";\nimport { mergeWith } from \"@chakra-ui/utils\";\nimport React from \"react\";\nimport { usePopoverContext } from \"./popover-context\"; // TODO: consider moving this to some util\n\nvar mergeVariants = function mergeVariants(variants) {\n  if (!variants) return;\n  return mergeWith(variants, {\n    enter: {\n      visibility: \"visible\"\n    },\n    exit: {\n      transitionEnd: {\n        visibility: \"hidden\"\n      }\n    }\n  });\n};\n\nvar scaleFade = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar Section = motion(chakra.section);\nexport var PopoverTransition = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _usePopoverContext = usePopoverContext(),\n      isOpen = _usePopoverContext.isOpen;\n\n  return /*#__PURE__*/React.createElement(Section, _extends({\n    ref: ref,\n    variants: mergeVariants(props.variants)\n  }, props, {\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  }));\n});\nPopoverTransition.defaultProps = {\n  variants: scaleFade\n};","map":{"version":3,"sources":["../../src/popover-transition.tsx"],"names":["mergeVariants","variants","mergeWith","enter","visibility","exit","transitionEnd","scaleFade","opacity","scale","transition","duration","ease","Section","motion","chakra","PopoverTransition","isOpen","usePopoverContext","props"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,QAAA,mBAAA;AACA,SAAA,MAAA,QAAA,eAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,QAAA,mBAAA,C,CAEA;;AAmBA,IAAMA,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,QAAD,EAA+B;AACnD,MAAI,CAAJ,QAAA,EAAe;AACf,SAAOC,SAAS,CAAA,QAAA,EAAW;AACzBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AADP,KADkB;AAIzBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,aAAa,EAAE;AACbF,QAAAA,UAAU,EAAE;AADC;AADX;AAJmB,GAAX,CAAhB;AAFF,CAAA;;AAcA,IAAMG,SAAyB,GAAG;AAChCF,EAAAA,IAAI,EAAE;AACJG,IAAAA,OAAO,EADH,CAAA;AAEJC,IAAAA,KAAK,EAFD,IAAA;AAGJC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EADE,GAAA;AAEVC,MAAAA,IAAI,EAAE,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAFI;AAHR,GAD0B;AAShCT,EAAAA,KAAK,EAAE;AACLM,IAAAA,KAAK,EADA,CAAA;AAELD,IAAAA,OAAO,EAFF,CAAA;AAGLE,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EADE,IAAA;AAEVC,MAAAA,IAAI,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA;AAFI;AAHP;AATyB,CAAlC;AAmBA,IAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAA7B,OAAsB,CAAtB;AAKA,OAAO,IAAMC,iBAAiB,GAAA,aAAG,KAAK,CAAL,UAAA,CAC/B,UAAA,KAAA,EAAA,GAAA,EAAkE;AAChE,2BAAmBE,iBAAnB,EAAA;AAAA,MAAQD,MAAR,sBAAQA,MAAR;;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,QAAQ,EAAEjB,aAAa,CAACmB,KAAK,CAAN,QAAA;AAFzB,GAAA,EAAA,KAAA,EAAA;AAIE,IAAA,OAAO,EAJT,KAAA;AAKE,IAAA,OAAO,EAAEF,MAAM,GAAA,OAAA,GAAa;AAL9B,GAAA,CAAA,CADF;AAHG,CAA0B,CAA1B;AAePD,iBAAiB,CAAjBA,YAAAA,GAAiC;AAC/Bf,EAAAA,QAAQ,EAAEM;AADqB,CAAjCS","sourcesContent":["import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { HTMLMotionProps, motion, Variant } from \"framer-motion\"\nimport { mergeWith } from \"@chakra-ui/utils\"\nimport React from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n// TODO: consider moving this to some util\ntype HTMLMotionChakraProps<T extends keyof React.ReactHTML> = Omit<\n  HTMLChakraProps<T>,\n  keyof HTMLMotionProps<T>\n> &\n  Omit<\n    HTMLMotionProps<T>,\n    | \"style\"\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"variants\"\n  > & {\n    variants?: MotionVariants\n  }\n\ntype MotionVariants = Partial<Record<\"enter\" | \"exit\", Variant>>\n\nconst mergeVariants = (variants?: MotionVariants) => {\n  if (!variants) return\n  return mergeWith(variants, {\n    enter: {\n      visibility: \"visible\",\n    },\n    exit: {\n      transitionEnd: {\n        visibility: \"hidden\",\n      },\n    },\n  })\n}\n\nconst scaleFade: MotionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst Section = motion(chakra.section)\n\nexport interface PopoverTransitionProps\n  extends HTMLMotionChakraProps<\"section\"> {}\n\nexport const PopoverTransition = React.forwardRef(\n  (props: HTMLMotionChakraProps<\"section\">, ref: React.Ref<any>) => {\n    const { isOpen } = usePopoverContext()\n    return (\n      <Section\n        ref={ref}\n        variants={mergeVariants(props.variants)}\n        {...props}\n        initial={false}\n        animate={isOpen ? \"enter\" : \"exit\"}\n      />\n    )\n  },\n)\n\nPopoverTransition.defaultProps = {\n  variants: scaleFade,\n}\n"]},"metadata":{},"sourceType":"module"}