{"ast":null,"code":"/**\n * Unmemoized version of {@link useRefToCallback}\n * @see {@link useRefToCallback}\n * @param ref\n */\nexport function refToCallback(ref) {\n  return function (newValue) {\n    if (typeof ref === 'function') {\n      ref(newValue);\n    } else if (ref) {\n      ref.current = newValue;\n    }\n  };\n}\n\nvar nullCallback = function nullCallback() {\n  return null;\n}; // lets maintain a weak ref to, well, ref :)\n// not using `kashe` to keep this package small\n\n\nvar weakMem = new WeakMap();\n\nvar weakMemoize = function weakMemoize(ref) {\n  var usedRef = ref || nullCallback;\n\n  if (weakMem.has(usedRef)) {\n    return weakMem.get(usedRef);\n  }\n\n  var cb = refToCallback(usedRef);\n  weakMem.set(usedRef, cb);\n  return cb;\n};\n/**\n * Transforms a given `ref` into `callback`.\n *\n * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}\n *\n * @param {ReactRef} ref\n * @returns {Function}\n *\n * @see https://github.com/theKashey/use-callback-ref#reftocallback\n *\n * @example\n * const ref = useRef(0);\n * const setRef = useRefToCallback(ref);\n * ðŸ‘‰ setRef(10);\n * âœ… ref.current === 10\n */\n\n\nexport function useRefToCallback(ref) {\n  return weakMemoize(ref);\n}","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/use-callback-ref/dist/es2015/refToCallback.js"],"names":["refToCallback","ref","newValue","current","nullCallback","weakMem","WeakMap","weakMemoize","usedRef","has","get","cb","set","useRefToCallback"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC3BA,MAAAA,GAAG,CAACC,QAAD,CAAH;AACH,KAFD,MAGK,IAAID,GAAJ,EAAS;AACVA,MAAAA,GAAG,CAACE,OAAJ,GAAcD,QAAd;AACH;AACJ,GAPD;AAQH;;AACD,IAAIE,YAAY,GAAG,SAAfA,YAAe,GAAY;AAAE,SAAO,IAAP;AAAc,CAA/C,C,CACA;AACA;;;AACA,IAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd;;AACA,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAAUN,GAAV,EAAe;AAC7B,MAAIO,OAAO,GAAGP,GAAG,IAAIG,YAArB;;AACA,MAAIC,OAAO,CAACI,GAAR,CAAYD,OAAZ,CAAJ,EAA0B;AACtB,WAAOH,OAAO,CAACK,GAAR,CAAYF,OAAZ,CAAP;AACH;;AACD,MAAIG,EAAE,GAAGX,aAAa,CAACQ,OAAD,CAAtB;AACAH,EAAAA,OAAO,CAACO,GAAR,CAAYJ,OAAZ,EAAqBG,EAArB;AACA,SAAOA,EAAP;AACH,CARD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,gBAAT,CAA0BZ,GAA1B,EAA+B;AAClC,SAAOM,WAAW,CAACN,GAAD,CAAlB;AACH","sourcesContent":["/**\n * Unmemoized version of {@link useRefToCallback}\n * @see {@link useRefToCallback}\n * @param ref\n */\nexport function refToCallback(ref) {\n    return function (newValue) {\n        if (typeof ref === 'function') {\n            ref(newValue);\n        }\n        else if (ref) {\n            ref.current = newValue;\n        }\n    };\n}\nvar nullCallback = function () { return null; };\n// lets maintain a weak ref to, well, ref :)\n// not using `kashe` to keep this package small\nvar weakMem = new WeakMap();\nvar weakMemoize = function (ref) {\n    var usedRef = ref || nullCallback;\n    if (weakMem.has(usedRef)) {\n        return weakMem.get(usedRef);\n    }\n    var cb = refToCallback(usedRef);\n    weakMem.set(usedRef, cb);\n    return cb;\n};\n/**\n * Transforms a given `ref` into `callback`.\n *\n * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}\n *\n * @param {ReactRef} ref\n * @returns {Function}\n *\n * @see https://github.com/theKashey/use-callback-ref#reftocallback\n *\n * @example\n * const ref = useRef(0);\n * const setRef = useRefToCallback(ref);\n * ðŸ‘‰ setRef(10);\n * âœ… ref.current === 10\n */\nexport function useRefToCallback(ref) {\n    return weakMemoize(ref);\n}\n"]},"metadata":{},"sourceType":"module"}