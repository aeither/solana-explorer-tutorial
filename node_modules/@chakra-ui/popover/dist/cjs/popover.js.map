{"version":3,"sources":["../../src/popover.tsx"],"names":["Popover","props","styles","children","rest","context","isOpen","onClose","forceUpdate","__DEV__","displayName","PopoverTrigger","child","React","Children","only","getTriggerProps","cloneElement","ref","PopoverContent","rootProps","contentProps","getPopoverProps","getPopoverPositionerProps","contentStyles","position","display","flexDirection","content","popper","className","PopoverHeader","getHeaderProps","header","PopoverBody","getBodyProps","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","bg","bgColor","backgroundColor","getArrowProps","getArrowInnerProps","arrowBg","arrow","undefined"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const { rootProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...getPopoverProps(contentProps, ref)}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { getBodyProps } = usePopoverContext()\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getBodyProps(props, ref)}\n      className={cx(\"chakra-popover__body\", props.className)}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      insetEnd=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { bg, bgColor, backgroundColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = useStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          ...styles.arrow,\n          \"--popper-arrow-bg\": arrowBg\n            ? `colors.${arrowBg}, ${arrowBg}`\n            : undefined,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"],"file":"popover.js"}