{"version":3,"sources":["../../src/button.tsx"],"names":["Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","buttonStyles","React","useMemo","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","width","_ref","defaultType","contentProps","__DEV__","displayName","ButtonContent"],"mappings":"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","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = React.useMemo(() => {\n    const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group, isFullWidth])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"],"file":"button.js"}