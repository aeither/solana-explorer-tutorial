{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\";\nexport var StackDivider = function StackDivider(props) {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__divider\"\n  }, props, {\n    __css: _extends({}, props[\"__css\"], {\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    })\n  }));\n};\nexport var StackItem = function StackItem(props) {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__item\"\n  }, props, {\n    __css: _extends({\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0\n    }, props[\"__css\"])\n  }));\n};\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\n\nexport var Stack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isInline = props.isInline,\n      directionProp = props.direction,\n      align = props.align,\n      justify = props.justify,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      wrap = props.wrap,\n      children = props.children,\n      divider = props.divider,\n      className = props.className,\n      shouldWrapChildren = props.shouldWrapChildren,\n      rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var styles = React.useMemo(function () {\n    return getStackStyles({\n      direction: direction,\n      spacing: spacing\n    });\n  }, [direction, spacing]);\n  var dividerStyle = React.useMemo(function () {\n    return getDividerStyles({\n      spacing: spacing,\n      direction: direction\n    });\n  }, [spacing, direction]);\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map(function (child, index) {\n    // Prefer provided child key, fallback to index\n    var key = typeof child.key !== \"undefined\" ? child.key : index;\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: key\n    }, child);\n\n    var _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!hasDivider) return _child;\n    var clonedDivider = /*#__PURE__*/React.cloneElement(divider, {\n      __css: dividerStyle\n    });\n\n    var _divider = isLast ? null : clonedDivider;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: key\n    }, _child, _divider);\n  });\n\n  var _className = cx(\"chakra-stack\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : _defineProperty({}, selector, styles[selector])\n  }, rest), clones);\n});\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\n\nexport var HStack = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"row\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\n\nexport var VStack = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"column\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"sources":["../../src/stack.tsx"],"names":["StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","forwardRef","direction","spacing","shouldWrapChildren","isInline","directionProp","styles","getStackStyles","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","key","child","isLast","index","wrappedChild","_child","clonedDivider","__css","_divider","_className","cx","HStack","ref","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        // Prefer provided child key, fallback to index\n        const key = typeof child.key !== \"undefined\" ? child.key : index\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={key}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"]},"metadata":{},"sourceType":"module"}