{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["useCallbackRef","useControllableState","addItem","removeItem","isInputEvent","useCallback","useCheckboxGroup","props","defaultValue","value","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SACEC,OADF,EAGEC,UAHF,EAKEC,YALF,QAMO,kBANP;AAOA,SAAsBC,WAAtB,QAAyC,OAAzC;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAA6D;AAAA,MAAnCA,KAAmC;AAAnCA,IAAAA,KAAmC,GAAJ,EAAI;AAAA;;AAClE,MAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,KAAK,EAAEC,SAFH;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFN,KANJ;AAQA,MAAMO,YAAY,GAAGd,cAAc,CAACW,QAAD,CAAnC;AAEA,MAAM,CAACF,KAAD,EAAQM,QAAR,IAAoBd,oBAAoB,CAAC;AAC7CQ,IAAAA,KAAK,EAAEC,SADsC;AAE7CF,IAAAA,YAAY,EAAEA,YAAY,IAAI,EAFe;AAG7CG,IAAAA,QAAQ,EAAEG;AAHmC,GAAD,CAA9C;AAMA,MAAME,YAAY,GAAGX,WAAW,CAC7BY,YAAD,IAAgC;AAC9B,QAAI,CAACR,KAAL,EAAY;AAEZ,QAAMS,SAAS,GAAGd,YAAY,CAACa,YAAD,CAAZ,GACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACX,KAAK,CAACY,QAAN,CAAeJ,YAAf,CAFL;AAIA,QAAMK,aAAa,GAAGlB,YAAY,CAACa,YAAD,CAAZ,GAClBA,YAAY,CAACE,MAAb,CAAoBV,KADF,GAElBQ,YAFJ;AAIA,QAAMM,SAAS,GAAGL,SAAS,GACvBhB,OAAO,CAACO,KAAD,EAAQa,aAAR,CADgB,GAEvBnB,UAAU,CAACM,KAAD,EAAQa,aAAR,CAFd;AAIAP,IAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD,GAjB6B,EAkB9B,CAACR,QAAD,EAAWN,KAAX,CAlB8B,CAAhC;AAqBA,MAAMe,gBAAgB,GAAGnB,WAAW,CAClC,UAACE,KAAD,EAAsB;AAAA,QAArBA,KAAqB;AAArBA,MAAAA,KAAqB,GAAP,EAAO;AAAA;;AACpB,QAAMkB,UAAU,GAAGZ,QAAQ,GAAG,SAAH,GAAe,WAA1C;AACA,wBACKN,KADL;AAEE,OAACkB,UAAD,GAAchB,KAAK,CAACY,QAAN,CAAed,KAAK,CAACE,KAArB,CAFhB;AAGEE,MAAAA,QAAQ,EAAEK;AAHZ;AAKD,GARiC,EASlC,CAACA,YAAD,EAAeH,QAAf,EAAyBJ,KAAzB,CATkC,CAApC;AAYA,SAAO;AACLA,IAAAA,KADK;AAELG,IAAAA,UAFK;AAGLD,IAAAA,QAAQ,EAAEK,YAHL;AAILD,IAAAA,QAJK;AAKLS,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  Dict,\n  removeItem,\n  StringOrNumber,\n  isInputEvent,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, all wrapped checkbox inputs will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"file":"use-checkbox-group.js"}