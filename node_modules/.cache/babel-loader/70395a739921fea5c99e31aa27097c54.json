{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isCssVar, isObject, isString, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nimport { expandResponsive } from \"./utils/expand-responsive\";\n\nvar isCSSVariableTokenValue = function isCSSVariableTokenValue(key, value) {\n  return key.startsWith(\"--\") && isString(value) && !isCssVar(value);\n};\n\nvar resolveTokenValue = function resolveTokenValue(theme, value) {\n  var _ref, _getVar2;\n\n  if (value == null) return value;\n\n  var getVar = function getVar(val) {\n    var _theme$__cssMap, _theme$__cssMap$val;\n\n    return (_theme$__cssMap = theme.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;\n  };\n\n  var getValue = function getValue(val) {\n    var _getVar;\n\n    return (_getVar = getVar(val)) != null ? _getVar : val;\n  };\n\n  var valueSplit = value.split(\",\").map(function (v) {\n    return v.trim();\n  });\n\n  var _valueSplit = _slicedToArray(valueSplit, 2),\n      tokenValue = _valueSplit[0],\n      fallbackValue = _valueSplit[1];\n\n  value = (_ref = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref : getValue(value);\n  return value;\n};\n\nexport function getCss(options) {\n  var _options$configs = options.configs,\n      configs = _options$configs === void 0 ? {} : _options$configs,\n      _options$pseudos = options.pseudos,\n      pseudos = _options$pseudos === void 0 ? {} : _options$pseudos,\n      theme = options.theme;\n\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n\n    var _styles = runIfFn(stylesOrFn, theme);\n\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n\n    for (var key in styles) {\n      var _config$transform, _config, _config2, _config3, _config4;\n\n      var valueOrFn = styles[key];\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n\n      var value = runIfFn(valueOrFn, theme);\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n\n      if (key in pseudos) {\n        key = pseudos[key];\n      }\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n\n\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value);\n      }\n\n      var config = configs[key];\n\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n\n      if (isObject(value)) {\n        var _computedStyles$key;\n\n        computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true));\n        continue;\n      }\n\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n\n      var configProperty = runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);\n\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        var _iterator = _createForOfIteratorHelper(configProperty),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            computedStyles[property] = rawValue;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        continue;\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[configProperty] = rawValue;\n        }\n\n        continue;\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n\n      computedStyles[key] = rawValue;\n    }\n\n    return computedStyles;\n  };\n\n  return css;\n}\nexport var css = function css(styles) {\n  return function (theme) {\n    var cssFn = getCss({\n      theme: theme,\n      pseudos: pseudoSelectors,\n      configs: systemPropConfigs\n    });\n    return cssFn(styles);\n  };\n};","map":{"version":3,"sources":["../../src/css.ts"],"names":["mergeWith","systemProps","isCSSVariableTokenValue","key","isString","isCssVar","resolveTokenValue","value","getVar","val","theme","getValue","valueSplit","v","configs","pseudos","css","nested","_styles","runIfFn","styles","expandResponsive","computedStyles","valueOrFn","config","property","isObject","merge","rawValue","configProperty","staticStyles","Array","cssFn","getCss","systemPropConfigs"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  isString,\n  mergeWith as merge,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { StyleObjectOrFn } from \"./system.types\"\nimport { expandResponsive } from \"./utils/expand-responsive\"\nimport { Config, PropConfig } from \"./utils/prop-config\"\nimport { CssTheme } from \"./utils/types\"\n\nconst isCSSVariableTokenValue = (key: string, value: any): value is string =>\n  key.startsWith(\"--\") && isString(value) && !isCssVar(value)\n\nconst resolveTokenValue = (theme: Dict, value: string) => {\n  if (value == null) return value\n\n  const getVar = (val: string) => theme.__cssMap?.[val]?.varRef\n  const getValue = (val: string) => getVar(val) ?? val\n\n  const valueSplit = value.split(\",\").map((v) => v.trim())\n  const [tokenValue, fallbackValue] = valueSplit\n  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value)\n\n  return value\n}\n\ninterface GetCSSOptions {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: GetCSSOptions) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (let key in styles) {\n      const valueOrFn = styles[key]\n\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n      let value = runIfFn(valueOrFn, theme)\n\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n      if (key in pseudos) {\n        key = pseudos[key]\n      }\n\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value)\n      }\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"]},"metadata":{},"sourceType":"module"}