{"version":3,"sources":["../../src/pointer-event.ts"],"names":["addDomEvent","getEventWindow","isBrowser","isMouseEvent","event","win","PointerEvent","pointerType","MouseEvent","isTouchEvent","hasTouches","touches","filterPrimaryPointer","eventHandler","isPrimaryPointer","button","defaultPagePoint","pageX","pageY","pointFromTouch","e","pointType","primaryTouch","changedTouches","point","x","y","pointFromMouse","extractEventInfo","getViewportPointFromEvent","wrapPointerEventHandler","handler","shouldFilterPrimaryPointer","listener","supportsPointerEvents","window","onpointerdown","supportsTouchEvents","ontouchstart","supportsMouseEvents","onmousedown","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","name","addPointerEvent","target","eventName","options","isMultiTouchEvent","length"],"mappings":"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","sourcesContent":["/**\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport { addDomEvent, getEventWindow, isBrowser } from \"./dom\"\n\nexport type AnyPointerEvent = MouseEvent | TouchEvent | PointerEvent\n\ntype PointType = \"page\" | \"client\"\n\nexport function isMouseEvent(event: AnyPointerEvent): event is MouseEvent {\n  const win = getEventWindow(event)\n\n  // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n  if (\n    typeof win.PointerEvent !== \"undefined\" &&\n    event instanceof win.PointerEvent\n  ) {\n    return !!(event.pointerType === \"mouse\")\n  }\n\n  return event instanceof win.MouseEvent\n}\n\nexport function isTouchEvent(event: AnyPointerEvent): event is TouchEvent {\n  const hasTouches = !!(event as TouchEvent).touches\n  return hasTouches\n}\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport interface PointerEventInfo {\n  point: Point\n}\n\nexport type EventHandler = (\n  event: AnyPointerEvent,\n  info: PointerEventInfo,\n) => void\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler: EventListener): EventListener {\n  return (event: Event) => {\n    const win = getEventWindow(event)\n    const isMouseEvent = event instanceof win.MouseEvent\n    const isPrimaryPointer =\n      !isMouseEvent || (isMouseEvent && (event as MouseEvent).button === 0)\n    if (isPrimaryPointer) {\n      eventHandler(event)\n    }\n  }\n}\n\nexport type EventListenerWithPointInfo = (\n  e: AnyPointerEvent,\n  info: PointerEventInfo,\n) => void\n\nconst defaultPagePoint = { pageX: 0, pageY: 0 }\n\nfunction pointFromTouch(e: TouchEvent, pointType: PointType = \"page\") {\n  const primaryTouch = e.touches[0] || e.changedTouches[0]\n  const point = primaryTouch || defaultPagePoint\n\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nfunction pointFromMouse(\n  point: MouseEvent | PointerEvent,\n  pointType: PointType = \"page\",\n) {\n  return {\n    x: point[`${pointType}X`],\n    y: point[`${pointType}Y`],\n  }\n}\n\nexport function extractEventInfo(\n  event: AnyPointerEvent,\n  pointType: PointType = \"page\",\n): PointerEventInfo {\n  return {\n    point: isTouchEvent(event)\n      ? pointFromTouch(event, pointType)\n      : pointFromMouse(event, pointType),\n  }\n}\n\nexport function getViewportPointFromEvent(event: AnyPointerEvent) {\n  return extractEventInfo(event, \"client\")\n}\n\nexport const wrapPointerEventHandler = (\n  handler: EventListenerWithPointInfo,\n  shouldFilterPrimaryPointer = false,\n): EventListener => {\n  const listener: EventListener = (event: any) =>\n    handler(event, extractEventInfo(event))\n\n  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener\n}\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nconst supportsPointerEvents = () => isBrowser && window.onpointerdown === null\nconst supportsTouchEvents = () => isBrowser && window.ontouchstart === null\nconst supportsMouseEvents = () => isBrowser && window.onmousedown === null\n\ninterface PointerNameMap {\n  pointerdown: string\n  pointermove: string\n  pointerup: string\n  pointercancel: string\n  pointerover?: string\n  pointerout?: string\n  pointerenter?: string\n  pointerleave?: string\n}\n\nconst mouseEventNames: PointerNameMap = {\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointercancel: \"mousecancel\",\n  pointerover: \"mouseover\",\n  pointerout: \"mouseout\",\n  pointerenter: \"mouseenter\",\n  pointerleave: \"mouseleave\",\n}\n\nconst touchEventNames: PointerNameMap = {\n  pointerdown: \"touchstart\",\n  pointermove: \"touchmove\",\n  pointerup: \"touchend\",\n  pointercancel: \"touchcancel\",\n}\n\nexport function getPointerEventName(name: string): string {\n  if (supportsPointerEvents()) {\n    return name\n  }\n  if (supportsTouchEvents()) {\n    return touchEventNames[name]\n  }\n  if (supportsMouseEvents()) {\n    return mouseEventNames[name]\n  }\n\n  return name\n}\n\nexport function addPointerEvent(\n  target: EventTarget,\n  eventName: string,\n  handler: EventListenerWithPointInfo,\n  options?: AddEventListenerOptions,\n) {\n  return addDomEvent(\n    target,\n    getPointerEventName(eventName),\n    wrapPointerEventHandler(handler, eventName === \"pointerdown\"),\n    options,\n  )\n}\n\nexport function isMultiTouchEvent(event: AnyPointerEvent) {\n  return isTouchEvent(event) && event.touches.length > 1\n}\n"],"file":"pointer-event.js"}