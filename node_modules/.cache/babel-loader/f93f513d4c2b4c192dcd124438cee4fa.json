{"ast":null,"code":"import _wrapNativeSuper from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _createForOfIteratorHelper from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport * as nacl from 'tweetnacl';\nimport nacl__default from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from 'crypto-hash';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport { keccak_256 } from 'js-sha3';\n\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n\n    Object.assign(this, properties);\n  }\n\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n\n  var _super = _createSuper(Enum);\n\n  function Enum(properties) {\n    var _this;\n\n    _classCallCheck(this, Enum);\n\n    _this = _super.call(this, properties);\n\n    _defineProperty(_assertThisInitialized(_this), \"enum\", '');\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n\n  return Enum;\n}(Struct);\n\nvar SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nvar PublicKey = /*#__PURE__*/function (_Struct2) {\n  _inherits(PublicKey, _Struct2);\n\n  var _super2 = _createSuper(PublicKey);\n\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n\n    _classCallCheck(this, PublicKey);\n\n    _this2 = _super2.call(this, {});\n\n    _defineProperty(_assertThisInitialized(_this2), \"_bn\", void 0);\n\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(\"Invalid public key input\");\n        }\n\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n\n      if (_this2._bn.byteLength() > 32) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n\n    return _this2;\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value: function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n    /**\n     * Return the byte array representation of the public key\n     */\n\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      return this.toBuffer();\n    }\n    /**\n     * Return the Buffer representation of the public key\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n\n      if (b.length === 32) {\n        return b;\n      }\n\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n\n  }], [{\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, hash;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n                _context.next = 3;\n                return sha256(new Uint8Array(buffer));\n\n              case 3:\n                hash = _context.sent;\n                return _context.abrupt(\"return\", new PublicKey(Buffer.from(hash, 'hex')));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seeds, programId) {\n        var buffer, hash, publicKeyBytes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                buffer = Buffer.alloc(0);\n                seeds.forEach(function (seed) {\n                  if (seed.length > MAX_SEED_LENGTH) {\n                    throw new TypeError(\"Max seed length exceeded\");\n                  }\n\n                  buffer = Buffer.concat([buffer, toBuffer(seed)]);\n                });\n                buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n                _context2.next = 5;\n                return sha256(new Uint8Array(buffer));\n\n              case 5:\n                hash = _context2.sent;\n                publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n                if (!is_on_curve(publicKeyBytes)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid seeds, address must fall off the curve\");\n\n              case 9:\n                return _context2.abrupt(\"return\", new PublicKey(publicKeyBytes));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(seeds, programId) {\n        var nonce, address, seedsWithNonce;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                nonce = 255;\n\n              case 1:\n                if (!(nonce != 0)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _context3.prev = 2;\n                seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n                _context3.next = 6;\n                return this.createProgramAddress(seedsWithNonce, programId);\n\n              case 6:\n                address = _context3.sent;\n                _context3.next = 15;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                if (!(_context3.t0 instanceof TypeError)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw _context3.t0;\n\n              case 13:\n                nonce--;\n                return _context3.abrupt(\"continue\", 1);\n\n              case 15:\n                return _context3.abrupt(\"return\", [address, nonce]);\n\n              case 18:\n                throw new Error(\"Unable to find a viable program address nonce\");\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 9]]);\n      }));\n\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkey) {\n      return is_on_curve(pubkey) == 1;\n    }\n  }]);\n\n  return PublicKey;\n}(Struct);\n\n_defineProperty(PublicKey, \"default\", new PublicKey('11111111111111111111111111111111'));\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nvar naclLowLevel = nacl__default.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nvar gf1 = naclLowLevel.gf([1]);\nvar I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return toBuffer(this._keypair.secretKey);\n    }\n  }]);\n\n  return Account;\n}();\n\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  var _decode = rsl.decode.bind(rsl);\n\n  var _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = function (buffer, offset) {\n    var data = _decode(buffer, offset);\n\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = function (str, buffer, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\nfunction getAlloc(type, fields) {\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nvar PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    _classCallCheck(this, Message);\n\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"accountKeys\", void 0);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  _createClass(Message, [{\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n            programIdIndex = instruction.programIdIndex;\n        var data = bs58.decode(instruction.data);\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: Buffer.from(accounts),\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var numRequiredSignatures = byteArray.shift();\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBKEY_LENGTH);\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        accountKeys.push(bs58.encode(Buffer.from(account)));\n      }\n\n      var recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n\n        var _accountCount = decodeLength(byteArray);\n\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n\n  return Message;\n}();\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nvar DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nvar TransactionInstruction =\n/**\n * Public keys to include in this transaction\n * Boolean represents whether this pubkey needs to sign the transaction\n */\n\n/**\n * Program Id to execute\n */\n\n/**\n * Program input\n */\nfunction TransactionInstruction(opts) {\n  _classCallCheck(this, TransactionInstruction);\n\n  _defineProperty(this, \"keys\", void 0);\n\n  _defineProperty(this, \"programId\", void 0);\n\n  _defineProperty(this, \"data\", Buffer.alloc(0));\n\n  this.programId = opts.programId;\n  this.keys = opts.keys;\n\n  if (opts.data) {\n    this.data = opts.data;\n  }\n};\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n\n    _defineProperty(this, \"signatures\", []);\n\n    _defineProperty(this, \"feePayer\", void 0);\n\n    _defineProperty(this, \"instructions\", []);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"nonceInfo\", void 0);\n\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this3 = this;\n\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this3.instructions = _this3.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this3.instructions.push(item);\n        } else {\n          _this3.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      var nonceInfo = this.nonceInfo;\n\n      if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n        this.recentBlockhash = nonceInfo.nonce;\n        this.instructions.unshift(nonceInfo.nonceInstruction);\n      }\n\n      var recentBlockhash = this.recentBlockhash;\n\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n\n      if (this.instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n\n      var feePayer;\n\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n\n      for (var i = 0; i < this.instructions.length; i++) {\n        if (this.instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n\n      var programIds = [];\n      var accountMetas = [];\n      this.instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      accountMetas.sort(function (x, y) {\n        var checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n        var checkWritable = x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n        return checkSigner || checkWritable;\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n            _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n            payerMeta = _uniqueMetas$splice2[0];\n\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n\n\n      var _iterator = _createForOfIteratorHelper(this.signatures),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref) {\n        var pubkey = _ref.pubkey,\n            isSigner = _ref.isSigner,\n            isWritable = _ref.isWritable;\n\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var data = instruction.data,\n            programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      instructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: instructions\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        signers[_key2] = arguments[_key2];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        signers[_key3] = arguments[_key3];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i2 = 0, _signers = signers; _i2 < _signers.length; _i2++) {\n        var signer = _signers[_i2];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n\n      this._verifySignatures(message.serialize(), true);\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        signers[_key4] = arguments[_key4];\n      }\n\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n\n      var seen = new Set();\n      var uniqueSigners = [];\n\n      for (var _i3 = 0, _signers2 = signers; _i3 < _signers2.length; _i3++) {\n        var signer = _signers2[_i3];\n        var key = signer.publicKey.toString();\n\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n\n      var message = this._compile();\n\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this4 = this;\n\n      var signData = message.serialize();\n\n      for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        signers[_key5 - 1] = arguments[_key5];\n      }\n\n      signers.forEach(function (signer) {\n        var signature = nacl__default.sign.detached(signData, signer.secretKey);\n\n        _this4._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a complete, signed Transaction\n     */\n\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures() {\n      return this._verifySignatures(this.serializeMessage(), true);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper(this.signatures),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n              signature = _step2$value.signature,\n              _publicKey = _step2$value.publicKey;\n\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!nacl__default.sign.detached.verify(signData, signature, _publicKey.toBuffer())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n        requireAllSignatures: true,\n        verifySignatures: true\n      }, config),\n          requireAllSignatures = _Object$assign.requireAllSignatures,\n          verifySignatures = _Object$assign.verifySignatures;\n\n      var signData = this.serializeMessage();\n\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n\n      return this._serialize(signData);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref2, index) {\n        var signature = _ref2.signature;\n\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n\n  }, {\n    key: \"populate\",\n    value: function populate(message, signatures) {\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      return transaction;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nfunction sendAndConfirmTransaction(_x8, _x9, _x10, _x11) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\n\n\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(connection, transaction, signers, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee75$(_context75) {\n      while (1) {\n        switch (_context75.prev = _context75.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context75.next = 3;\n            return connection.sendTransaction(transaction, signers, sendOptions);\n\n          case 3:\n            signature = _context75.sent;\n            _context75.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context75.sent.value;\n\n            if (!status.err) {\n              _context75.next = 9;\n              break;\n            }\n\n            throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context75.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context75.stop();\n        }\n      }\n    }, _callee75);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  var data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n\n    _defineProperty(this, \"authorizedPubkey\", void 0);\n\n    _defineProperty(this, \"nonce\", void 0);\n\n    _defineProperty(this, \"feeCalculator\", void 0);\n\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n\n  return NonceAccount;\n}();\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i4 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i4 < _Object$entries.length; _i4++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n            ixType = _Object$entries$_i[0],\n            layout = _Object$entries$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n          lamports = _decodeData.lamports,\n          space = _decodeData.space,\n          programId = _decodeData.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData2 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n          lamports = _decodeData2.lamports;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData3 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n          lamports = _decodeData3.lamports,\n          seed = _decodeData3.seed,\n          programId = _decodeData3.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData4 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n          space = _decodeData4.space;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData5 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n          base = _decodeData5.base,\n          seed = _decodeData5.seed,\n          space = _decodeData5.space,\n          programId = _decodeData5.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData6 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n          programId = _decodeData6.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n\n      var _decodeData7 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n          base = _decodeData7.base,\n          seed = _decodeData7.seed,\n          programId = _decodeData7.programId;\n\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData8 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n          base = _decodeData8.base,\n          seed = _decodeData8.seed,\n          lamports = _decodeData8.lamports,\n          space = _decodeData8.space,\n          programId = _decodeData8.programId;\n\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData9 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n          authorized = _decodeData9.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData10 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n          lamports = _decodeData10.lamports;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData11 = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n          authorized = _decodeData11.authorized;\n\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: params.lamports,\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: params.lamports\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return SystemProgram;\n}();\n\n_defineProperty(SystemProgram, \"programId\", new PublicKey('11111111111111111111111111111111')); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\n\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * (Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return connection.getMinimumBalanceForRentExemption(data.length);\n\n              case 2:\n                balanceNeeded = _context4.sent;\n                _context4.next = 5;\n                return connection.getAccountInfo(program.publicKey, 'confirmed');\n\n              case 5:\n                programInfo = _context4.sent;\n                transaction = null;\n\n                if (!(programInfo !== null)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                if (!programInfo.executable) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                console.error('Program load failed, account is already executable');\n                return _context4.abrupt(\"return\", false);\n\n              case 11:\n                if (programInfo.data.length !== data.length) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.allocate({\n                    accountPubkey: program.publicKey,\n                    space: data.length\n                  }));\n                }\n\n                if (!programInfo.owner.equals(programId)) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.assign({\n                    accountPubkey: program.publicKey,\n                    programId: programId\n                  }));\n                }\n\n                if (programInfo.lamports < balanceNeeded) {\n                  transaction = transaction || new Transaction();\n                  transaction.add(SystemProgram.transfer({\n                    fromPubkey: payer.publicKey,\n                    toPubkey: program.publicKey,\n                    lamports: balanceNeeded - programInfo.lamports\n                  }));\n                }\n\n                _context4.next = 17;\n                break;\n\n              case 16:\n                transaction = new Transaction().add(SystemProgram.createAccount({\n                  fromPubkey: payer.publicKey,\n                  newAccountPubkey: program.publicKey,\n                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                  space: data.length,\n                  programId: programId\n                }));\n\n              case 17:\n                if (!(transaction !== null)) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                _context4.next = 20;\n                return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 20:\n                dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n                chunkSize = Loader.chunkSize;\n                offset = 0;\n                array = data;\n                transactions = [];\n\n              case 25:\n                if (!(array.length > 0)) {\n                  _context4.next = 39;\n                  break;\n                }\n\n                bytes = array.slice(0, chunkSize);\n                _data = Buffer.alloc(chunkSize + 16);\n                dataLayout.encode({\n                  instruction: 0,\n                  // Load instruction\n                  offset: offset,\n                  bytes: bytes\n                }, _data);\n                _transaction = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }],\n                  programId: programId,\n                  data: _data\n                });\n                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                  commitment: 'confirmed'\n                })); // Delay between sends in an attempt to reduce rate limit errors\n\n                if (!connection._rpcEndpoint.includes('solana.com')) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                REQUESTS_PER_SECOND = 4;\n                _context4.next = 35;\n                return sleep(1000 / REQUESTS_PER_SECOND);\n\n              case 35:\n                offset += chunkSize;\n                array = array.slice(chunkSize);\n                _context4.next = 25;\n                break;\n\n              case 39:\n                _context4.next = 41;\n                return Promise.all(transactions);\n\n              case 41:\n                _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n                _data2 = Buffer.alloc(_dataLayout.span);\n\n                _dataLayout.encode({\n                  instruction: 1 // Finalize instruction\n\n                }, _data2);\n\n                _transaction2 = new Transaction().add({\n                  keys: [{\n                    pubkey: program.publicKey,\n                    isSigner: true,\n                    isWritable: true\n                  }, {\n                    pubkey: SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                  }],\n                  programId: programId,\n                  data: _data2\n                });\n                _context4.next = 47;\n                return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                  commitment: 'confirmed'\n                });\n\n              case 47:\n                return _context4.abrupt(\"return\", true);\n\n              case 48:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function load(_x12, _x13, _x14, _x15, _x16) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Loader;\n}();\n\n_defineProperty(Loader, \"chunkSize\", CHUNK_SIZE);\n\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a BPF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the BPF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n\n  return BpfLoader;\n}();\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar browserPonyfill = {\n  exports: {}\n};\n\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n\n    F.prototype = global;\n    return new F();\n  }();\n\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n\n        return name.toLowerCase();\n      }\n\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n\n        return value;\n      } // Build a destructive iterator for the value list\n\n\n      function iteratorFor(items) {\n        var iterator = {\n          next: function next() {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n\n        return iterator;\n      }\n\n      function Headers(headers) {\n        this.map = {};\n\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n\n        body.bodyUsed = true;\n      }\n\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n\n        return chars.join('');\n      }\n\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n\n      function Body() {\n        this.bodyUsed = false;\n\n        this._initBody = function (body) {\n          this._bodyInit = body;\n\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n\n        this.text = function () {\n          var rejected = consumed(this);\n\n          if (rejected) {\n            return rejected;\n          }\n\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n\n        return this;\n      } // HTTP methods whose capitalization should be normalized\n\n\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n\n          this.url = input.url;\n          this.credentials = input.credentials;\n\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n\n        this._initBody(body);\n      }\n\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n\n      Body.call(Request.prototype);\n\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n\n        this._initBody(bodyInit);\n      }\n\n      Body.call(Response.prototype);\n\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n\n      var redirectStatuses = [301, 302, 303, 307, 308];\n\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n\n      exports.DOMException = self.DOMException;\n\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n\n          var xhr = new XMLHttpRequest();\n\n          function abortXhr() {\n            xhr.abort();\n          }\n\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n\n          xhr.open(request.method, request.url, true);\n\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n\n      fetch.polyfill = true;\n\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n\n  __self__.fetch.ponyfill = true; // Remove \"polyfill\" property added by whatwg-fetch\n\n  delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n\n  var ctx = __self__; // this line disable service worker support temporarily\n\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\n\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nvar MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nvar EpochSchedule = /*#__PURE__*/function () {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n\n    _defineProperty(this, \"slotsPerEpoch\", void 0);\n\n    _defineProperty(this, \"leaderScheduleSlotOffset\", void 0);\n\n    _defineProperty(this, \"warmup\", void 0);\n\n    _defineProperty(this, \"firstNormalEpoch\", void 0);\n\n    _defineProperty(this, \"firstNormalSlot\", void 0);\n\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n\n  return EpochSchedule;\n}();\n\nvar SendTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(SendTransactionError, _Error);\n\n  var _super3 = _createSuper(SendTransactionError);\n\n  function SendTransactionError(message, logs) {\n    var _this5;\n\n    _classCallCheck(this, SendTransactionError);\n\n    _this5 = _super3.call(this, message);\n\n    _defineProperty(_assertThisInitialized(_this5), \"logs\", void 0);\n\n    _this5.logs = logs;\n    return _this5;\n  }\n\n  return SendTransactionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  var timeoutId;\n  var timeoutPromise = new Promise(function (resolve) {\n    timeoutId = setTimeout(function () {\n      return resolve(null);\n    }, timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(function (result) {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  var url = new URL(endpoint);\n  var useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nvar UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nvar SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string()))\n}));\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  var fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = function fetchWithMiddleware(url, options) {\n      return new Promise(function (resolve, reject) {\n        fetchMiddleware(url, options, /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(url, options) {\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.t0 = resolve;\n                    _context5.next = 4;\n                    return fetch(url, options);\n\n                  case 4:\n                    _context5.t1 = _context5.sent;\n                    (0, _context5.t0)(_context5.t1);\n                    _context5.next = 11;\n                    break;\n\n                  case 8:\n                    _context5.prev = 8;\n                    _context5.t2 = _context5[\"catch\"](0);\n                    reject(_context5.t2);\n\n                  case 11:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5, null, [[0, 8]]);\n          }));\n\n          return function (_x17, _x18) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      });\n    };\n  }\n\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(request, callback) {\n      var agent, options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              agent = undefined;\n              options = {\n                method: 'POST',\n                body: request,\n                agent: agent,\n                headers: Object.assign({\n                  'Content-Type': 'application/json'\n                }, httpHeaders || {})\n              };\n              _context6.prev = 2;\n              too_many_requests_retries = 5;\n              waitTime = 500;\n\n            case 5:\n              if (!fetchWithMiddleware) {\n                _context6.next = 11;\n                break;\n              }\n\n              _context6.next = 8;\n              return fetchWithMiddleware(url, options);\n\n            case 8:\n              res = _context6.sent;\n              _context6.next = 14;\n              break;\n\n            case 11:\n              _context6.next = 13;\n              return fetch(url, options);\n\n            case 13:\n              res = _context6.sent;\n\n            case 14:\n              if (!(res.status !== 429\n              /* Too many requests */\n              )) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"break\", 27);\n\n            case 16:\n              if (!(disableRetryOnRateLimit === true)) {\n                _context6.next = 18;\n                break;\n              }\n\n              return _context6.abrupt(\"break\", 27);\n\n            case 18:\n              too_many_requests_retries -= 1;\n\n              if (!(too_many_requests_retries === 0)) {\n                _context6.next = 21;\n                break;\n              }\n\n              return _context6.abrupt(\"break\", 27);\n\n            case 21:\n              console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n              _context6.next = 24;\n              return sleep(waitTime);\n\n            case 24:\n              waitTime *= 2;\n\n            case 25:\n              _context6.next = 5;\n              break;\n\n            case 27:\n              _context6.next = 29;\n              return res.text();\n\n            case 29:\n              text = _context6.sent;\n\n              if (res.ok) {\n                callback(null, text);\n              } else {\n                callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n              }\n\n              _context6.next = 36;\n              break;\n\n            case 33:\n              _context6.prev = 33;\n              _context6.t0 = _context6[\"catch\"](2);\n              callback(_context6.t0);\n\n            case 36:\n              _context6.prev = 36;\n              return _context6.finish(36);\n\n            case 38:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 33, 36, 38]]);\n    }));\n\n    return function (_x19, _x20) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\n\nvar GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nvar GetConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nvar GetParsedConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nvar Connection = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, commitmentOrConfig) {\n    _classCallCheck(this, Connection);\n\n    _defineProperty(this, \"_commitment\", void 0);\n\n    _defineProperty(this, \"_rpcEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcWsEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcClient\", void 0);\n\n    _defineProperty(this, \"_rpcRequest\", void 0);\n\n    _defineProperty(this, \"_rpcBatchRequest\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocket\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocketConnected\", false);\n\n    _defineProperty(this, \"_rpcWebSocketHeartbeat\", null);\n\n    _defineProperty(this, \"_rpcWebSocketIdleTimeout\", null);\n\n    _defineProperty(this, \"_disableBlockhashCaching\", false);\n\n    _defineProperty(this, \"_pollingBlockhash\", false);\n\n    _defineProperty(this, \"_blockhashInfo\", {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    });\n\n    _defineProperty(this, \"_accountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_accountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_programAccountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_programAccountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_rootSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_rootSubscriptions\", {});\n\n    _defineProperty(this, \"_signatureSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_signatureSubscriptions\", {});\n\n    _defineProperty(this, \"_slotSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotSubscriptions\", {});\n\n    _defineProperty(this, \"_logsSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_logsSubscriptions\", {});\n\n    _defineProperty(this, \"_slotUpdateSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotUpdateSubscriptions\", {});\n\n    var url = new URL(endpoint);\n    var useHttps = url.protocol === 'https:';\n    var wsEndpoint;\n    var httpHeaders;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment);\n                _context7.next = 3;\n                return this._rpcRequest('getBalance', args);\n\n              case 3:\n                unsafeRes = _context7.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n                if (!('error' in res)) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context7.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getBalanceAndContext(_x21, _x22) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(publicKey, commitment) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getBalanceAndContext(publicKey, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBalance(_x23, _x24) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._rpcRequest('getBlockTime', [slot]);\n\n              case 2:\n                unsafeRes = _context9.sent;\n                res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n                if (!('error' in res)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n\n              case 6:\n                return _context9.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getBlockTime(_x25) {\n        return _getBlockTime.apply(this, arguments);\n      }\n\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._rpcRequest('minimumLedgerSlot', []);\n\n              case 2:\n                unsafeRes = _context10.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n\n              case 6:\n                return _context10.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._rpcRequest('getFirstAvailableBlock', []);\n\n              case 2:\n                unsafeRes = _context11.sent;\n                res = create(unsafeRes, SlotRpcResult);\n\n                if (!('error' in res)) {\n                  _context11.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get first available block: ' + res.error.message);\n\n              case 6:\n                return _context11.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context12.next = 3;\n                return this._rpcRequest('getSupply', args);\n\n              case 3:\n                unsafeRes = _context12.sent;\n                res = create(unsafeRes, GetSupplyRpcResult);\n\n                if (!('error' in res)) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get supply: ' + res.error.message);\n\n              case 7:\n                return _context12.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getSupply(_x26) {\n        return _getSupply.apply(this, arguments);\n      }\n\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n                _context13.next = 3;\n                return this._rpcRequest('getTokenSupply', args);\n\n              case 3:\n                unsafeRes = _context13.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token supply: ' + res.error.message);\n\n              case 7:\n                return _context13.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getTokenSupply(_x27, _x28) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                args = this._buildArgs([tokenAddress.toBase58()], commitment);\n                _context14.next = 3;\n                return this._rpcRequest('getTokenAccountBalance', args);\n\n              case 3:\n                unsafeRes = _context14.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n                if (!('error' in res)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token account balance: ' + res.error.message);\n\n              case 7:\n                return _context14.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getTokenAccountBalance(_x29, _x30) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'base64');\n                _context15.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context15.sent;\n                res = create(unsafeRes, GetTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context15.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context15.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getTokenAccountsByOwner(_x31, _x32, _x33) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _args = [ownerAddress.toBase58()];\n\n                if ('mint' in filter) {\n                  _args.push({\n                    mint: filter.mint.toBase58()\n                  });\n                } else {\n                  _args.push({\n                    programId: filter.programId.toBase58()\n                  });\n                }\n\n                args = this._buildArgs(_args, commitment, 'jsonParsed');\n                _context16.next = 5;\n                return this._rpcRequest('getTokenAccountsByOwner', args);\n\n              case 5:\n                unsafeRes = _context16.sent;\n                res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n                if (!('error' in res)) {\n                  _context16.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context16.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getParsedTokenAccountsByOwner(_x34, _x35, _x36) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                arg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n                args = arg.filter || arg.commitment ? [arg] : [];\n                _context17.next = 4;\n                return this._rpcRequest('getLargestAccounts', args);\n\n              case 4:\n                unsafeRes = _context17.sent;\n                res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n                if (!('error' in res)) {\n                  _context17.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get largest accounts: ' + res.error.message);\n\n              case 8:\n                return _context17.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getLargestAccounts(_x37) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                args = this._buildArgs([mintAddress.toBase58()], commitment);\n                _context18.next = 3;\n                return this._rpcRequest('getTokenLargestAccounts', args);\n\n              case 3:\n                unsafeRes = _context18.sent;\n                res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n                if (!('error' in res)) {\n                  _context18.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get token largest accounts: ' + res.error.message);\n\n              case 7:\n                return _context18.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getTokenLargestAccounts(_x38, _x39) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n                _context19.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context19.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context19.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getAccountInfoAndContext(_x40, _x41) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(publicKey, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n                _context20.next = 3;\n                return this._rpcRequest('getAccountInfo', args);\n\n              case 3:\n                unsafeRes = _context20.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n\n              case 7:\n                return _context20.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getParsedAccountInfo(_x42, _x43) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(publicKey, commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.prev = 0;\n                _context21.next = 3;\n                return this.getAccountInfoAndContext(publicKey, commitment);\n\n              case 3:\n                res = _context21.sent;\n                return _context21.abrupt(\"return\", res.value);\n\n              case 7:\n                _context21.prev = 7;\n                _context21.t0 = _context21[\"catch\"](0);\n                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context21.t0);\n\n              case 10:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[0, 7]]);\n      }));\n\n      function getAccountInfo(_x44, _x45) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(publicKeys, commitment) {\n        var keys, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                keys = publicKeys.map(function (key) {\n                  return key.toBase58();\n                });\n                args = this._buildArgs([keys], commitment, 'base64');\n                _context22.next = 4;\n                return this._rpcRequest('getMultipleAccounts', args);\n\n              case 4:\n                unsafeRes = _context22.sent;\n                res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n                if (!('error' in res)) {\n                  _context22.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n\n              case 8:\n                return _context22.abrupt(\"return\", res.result.value);\n\n              case 9:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getMultipleAccountsInfo(_x46, _x47) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(publicKey, commitment, epoch) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n                  epoch: epoch\n                } : undefined);\n                _context23.next = 3;\n                return this._rpcRequest('getStakeActivation', args);\n\n              case 3:\n                unsafeRes = _context23.sent;\n                res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n                if (!('error' in res)) {\n                  _context23.next = 7;\n                  break;\n                }\n\n                throw new Error(\"failed to get Stake Activation \".concat(publicKey.toBase58(), \": \").concat(res.error.message));\n\n              case 7:\n                return _context23.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getStakeActivation(_x48, _x49, _x50) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(programId, configOrCommitment) {\n        var extra, commitment, encoding, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n                    encoding = configOrCommitment.encoding;\n\n                    if (configOrCommitment.dataSlice) {\n                      extra.dataSlice = configOrCommitment.dataSlice;\n                    }\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n                _context24.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context24.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context24.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context24.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getProgramAccounts(_x51, _x52) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(programId, configOrCommitment) {\n        var extra, commitment, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n                _context25.next = 5;\n                return this._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context25.sent;\n                res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n                if (!('error' in res)) {\n                  _context25.next = 9;\n                  break;\n                }\n\n                throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n\n              case 9:\n                return _context25.abrupt(\"return\", res.result);\n\n              case 10:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getParsedProgramAccounts(_x53, _x54) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n\n      return getParsedProgramAccounts;\n    }()\n    /**\n     * Confirm the transaction identified by the specified signature.\n     */\n\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(signature, commitment) {\n        var _this6 = this;\n\n        var decodedSignature, start, subscriptionCommitment, subscriptionId, response, confirmPromise, timeoutMs, duration;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.prev = 0;\n                decodedSignature = bs58.decode(signature);\n                _context26.next = 7;\n                break;\n\n              case 4:\n                _context26.prev = 4;\n                _context26.t0 = _context26[\"catch\"](0);\n                throw new Error('signature must be base58 encoded: ' + signature);\n\n              case 7:\n                assert(decodedSignature.length === 64, 'signature has invalid length');\n                start = Date.now();\n                subscriptionCommitment = commitment || this.commitment;\n                response = null;\n                confirmPromise = new Promise(function (resolve, reject) {\n                  try {\n                    subscriptionId = _this6.onSignature(signature, function (result, context) {\n                      subscriptionId = undefined;\n                      response = {\n                        context: context,\n                        value: result\n                      };\n                      resolve(null);\n                    }, subscriptionCommitment);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n                timeoutMs = 60 * 1000;\n                _context26.t1 = subscriptionCommitment;\n                _context26.next = _context26.t1 === 'processed' ? 16 : _context26.t1 === 'recent' ? 16 : _context26.t1 === 'single' ? 16 : _context26.t1 === 'confirmed' ? 16 : _context26.t1 === 'singleGossip' ? 16 : 18;\n                break;\n\n              case 16:\n                timeoutMs = 30 * 1000;\n                return _context26.abrupt(\"break\", 18);\n\n              case 18:\n                _context26.prev = 18;\n                _context26.next = 21;\n                return promiseTimeout(confirmPromise, timeoutMs);\n\n              case 21:\n                _context26.prev = 21;\n\n                if (subscriptionId) {\n                  this.removeSignatureListener(subscriptionId);\n                }\n\n                return _context26.finish(21);\n\n              case 24:\n                if (!(response === null)) {\n                  _context26.next = 27;\n                  break;\n                }\n\n                duration = (Date.now() - start) / 1000;\n                throw new Error(\"Transaction was not confirmed in \".concat(duration.toFixed(2), \" seconds. It is unknown if it succeeded or failed. Check signature \").concat(signature, \" using the Solana Explorer or CLI tools.\"));\n\n              case 27:\n                return _context26.abrupt(\"return\", response);\n\n              case 28:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this, [[0, 4], [18,, 21, 24]]);\n      }));\n\n      function confirmTransaction(_x55, _x56) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n\n      return confirmTransaction;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this._rpcRequest('getClusterNodes', []);\n\n              case 2:\n                unsafeRes = _context27.sent;\n                res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n                if (!('error' in res)) {\n                  _context27.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get cluster nodes: ' + res.error.message);\n\n              case 6:\n                return _context27.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context28.next = 3;\n                return this._rpcRequest('getVoteAccounts', args);\n\n              case 3:\n                unsafeRes = _context28.sent;\n                res = create(unsafeRes, GetVoteAccounts);\n\n                if (!('error' in res)) {\n                  _context28.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get vote accounts: ' + res.error.message);\n\n              case 7:\n                return _context28.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getVoteAccounts(_x57) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context29.next = 3;\n                return this._rpcRequest('getSlot', args);\n\n              case 3:\n                unsafeRes = _context29.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context29.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot: ' + res.error.message);\n\n              case 7:\n                return _context29.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function getSlot(_x58) {\n        return _getSlot.apply(this, arguments);\n      }\n\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context30.next = 3;\n                return this._rpcRequest('getSlotLeader', args);\n\n              case 3:\n                unsafeRes = _context30.sent;\n                res = create(unsafeRes, jsonRpcResult(string()));\n\n                if (!('error' in res)) {\n                  _context30.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leader: ' + res.error.message);\n\n              case 7:\n                return _context30.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getSlotLeader(_x59) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                args = [startSlot, limit];\n                _context31.next = 3;\n                return this._rpcRequest('getSlotLeaders', args);\n\n              case 3:\n                unsafeRes = _context31.sent;\n                res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n                if (!('error' in res)) {\n                  _context31.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get slot leaders: ' + res.error.message);\n\n              case 7:\n                return _context31.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getSlotLeaders(_x60, _x61) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getSignatureStatuses([signature], config);\n\n              case 2:\n                _yield$this$getSignat = _context32.sent;\n                context = _yield$this$getSignat.context;\n                values = _yield$this$getSignat.value;\n                assert(values.length === 1);\n                value = values[0];\n                return _context32.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getSignatureStatus(_x62, _x63) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                params = [signatures];\n\n                if (config) {\n                  params.push(config);\n                }\n\n                _context33.next = 4;\n                return this._rpcRequest('getSignatureStatuses', params);\n\n              case 4:\n                unsafeRes = _context33.sent;\n                res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n                if (!('error' in res)) {\n                  _context33.next = 8;\n                  break;\n                }\n\n                throw new Error('failed to get signature status: ' + res.error.message);\n\n              case 8:\n                return _context33.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function getSignatureStatuses(_x64, _x65) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context34.next = 3;\n                return this._rpcRequest('getTransactionCount', args);\n\n              case 3:\n                unsafeRes = _context34.sent;\n                res = create(unsafeRes, jsonRpcResult(number()));\n\n                if (!('error' in res)) {\n                  _context34.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get transaction count: ' + res.error.message);\n\n              case 7:\n                return _context34.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function getTransactionCount(_x66) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context35.next = 3;\n                return this._rpcRequest('getSupply', args);\n\n              case 3:\n                unsafeRes = _context35.sent;\n                res = create(unsafeRes, GetSupplyRpcResult);\n\n                if (!('error' in res)) {\n                  _context35.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get total supply: ' + res.error.message);\n\n              case 7:\n                return _context35.abrupt(\"return\", res.result.value.total);\n\n              case 8:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function getTotalSupply(_x67) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context36.next = 3;\n                return this._rpcRequest('getInflationGovernor', args);\n\n              case 3:\n                unsafeRes = _context36.sent;\n                res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n                if (!('error' in res)) {\n                  _context36.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation: ' + res.error.message);\n\n              case 7:\n                return _context36.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function getInflationGovernor(_x68) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(addresses, epoch, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                args = this._buildArgs([addresses.map(function (pubkey) {\n                  return pubkey.toBase58();\n                })], commitment, undefined, {\n                  epoch: epoch\n                });\n                _context37.next = 3;\n                return this._rpcRequest('getInflationReward', args);\n\n              case 3:\n                unsafeRes = _context37.sent;\n                res = create(unsafeRes, GetInflationRewardResult);\n\n                if (!('error' in res)) {\n                  _context37.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get inflation reward: ' + res.error.message);\n\n              case 7:\n                return _context37.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function getInflationReward(_x69, _x70, _x71) {\n        return _getInflationReward.apply(this, arguments);\n      }\n\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context38.next = 3;\n                return this._rpcRequest('getEpochInfo', args);\n\n              case 3:\n                unsafeRes = _context38.sent;\n                res = create(unsafeRes, GetEpochInfoRpcResult);\n\n                if (!('error' in res)) {\n                  _context38.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get epoch info: ' + res.error.message);\n\n              case 7:\n                return _context38.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getEpochInfo(_x72) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return this._rpcRequest('getEpochSchedule', []);\n\n              case 2:\n                unsafeRes = _context39.sent;\n                res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context39.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get epoch schedule: ' + res.error.message);\n\n              case 6:\n                epochSchedule = res.result;\n                return _context39.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n\n              case 8:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.next = 2;\n                return this._rpcRequest('getLeaderSchedule', []);\n\n              case 2:\n                unsafeRes = _context40.sent;\n                res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n                if (!('error' in res)) {\n                  _context40.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get leader schedule: ' + res.error.message);\n\n              case 6:\n                return _context40.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                args = this._buildArgs([dataLength], commitment);\n                _context41.next = 3;\n                return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n\n              case 3:\n                unsafeRes = _context41.sent;\n                res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n                if (!('error' in res)) {\n                  _context41.next = 8;\n                  break;\n                }\n\n                console.warn('Unable to fetch minimum balance for rent exemption');\n                return _context41.abrupt(\"return\", 0);\n\n              case 8:\n                return _context41.abrupt(\"return\", res.result);\n\n              case 9:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function getMinimumBalanceForRentExemption(_x73, _x74) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     */\n\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                args = this._buildArgs([], commitment);\n                _context42.next = 3;\n                return this._rpcRequest('getRecentBlockhash', args);\n\n              case 3:\n                unsafeRes = _context42.sent;\n                res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n                if (!('error' in res)) {\n                  _context42.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent blockhash: ' + res.error.message);\n\n              case 7:\n                return _context42.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function getRecentBlockhashAndContext(_x75) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                args = this._buildArgs(limit ? [limit] : []);\n                _context43.next = 3;\n                return this._rpcRequest('getRecentPerformanceSamples', args);\n\n              case 3:\n                unsafeRes = _context43.sent;\n                res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n                if (!('error' in res)) {\n                  _context43.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get recent performance samples: ' + res.error.message);\n\n              case 7:\n                return _context43.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function getRecentPerformanceSamples(_x76) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     */\n\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                args = this._buildArgs([blockhash], commitment);\n                _context44.next = 3;\n                return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n\n              case 3:\n                unsafeRes = _context44.sent;\n                res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n                if (!('error' in res)) {\n                  _context44.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get fee calculator: ' + res.error.message);\n\n              case 7:\n                _res$result = res.result, context = _res$result.context, value = _res$result.value;\n                return _context44.abrupt(\"return\", {\n                  context: context,\n                  value: value !== null ? value.feeCalculator : null\n                });\n\n              case 9:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function getFeeCalculatorForBlockhash(_x77, _x78) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     */\n\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                _context45.prev = 0;\n                _context45.next = 3;\n                return this.getRecentBlockhashAndContext(commitment);\n\n              case 3:\n                res = _context45.sent;\n                return _context45.abrupt(\"return\", res.value);\n\n              case 7:\n                _context45.prev = 7;\n                _context45.t0 = _context45[\"catch\"](0);\n                throw new Error('failed to get recent blockhash: ' + _context45.t0);\n\n              case 10:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this, [[0, 7]]);\n      }));\n\n      function getRecentBlockhash(_x79) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the node version\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return this._rpcRequest('getVersion', []);\n\n              case 2:\n                unsafeRes = _context46.sent;\n                res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n                if (!('error' in res)) {\n                  _context46.next = 6;\n                  break;\n                }\n\n                throw new Error('failed to get version: ' + res.error.message);\n\n              case 6:\n                return _context46.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     */\n\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(slot, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n                _context47.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context47.sent;\n                res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n                if (!('error' in res)) {\n                  _context47.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context47.next = 10;\n                  break;\n                }\n\n                return _context47.abrupt(\"return\", result);\n\n              case 10:\n                return _context47.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref5) {\n                    var transaction = _ref5.transaction,\n                        meta = _ref5.meta;\n                    var message = new Message(transaction.message);\n                    return {\n                      meta: meta,\n                      transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                        message: message\n                      })\n                    };\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function getBlock(_x80, _x81) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n    /**\n     * Fetch a processed transaction from the cluster.\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(signature, opts) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n                _context48.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context48.sent;\n                res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context48.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context48.next = 10;\n                  break;\n                }\n\n                return _context48.abrupt(\"return\", result);\n\n              case 10:\n                return _context48.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: new Message(result.transaction.message)\n                  })\n                }));\n\n              case 11:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function getTransaction(_x82, _x83) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(slot, commitment) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                _context49.next = 2;\n                return this.getBlock(slot, {\n                  commitment: commitment\n                });\n\n              case 2:\n                result = _context49.sent;\n\n                if (result) {\n                  _context49.next = 5;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 5:\n                return _context49.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transactions: result.transactions.map(function (_ref6) {\n                    var transaction = _ref6.transaction,\n                        meta = _ref6.meta;\n                    return {\n                      meta: meta,\n                      transaction: Transaction.populate(transaction.message, transaction.signatures)\n                    };\n                  })\n                }));\n\n              case 6:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function getConfirmedBlock(_x84, _x85) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     */\n\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                  transactionDetails: 'signatures',\n                  rewards: false\n                });\n                _context50.next = 3;\n                return this._rpcRequest('getConfirmedBlock', args);\n\n              case 3:\n                unsafeRes = _context50.sent;\n                res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n\n                if (!('error' in res)) {\n                  _context50.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed block: ' + res.error.message);\n\n              case 7:\n                result = res.result;\n\n                if (result) {\n                  _context50.next = 10;\n                  break;\n                }\n\n                throw new Error('Confirmed block ' + slot + ' not found');\n\n              case 10:\n                return _context50.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n\n      function getConfirmedBlockSignatures(_x86, _x87) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     */\n\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(signature, commitment) {\n        var result, _result$transaction, message, signatures;\n\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.next = 2;\n                return this.getTransaction(signature, {\n                  commitment: commitment\n                });\n\n              case 2:\n                result = _context51.sent;\n\n                if (result) {\n                  _context51.next = 5;\n                  break;\n                }\n\n                return _context51.abrupt(\"return\", result);\n\n              case 5:\n                _result$transaction = result.transaction, message = _result$transaction.message, signatures = _result$transaction.signatures;\n                return _context51.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: Transaction.populate(message, signatures)\n                }));\n\n              case 7:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n\n      function getConfirmedTransaction(_x88, _x89) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                _context52.next = 3;\n                return this._rpcRequest('getConfirmedTransaction', args);\n\n              case 3:\n                unsafeRes = _context52.sent;\n                res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context52.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed transaction: ' + res.error.message);\n\n              case 7:\n                return _context52.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n\n      function getParsedConfirmedTransaction(_x90, _x91) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(signatures, commitment) {\n        var _this7 = this;\n\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                batch = signatures.map(function (signature) {\n                  var args = _this7._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n                  return {\n                    methodName: 'getConfirmedTransaction',\n                    args: args\n                  };\n                });\n                _context53.next = 3;\n                return this._rpcBatchRequest(batch);\n\n              case 3:\n                unsafeRes = _context53.sent;\n                res = unsafeRes.map(function (unsafeRes) {\n                  var res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n                  if ('error' in res) {\n                    throw new Error('failed to get confirmed transactions: ' + res.error.message);\n                  }\n\n                  return res.result;\n                });\n                return _context53.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n\n      function getParsedConfirmedTransactions(_x92, _x93) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                options = {};\n                _context54.next = 3;\n                return this.getFirstAvailableBlock();\n\n              case 3:\n                firstAvailableBlock = _context54.sent;\n\n              case 4:\n                if ('until' in options) {\n                  _context54.next = 24;\n                  break;\n                }\n\n                startSlot--;\n\n                if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                  _context54.next = 8;\n                  break;\n                }\n\n                return _context54.abrupt(\"break\", 24);\n\n              case 8:\n                _context54.prev = 8;\n                _context54.next = 11;\n                return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n              case 11:\n                block = _context54.sent;\n\n                if (block.signatures.length > 0) {\n                  options.until = block.signatures[block.signatures.length - 1].toString();\n                }\n\n                _context54.next = 22;\n                break;\n\n              case 15:\n                _context54.prev = 15;\n                _context54.t0 = _context54[\"catch\"](8);\n\n                if (!_context54.t0.message.includes('skipped')) {\n                  _context54.next = 21;\n                  break;\n                }\n\n                return _context54.abrupt(\"continue\", 4);\n\n              case 21:\n                throw _context54.t0;\n\n              case 22:\n                _context54.next = 4;\n                break;\n\n              case 24:\n                _context54.next = 26;\n                return this.getSlot('finalized');\n\n              case 26:\n                highestConfirmedRoot = _context54.sent;\n\n              case 27:\n                if ('before' in options) {\n                  _context54.next = 47;\n                  break;\n                }\n\n                endSlot++;\n\n                if (!(endSlot > highestConfirmedRoot)) {\n                  _context54.next = 31;\n                  break;\n                }\n\n                return _context54.abrupt(\"break\", 47);\n\n              case 31:\n                _context54.prev = 31;\n                _context54.next = 34;\n                return this.getConfirmedBlockSignatures(endSlot);\n\n              case 34:\n                _block = _context54.sent;\n\n                if (_block.signatures.length > 0) {\n                  options.before = _block.signatures[_block.signatures.length - 1].toString();\n                }\n\n                _context54.next = 45;\n                break;\n\n              case 38:\n                _context54.prev = 38;\n                _context54.t1 = _context54[\"catch\"](31);\n\n                if (!_context54.t1.message.includes('skipped')) {\n                  _context54.next = 44;\n                  break;\n                }\n\n                return _context54.abrupt(\"continue\", 27);\n\n              case 44:\n                throw _context54.t1;\n\n              case 45:\n                _context54.next = 27;\n                break;\n\n              case 47:\n                _context54.next = 49;\n                return this.getConfirmedSignaturesForAddress2(address, options);\n\n              case 49:\n                confirmedSignatureInfo = _context54.sent;\n                return _context54.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                  return info.signature;\n                }));\n\n              case 51:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this, [[8, 15], [31, 38]]);\n      }));\n\n      function getConfirmedSignaturesForAddress(_x94, _x95, _x96) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context55.next = 3;\n                return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n\n              case 3:\n                unsafeRes = _context55.sent;\n                res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n                if (!('error' in res)) {\n                  _context55.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context55.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n\n      function getConfirmedSignaturesForAddress2(_x97, _x98, _x99) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n                _context56.next = 3;\n                return this._rpcRequest('getSignaturesForAddress', args);\n\n              case 3:\n                unsafeRes = _context56.sent;\n                res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n                if (!('error' in res)) {\n                  _context56.next = 7;\n                  break;\n                }\n\n                throw new Error('failed to get signatures for address: ' + res.error.message);\n\n              case 7:\n                return _context56.abrupt(\"return\", res.result);\n\n              case 8:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n\n      function getSignaturesForAddress(_x100, _x101, _x102) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n\n      return getSignaturesForAddress;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(nonceAccount, commitment) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                _context57.next = 2;\n                return this.getAccountInfoAndContext(nonceAccount, commitment);\n\n              case 2:\n                _yield$this$getAccoun = _context57.sent;\n                context = _yield$this$getAccoun.context;\n                accountInfo = _yield$this$getAccoun.value;\n                value = null;\n\n                if (accountInfo !== null) {\n                  value = NonceAccount.fromAccountData(accountInfo.data);\n                }\n\n                return _context57.abrupt(\"return\", {\n                  context: context,\n                  value: value\n                });\n\n              case 8:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      function getNonceAndContext(_x103, _x104) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(nonceAccount, commitment) {\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                _context58.next = 2;\n                return this.getNonceAndContext(nonceAccount, commitment).then(function (x) {\n                  return x.value;\n                }).catch(function (e) {\n                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n                });\n\n              case 2:\n                return _context58.abrupt(\"return\", _context58.sent);\n\n              case 3:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n\n      function getNonce(_x105, _x106) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                _context59.next = 2;\n                return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n\n              case 2:\n                unsafeRes = _context59.sent;\n                res = create(unsafeRes, RequestAirdropRpcResult);\n\n                if (!('error' in res)) {\n                  _context59.next = 6;\n                  break;\n                }\n\n                throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n\n              case 6:\n                return _context59.abrupt(\"return\", res.result);\n\n              case 7:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      function requestAirdrop(_x107, _x108) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_recentBlockhash\",\n    value: function () {\n      var _recentBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                if (disableCache) {\n                  _context60.next = 10;\n                  break;\n                }\n\n              case 1:\n                if (!this._pollingBlockhash) {\n                  _context60.next = 6;\n                  break;\n                }\n\n                _context60.next = 4;\n                return sleep(100);\n\n              case 4:\n                _context60.next = 1;\n                break;\n\n              case 6:\n                timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n                expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n                if (!(this._blockhashInfo.recentBlockhash !== null && !expired)) {\n                  _context60.next = 10;\n                  break;\n                }\n\n                return _context60.abrupt(\"return\", this._blockhashInfo.recentBlockhash);\n\n              case 10:\n                _context60.next = 12;\n                return this._pollNewBlockhash();\n\n              case 12:\n                return _context60.abrupt(\"return\", _context60.sent);\n\n              case 13:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n\n      function _recentBlockhash(_x109) {\n        return _recentBlockhash2.apply(this, arguments);\n      }\n\n      return _recentBlockhash;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61() {\n        var startTime, i, _yield$this$getRecent, blockhash;\n\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                this._pollingBlockhash = true;\n                _context61.prev = 1;\n                startTime = Date.now();\n                i = 0;\n\n              case 4:\n                if (!(i < 50)) {\n                  _context61.next = 17;\n                  break;\n                }\n\n                _context61.next = 7;\n                return this.getRecentBlockhash('finalized');\n\n              case 7:\n                _yield$this$getRecent = _context61.sent;\n                blockhash = _yield$this$getRecent.blockhash;\n\n                if (!(this._blockhashInfo.recentBlockhash != blockhash)) {\n                  _context61.next = 12;\n                  break;\n                }\n\n                this._blockhashInfo = {\n                  recentBlockhash: blockhash,\n                  lastFetch: Date.now(),\n                  transactionSignatures: [],\n                  simulatedSignatures: []\n                };\n                return _context61.abrupt(\"return\", blockhash);\n\n              case 12:\n                _context61.next = 14;\n                return sleep(MS_PER_SLOT / 2);\n\n              case 14:\n                i++;\n                _context61.next = 4;\n                break;\n\n              case 17:\n                throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n\n              case 18:\n                _context61.prev = 18;\n                this._pollingBlockhash = false;\n                return _context61.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this, [[1,, 18, 21]]);\n      }));\n\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n\n      return _pollNewBlockhash;\n    }()\n    /**\n     * Simulate a transaction\n     */\n\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(transaction, signers) {\n        var disableCache, signature, signData, wireTransaction, encodedTransaction, config, args, unsafeRes, res, logs, traceIndent, logTrace;\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                if (!(transaction.nonceInfo && signers)) {\n                  _context62.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context62.next = 22;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context62.next = 7;\n                return this._recentBlockhash(disableCache);\n\n              case 7:\n                transaction.recentBlockhash = _context62.sent;\n\n                if (signers) {\n                  _context62.next = 10;\n                  break;\n                }\n\n                return _context62.abrupt(\"break\", 22);\n\n              case 10:\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context62.next = 13;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 13:\n                signature = transaction.signature.toString('base64');\n\n                if (!(!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature))) {\n                  _context62.next = 19;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.simulatedSignatures.push(signature);\n\n                return _context62.abrupt(\"break\", 22);\n\n              case 19:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 20:\n                _context62.next = 5;\n                break;\n\n              case 22:\n                signData = transaction.serializeMessage();\n                wireTransaction = transaction._serialize(signData);\n                encodedTransaction = wireTransaction.toString('base64');\n                config = {\n                  encoding: 'base64',\n                  commitment: this.commitment\n                };\n\n                if (signers) {\n                  config.sigVerify = true;\n                }\n\n                args = [encodedTransaction, config];\n                _context62.next = 30;\n                return this._rpcRequest('simulateTransaction', args);\n\n              case 30:\n                unsafeRes = _context62.sent;\n                res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n                if (!('error' in res)) {\n                  _context62.next = 35;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n\n              case 35:\n                return _context62.abrupt(\"return\", res.result);\n\n              case 36:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62, this);\n      }));\n\n      function simulateTransaction(_x110, _x111) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(transaction, signers, options) {\n        var disableCache, signature, wireTransaction;\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                if (!transaction.nonceInfo) {\n                  _context63.next = 4;\n                  break;\n                }\n\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n                _context63.next = 20;\n                break;\n\n              case 4:\n                disableCache = this._disableBlockhashCaching;\n\n              case 5:\n                _context63.next = 7;\n                return this._recentBlockhash(disableCache);\n\n              case 7:\n                transaction.recentBlockhash = _context63.sent;\n                transaction.sign.apply(transaction, _toConsumableArray(signers));\n\n                if (transaction.signature) {\n                  _context63.next = 11;\n                  break;\n                }\n\n                throw new Error('!signature');\n\n              case 11:\n                signature = transaction.signature.toString('base64');\n\n                if (this._blockhashInfo.transactionSignatures.includes(signature)) {\n                  _context63.next = 17;\n                  break;\n                }\n\n                // The signature of this transaction has not been seen before with the\n                // current recentBlockhash, all done. Let's break\n                this._blockhashInfo.transactionSignatures.push(signature);\n\n                return _context63.abrupt(\"break\", 20);\n\n              case 17:\n                // This transaction would be treated as duplicate (its derived signature\n                // matched to one of already recorded signatures).\n                // So, we must fetch a new blockhash for a different signature by disabling\n                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n                disableCache = true;\n\n              case 18:\n                _context63.next = 5;\n                break;\n\n              case 20:\n                wireTransaction = transaction.serialize();\n                _context63.next = 23;\n                return this.sendRawTransaction(wireTransaction, options);\n\n              case 23:\n                return _context63.abrupt(\"return\", _context63.sent);\n\n              case 24:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63, this);\n      }));\n\n      function sendTransaction(_x112, _x113, _x114) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                encodedTransaction = toBuffer(rawTransaction).toString('base64');\n                _context64.next = 3;\n                return this.sendEncodedTransaction(encodedTransaction, options);\n\n              case 3:\n                result = _context64.sent;\n                return _context64.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      function sendRawTransaction(_x115, _x116) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs, traceIndent, logTrace;\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                config = {\n                  encoding: 'base64'\n                };\n                skipPreflight = options && options.skipPreflight;\n                preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n                if (skipPreflight) {\n                  config.skipPreflight = skipPreflight;\n                }\n\n                if (preflightCommitment) {\n                  config.preflightCommitment = preflightCommitment;\n                }\n\n                args = [encodedTransaction, config];\n                _context65.next = 8;\n                return this._rpcRequest('sendTransaction', args);\n\n              case 8:\n                unsafeRes = _context65.sent;\n                res = create(unsafeRes, SendTransactionRpcResult);\n\n                if (!('error' in res)) {\n                  _context65.next = 13;\n                  break;\n                }\n\n                if ('data' in res.error) {\n                  logs = res.error.data.logs;\n\n                  if (logs && Array.isArray(logs)) {\n                    traceIndent = '\\n    ';\n                    logTrace = traceIndent + logs.join(traceIndent);\n                    console.error(res.error.message, logTrace);\n                  }\n                }\n\n                throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n\n              case 13:\n                return _context65.abrupt(\"return\", res.result);\n\n              case 14:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65, this);\n      }));\n\n      function sendEncodedTransaction(_x117, _x118) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this8 = this;\n\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this8._rpcWebSocket.notify('ping').catch(function () {});\n      }, 5000);\n\n      this._updateSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n\n      this._resetSubscriptions();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(sub, rpcMethod, rpcArgs) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                if (!(sub.subscriptionId == null)) {\n                  _context66.next = 13;\n                  break;\n                }\n\n                sub.subscriptionId = 'subscribing';\n                _context66.prev = 2;\n                _context66.next = 5;\n                return this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n              case 5:\n                id = _context66.sent;\n\n                if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = id;\n                }\n\n                _context66.next = 13;\n                break;\n\n              case 9:\n                _context66.prev = 9;\n                _context66.t0 = _context66[\"catch\"](2);\n\n                if (sub.subscriptionId === 'subscribing') {\n                  // eslint-disable-next-line require-atomic-updates\n                  sub.subscriptionId = null;\n                }\n\n                console.error(\"\".concat(rpcMethod, \" error for argument\"), rpcArgs, _context66.t0.message);\n\n              case 13:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this, [[2, 9]]);\n      }));\n\n      function _subscribe(_x119, _x120, _x121) {\n        return _subscribe2.apply(this, arguments);\n      }\n\n      return _subscribe;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _unsubscribe2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(sub, rpcMethod) {\n        var subscriptionId, unsubscribeId;\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                subscriptionId = sub.subscriptionId;\n\n                if (!(subscriptionId != null && typeof subscriptionId != 'string')) {\n                  _context67.next = 11;\n                  break;\n                }\n\n                unsubscribeId = subscriptionId;\n                _context67.prev = 3;\n                _context67.next = 6;\n                return this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n\n              case 6:\n                _context67.next = 11;\n                break;\n\n              case 8:\n                _context67.prev = 8;\n                _context67.t0 = _context67[\"catch\"](3);\n                console.error(\"\".concat(rpcMethod, \" error:\"), _context67.t0.message);\n\n              case 11:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67, this, [[3, 8]]);\n      }));\n\n      function _unsubscribe(_x122, _x123) {\n        return _unsubscribe2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_resetSubscriptions\",\n    value: function _resetSubscriptions() {\n      Object.values(this._accountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._programAccountChangeSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._rootSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._signatureSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._slotSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n      Object.values(this._slotUpdateSubscriptions).forEach(function (s) {\n        return s.subscriptionId = null;\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function _updateSubscriptions() {\n      var _this9 = this;\n\n      var accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n      var programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n      var slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n      var slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n      var signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n      var rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n      var logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n      if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n        if (this._rpcWebSocketConnected) {\n          this._rpcWebSocketConnected = false;\n          this._rpcWebSocketIdleTimeout = setTimeout(function () {\n            _this9._rpcWebSocketIdleTimeout = null;\n\n            _this9._rpcWebSocket.close();\n          }, 500);\n        }\n\n        return;\n      }\n\n      if (this._rpcWebSocketIdleTimeout !== null) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n        this._rpcWebSocketConnected = true;\n      }\n\n      if (!this._rpcWebSocketConnected) {\n        this._rpcWebSocket.connect();\n\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(accountKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var id = _step3.value;\n          var sub = this._accountChangeSubscriptions[id];\n\n          this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(programKeys),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _id = _step4.value;\n          var _sub = this._programAccountChangeSubscriptions[_id];\n\n          this._subscribe(_sub, 'programSubscribe', this._buildArgs([_sub.programId], _sub.commitment, 'base64', {\n            filters: _sub.filters\n          }));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(slotKeys),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _id2 = _step5.value;\n          var _sub2 = this._slotSubscriptions[_id2];\n\n          this._subscribe(_sub2, 'slotSubscribe', []);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(slotUpdateKeys),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _id3 = _step6.value;\n          var _sub3 = this._slotUpdateSubscriptions[_id3];\n\n          this._subscribe(_sub3, 'slotsUpdatesSubscribe', []);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(signatureKeys),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _id4 = _step7.value;\n          var _sub4 = this._signatureSubscriptions[_id4];\n          var args = [_sub4.signature];\n          if (_sub4.options) args.push(_sub4.options);\n\n          this._subscribe(_sub4, 'signatureSubscribe', args);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(rootKeys),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _id5 = _step8.value;\n          var _sub5 = this._rootSubscriptions[_id5];\n\n          this._subscribe(_sub5, 'rootSubscribe', []);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(logsKeys),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _id6 = _step9.value;\n          var _sub6 = this._logsSubscriptions[_id6];\n          var filter = void 0;\n\n          if (typeof _sub6.filter === 'object') {\n            filter = {\n              mentions: [_sub6.filter.toString()]\n            };\n          } else {\n            filter = _sub6.filter;\n          }\n\n          this._subscribe(_sub6, 'logsSubscribe', this._buildArgs([filter], _sub6.commitment));\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var res = create(notification, AccountNotificationResult);\n\n      for (var _i5 = 0, _Object$values = Object.values(this._accountChangeSubscriptions); _i5 < _Object$values.length; _i5++) {\n        var sub = _Object$values[_i5];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result.value, res.result.context);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var id = ++this._accountChangeSubscriptionCounter;\n      this._accountChangeSubscriptions[id] = {\n        publicKey: publicKey.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                if (!this._accountChangeSubscriptions[id]) {\n                  _context68.next = 8;\n                  break;\n                }\n\n                subInfo = this._accountChangeSubscriptions[id];\n                delete this._accountChangeSubscriptions[id];\n                _context68.next = 5;\n                return this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context68.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      function removeAccountChangeListener(_x124) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var res = create(notification, ProgramAccountNotificationResult);\n\n      for (var _i6 = 0, _Object$values2 = Object.values(this._programAccountChangeSubscriptions); _i6 < _Object$values2.length; _i6++) {\n        var sub = _Object$values2[_i6];\n\n        if (sub.subscriptionId === res.subscription) {\n          var _res$result2 = res.result,\n              value = _res$result2.value,\n              context = _res$result2.context;\n          sub.callback({\n            accountId: value.pubkey,\n            accountInfo: value.account\n          }, context);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var id = ++this._programAccountChangeSubscriptionCounter;\n      this._programAccountChangeSubscriptions[id] = {\n        programId: programId.toBase58(),\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null,\n        filters: filters\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                if (!this._programAccountChangeSubscriptions[id]) {\n                  _context69.next = 8;\n                  break;\n                }\n\n                subInfo = this._programAccountChangeSubscriptions[id];\n                delete this._programAccountChangeSubscriptions[id];\n                _context69.next = 5;\n                return this._unsubscribe(subInfo, 'programUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context69.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown program account change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n\n      function removeProgramAccountChangeListener(_x125) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var id = ++this._logsSubscriptionCounter;\n      this._logsSubscriptions[id] = {\n        filter: filter,\n        callback: callback,\n        commitment: commitment,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id subscription id to deregister.\n     */\n\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                if (this._logsSubscriptions[id]) {\n                  _context70.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Unknown logs id: \".concat(id));\n\n              case 2:\n                subInfo = this._logsSubscriptions[id];\n                delete this._logsSubscriptions[id];\n                _context70.next = 6;\n                return this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n              case 6:\n                this._updateSubscriptions();\n\n              case 7:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function removeOnLogsListener(_x126) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var res = create(notification, LogsNotificationResult);\n      var keys = Object.keys(this._logsSubscriptions).map(Number);\n\n      var _iterator10 = _createForOfIteratorHelper(keys),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var id = _step10.value;\n          var sub = this._logsSubscriptions[id];\n\n          if (sub.subscriptionId === res.subscription) {\n            sub.callback(res.result.value, res.result.context);\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var res = create(notification, SlotNotificationResult);\n\n      for (var _i7 = 0, _Object$values3 = Object.values(this._slotSubscriptions); _i7 < _Object$values3.length; _i7++) {\n        var sub = _Object$values3[_i7];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      var id = ++this._slotSubscriptionCounter;\n      this._slotSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                if (!this._slotSubscriptions[id]) {\n                  _context71.next = 8;\n                  break;\n                }\n\n                subInfo = this._slotSubscriptions[id];\n                delete this._slotSubscriptions[id];\n                _context71.next = 5;\n                return this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context71.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown slot change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function removeSlotChangeListener(_x127) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var res = create(notification, SlotUpdateNotificationResult);\n\n      for (var _i8 = 0, _Object$values4 = Object.values(this._slotUpdateSubscriptions); _i8 < _Object$values4.length; _i8++) {\n        var sub = _Object$values4[_i8];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      var id = ++this._slotUpdateSubscriptionCounter;\n      this._slotUpdateSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                if (!this._slotUpdateSubscriptions[id]) {\n                  _context72.next = 8;\n                  break;\n                }\n\n                subInfo = this._slotUpdateSubscriptions[id];\n                delete this._slotUpdateSubscriptions[id];\n                _context72.next = 5;\n                return this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context72.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown slot update id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function removeSlotUpdateListener(_x128) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n\n      return removeSlotUpdateListener;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment || encoding || extra) {\n        var options = {};\n\n        if (encoding) {\n          options.encoding = encoding;\n        }\n\n        if (commitment) {\n          options.commitment = commitment;\n        }\n\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n\n        args.push(options);\n      }\n\n      return args;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n\n      return this._buildArgs(args, override, encoding, extra);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var res = create(notification, SignatureNotificationResult);\n\n      for (var _i9 = 0, _Object$entries2 = Object.entries(this._signatureSubscriptions); _i9 < _Object$entries2.length; _i9++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i9], 2),\n            id = _Object$entries2$_i[0],\n            sub = _Object$entries2$_i[1];\n\n        if (sub.subscriptionId === res.subscription) {\n          if (res.result.value === 'receivedSignature') {\n            sub.callback({\n              type: 'received'\n            }, res.result.context);\n          } else {\n            // Signatures subscriptions are auto-removed by the RPC service so\n            // no need to explicitly send an unsubscribe message\n            delete this._signatureSubscriptions[Number(id)];\n\n            this._updateSubscriptions();\n\n            sub.callback({\n              type: 'status',\n              result: res.result.value\n            }, res.result.context);\n          }\n\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var id = ++this._signatureSubscriptionCounter;\n      this._signatureSubscriptions[id] = {\n        signature: signature,\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context);\n          }\n        },\n        options: {\n          commitment: commitment\n        },\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, callback, options) {\n      var id = ++this._signatureSubscriptionCounter;\n      this._signatureSubscriptions[id] = {\n        signature: signature,\n        callback: callback,\n        options: options,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                if (!this._signatureSubscriptions[id]) {\n                  _context73.next = 8;\n                  break;\n                }\n\n                subInfo = this._signatureSubscriptions[id];\n                delete this._signatureSubscriptions[id];\n                _context73.next = 5;\n                return this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context73.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown signature result id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, this);\n      }));\n\n      function removeSignatureListener(_x129) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var res = create(notification, RootNotificationResult);\n\n      for (var _i10 = 0, _Object$values5 = Object.values(this._rootSubscriptions); _i10 < _Object$values5.length; _i10++) {\n        var sub = _Object$values5[_i10];\n\n        if (sub.subscriptionId === res.subscription) {\n          sub.callback(res.result);\n          return;\n        }\n      }\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      var id = ++this._rootSubscriptionCounter;\n      this._rootSubscriptions[id] = {\n        callback: callback,\n        subscriptionId: null\n      };\n\n      this._updateSubscriptions();\n\n      return id;\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id subscription id to deregister\n     */\n\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(id) {\n        var subInfo;\n        return _regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                if (!this._rootSubscriptions[id]) {\n                  _context74.next = 8;\n                  break;\n                }\n\n                subInfo = this._rootSubscriptions[id];\n                delete this._rootSubscriptions[id];\n                _context74.next = 5;\n                return this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n              case 5:\n                this._updateSubscriptions();\n\n                _context74.next = 9;\n                break;\n\n              case 8:\n                throw new Error(\"Unknown root change id: \".concat(id));\n\n              case 9:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      function removeRootChangeListener(_x130) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n\n      return removeRootChangeListener;\n    }()\n  }]);\n\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The raw secret key for this keypair\n     */\n\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return this._keypair.secretKey;\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(nacl.sign.keyPair());\n    }\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options: skip secret key validation\n     */\n\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n      if (!options || !options.skipValidation) {\n        var encoder = new TextEncoder();\n        var signData = encoder.encode('@solana/web3.js-validation-v1');\n        var signature = nacl.sign.detached(signData, keypair.secretKey);\n\n        if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n\n      return new Keypair(keypair);\n    }\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     */\n\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n    }\n  }]);\n\n  return Keypair;\n}();\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nvar Authorized =\n/** stake authority */\n\n/** withdraw authority */\n\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n\n  _defineProperty(this, \"staker\", void 0);\n\n  _defineProperty(this, \"withdrawer\", void 0);\n\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n};\n/**\n * Stake account lockup info\n */\n\n\nvar Lockup =\n/** Unix timestamp of lockup expiration */\n\n/** Epoch of lockup expiration */\n\n/** Lockup custodian authority */\n\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n\n  _defineProperty(this, \"unixTimestamp\", void 0);\n\n  _defineProperty(this, \"epoch\", void 0);\n\n  _defineProperty(this, \"custodian\", void 0);\n\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n/**\n * Default, inactive Lockup value\n */\n;\n/**\n * Create stake account transaction params\n */\n\n\n_defineProperty(Lockup, \"default\", new Lockup(0, 0, PublicKey.default));\n/**\n * Stake Instruction class\n */\n\n\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n\n      for (var _i11 = 0, _Object$entries3 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i11 < _Object$entries3.length; _i11++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i11], 2),\n            ixType = _Object$entries3$_i[0],\n            layout = _Object$entries3$_i[1];\n\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData12 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n          authorized = _decodeData12.authorized,\n          lockup = _decodeData12.lockup;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData13 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n          newAuthorized = _decodeData13.newAuthorized,\n          stakeAuthorizationType = _decodeData13.stakeAuthorizationType;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n\n      var _decodeData14 = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n          newAuthorized = _decodeData14.newAuthorized,\n          stakeAuthorizationType = _decodeData14.stakeAuthorizationType,\n          authoritySeed = _decodeData14.authoritySeed,\n          authorityOwner = _decodeData14.authorityOwner;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n\n      var _decodeData15 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n          lamports = _decodeData15.lamports;\n\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n\n      var _decodeData16 = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n          lamports = _decodeData16.lamports;\n\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n          authorized = params.authorized,\n          lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n          authorityBase = params.authorityBase,\n          authoritySeed = params.authoritySeed,\n          authorityOwner = params.authorityOwner,\n          newAuthorizedPubkey = params.newAuthorizedPubkey,\n          stakeAuthorizationType = params.stakeAuthorizationType,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          splitStakePubkey = params.splitStakePubkey,\n          lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return transaction.add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n          sourceStakePubKey = params.sourceStakePubKey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey,\n          toPubkey = params.toPubkey,\n          lamports = params.lamports,\n          custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n          authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n\n  return StakeProgram;\n}();\n\n_defineProperty(StakeProgram, \"programId\", new PublicKey('Stake11111111111111111111111111111111111111'));\n\n_defineProperty(StakeProgram, \"space\", 200);\n\nvar publicKeyCreate = secp256k1.publicKeyCreate,\n    ecdsaSign = secp256k1.ecdsaSign;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n\n      try {\n        return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n          message = params.message,\n          signature = params.signature,\n          recoveryId = params.recoveryId,\n          _params$instructionIn = params.instructionIndex,\n          instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n          message = params.message,\n          instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n\n      try {\n        var privateKey = toBuffer(pkey);\n\n        var _publicKey2 = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n\n        var messageHash = Buffer.from(keccak_256.update(toBuffer(message)).digest());\n\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n            signature = _ecdsaSign.signature,\n            recoveryId = _ecdsaSign.recid;\n\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n\n  return Secp256k1Program;\n}();\n\n_defineProperty(Secp256k1Program, \"programId\", new PublicKey('KeccakSecp256k11111111111111111111111111111'));\n\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"info\", void 0);\n\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var PUBKEY_LENGTH = 32;\n\n      var byteArray = _toConsumableArray(buffer);\n\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n\n      for (var i = 0; i < 2; i++) {\n        var _publicKey3 = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n\n        byteArray = byteArray.slice(PUBKEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey3,\n          isSigner: isSigner\n        });\n      }\n\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$1(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorInfo;\n}();\n\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoterPubkey'), publicKey('authorizedWithdrawerPubkey'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('lastEpochCredits'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits')]);\n/**\n * VoteAccount class\n */\n\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n\n    _defineProperty(this, \"nodePubkey\", void 0);\n\n    _defineProperty(this, \"authorizedVoterPubkey\", void 0);\n\n    _defineProperty(this, \"authorizedWithdrawerPubkey\", void 0);\n\n    _defineProperty(this, \"commission\", void 0);\n\n    _defineProperty(this, \"votes\", void 0);\n\n    _defineProperty(this, \"rootSlot\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"lastEpochCredits\", void 0);\n\n    _defineProperty(this, \"epochCredits\", void 0);\n\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n      var rootSlot = va.rootSlot;\n\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n        authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        epoch: va.epoch,\n        credits: va.credits,\n        lastEpochCredits: va.lastEpochCredits,\n        epochCredits: va.epochCredits\n      });\n    }\n  }]);\n\n  return VoteAccount;\n}();\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n\nfunction sendAndConfirmRawTransaction(_x131, _x132, _x133) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(connection, rawTransaction, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee76$(_context76) {\n      while (1) {\n        switch (_context76.prev = _context76.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context76.next = 3;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 3:\n            signature = _context76.sent;\n            _context76.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context76.sent.value;\n\n            if (!status.err) {\n              _context76.next = 9;\n              break;\n            }\n\n            throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context76.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context76.stop();\n        }\n      }\n    }, _callee76);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  var url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","constructor","Object","encode","serialize","decode","deserialize","decodeUnchecked","deserializeUnchecked","key","SOLANA_SCHEMA","MAX_SEED_LENGTH","value","PublicKey","isPublicKeyData","decoded","bs58","equals","publicKey","toBase58","toBytes","b","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","hash","sha256","createProgramAddress","seeds","seed","publicKeyBytes","is_on_curve","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","authorized","lockup","alloc","type","item","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","args","account","isAccountWritable","index","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","accountKeys","i","dataSlice","messageArgs","header","message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","SIGNATURE_LENGTH","opts","signature","add","items","compileMessage","nonceInfo","console","feePayer","programIds","accountMetas","accountMeta","pubkey","isSigner","isWritable","checkSigner","x","y","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","valid","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatures","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","Message","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","resolve","setTimeout","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","instructionTypeLayout","typeIndex","layout","decodeCreateAccount","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","space","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","encodeData","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","this","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","nextPowerOfTwo","epochLen","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","getSlotsInEpoch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","timeoutPromise","timeoutId","result","clearTimeout","url","useHttps","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","union","pick","jsonrpc","id","error","code","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","number","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","logs","fetchWithMiddleware","fetchMiddleware","fetch","reject","clientBrowser","agent","method","body","headers","httpHeaders","too_many_requests_retries","waitTime","res","disableRetryOnRateLimit","statusText","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","executable","owner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","commitmentOrConfig","wsEndpoint","makeWebsocketUrl","createRpcClient","createRpcRequest","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","getBalanceAndContext","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleAccountsInfo","publicKeys","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","response","confirmPromise","subscriptionId","timeoutMs","promiseTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getBlock","getTransaction","getConfirmedBlock","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","block","highestConfirmedRoot","endSlot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","NonceAccount","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","disableCache","encodedTransaction","traceIndent","logTrace","sendTransaction","sendRawTransaction","sendEncodedTransaction","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","clearInterval","_subscribe","sub","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","filters","mentions","_wsOnAccountNotification","onAccountChange","removeAccountChangeListener","subInfo","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","_buildArgs","override","_buildArgsAtLeastConfirmed","_wsOnSignatureNotification","onSignature","notification","onSignatureWithOptions","removeSignatureListener","_wsOnRootNotification","onRootChange","removeRootChangeListener","generate","fromSecretKey","keypair","encoder","fromSeed","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","split","merge","withdraw","deactivate","ecdsaSign","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","createInstructionWithPublicKey","instructionIndex","ethAddress","recoveryId","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","endpoint","http","devnet","testnet","https","tls","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\ntype PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\ntype PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\ntype TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\ntype NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Signer>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}