{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { TabsDescendantsProvider, TabsProvider, useTab, useTabIndicator, useTabList, useTabPanel, useTabPanels, useTabs } from \"./use-tabs\";\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components.\n */\n\nexport var Tabs = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Tabs\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _useTabs = useTabs(rest),\n      htmlProps = _useTabs.htmlProps,\n      descendants = _useTabs.descendants,\n      ctx = _objectWithoutPropertiesLoose(_useTabs, [\"htmlProps\", \"descendants\"]);\n\n  var context = React.useMemo(function () {\n    return ctx;\n  }, [ctx]);\n  var rootProps = omit(htmlProps, [\"isFitted\"]);\n  return /*#__PURE__*/React.createElement(TabsDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(TabsProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-tabs\", className),\n    ref: ref\n  }, rootProps, {\n    __css: styles.root\n  }), children))));\n});\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n}\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\n\n\nexport var Tab = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  var tabProps = useTab(_extends({}, props, {\n    ref: ref\n  }));\n\n  var tabStyles = _extends({\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }, styles.tab);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, tabProps, {\n    className: cx(\"chakra-tabs__tab\", props.className),\n    __css: tabStyles\n  }));\n});\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n}\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\n\n\nexport var TabList = /*#__PURE__*/forwardRef(function (props, ref) {\n  var tablistProps = useTabList(_extends({}, props, {\n    ref: ref\n  }));\n  var styles = useStyles();\n\n  var tablistStyles = _extends({\n    display: \"flex\"\n  }, styles.tablist);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, tablistProps, {\n    className: cx(\"chakra-tabs__tablist\", props.className),\n    __css: tablistStyles\n  }));\n});\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n}\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\n\n\nexport var TabPanel = /*#__PURE__*/forwardRef(function (props, ref) {\n  var panelProps = useTabPanel(_extends({}, props, {\n    ref: ref\n  }));\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    outline: \"0\"\n  }, panelProps, {\n    className: cx(\"chakra-tabs__tab-panel\", props.className),\n    __css: styles.tabpanel\n  }));\n});\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n}\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\n\n\nexport var TabPanels = /*#__PURE__*/forwardRef(function (props, ref) {\n  var panelsProps = useTabPanels(props);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelsProps, {\n    width: \"100%\",\n    ref: ref,\n    className: cx(\"chakra-tabs__tab-panels\", props.className),\n    __css: styles.tabpanels\n  }));\n});\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n}\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\n\n\nexport var TabIndicator = /*#__PURE__*/forwardRef(function (props, ref) {\n  var indicatorStyle = useTabIndicator();\n\n  var style = _extends({}, props.style, indicatorStyle);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-tabs__tab-indicator\", props.className),\n    style: style,\n    __css: styles.indicator\n  }));\n});\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\";\n}","map":{"version":3,"sources":["../../src/tabs.tsx"],"names":["Tabs","forwardRef","styles","useMultiStyleConfig","className","omitThemingProps","descendants","useTabs","context","React","rootProps","omit","cx","ref","root","Tab","useStyles","tabProps","useTab","tabStyles","outline","display","alignItems","justifyContent","props","TabList","tablistProps","useTabList","tablistStyles","TabPanel","panelProps","useTabPanel","tabpanel","TabPanels","panelsProps","useTabPanels","tabpanels","TabIndicator","indicatorStyle","useTabIndicator","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps<\"Tabs\">,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, descendants, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsDescendantsProvider value={descendants}>\n      <TabsProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            className={cx(\"chakra-tabs\", className)}\n            ref={ref}\n            {...rootProps}\n            __css={styles.root}\n          >\n            {children}\n          </chakra.div>\n        </StylesProvider>\n      </TabsProvider>\n    </TabsDescendantsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">((props, ref) => {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">((props, ref) => {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">((props, ref) => {\n  const panelsProps = useTabPanels(props)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n      __css={styles.tabpanels}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  (props, ref) => {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"]},"metadata":{},"sourceType":"module"}