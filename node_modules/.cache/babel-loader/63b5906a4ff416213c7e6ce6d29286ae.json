{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\n\nexport var FormLabel = /*#__PURE__*/forwardRef(function (passedProps, ref) {\n  var _field$getLabelProps;\n\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n\n  var children = props.children,\n      _props$requiredIndica = props.requiredIndicator,\n      requiredIndicator = _props$requiredIndica === void 0 ? /*#__PURE__*/React.createElement(RequiredIndicator, null) : _props$requiredIndica,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"requiredIndicator\"]);\n\n  var field = useFormControlContext();\n  var ownProps = (_field$getLabelProps = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _field$getLabelProps : _extends({\n    ref: ref\n  }, rest);\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, ownProps, {\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"start\"\n    }, styles)\n  }), children, field != null && field.isRequired ? requiredIndicator : null);\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\n\n\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function (props, ref) {\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field != null && field.isRequired)) return null;\n  var className = cx(\"chakra-form__required-indicator\", props.className);\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {\n    __css: styles.requiredIndicator,\n    className: className\n  }));\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}","map":{"version":3,"sources":["../../src/form-label.tsx"],"names":["FormLabel","forwardRef","styles","useStyleConfig","props","omitThemingProps","requiredIndicator","field","useFormControlContext","ownProps","ref","cx","display","textAlign","RequiredIndicator","useStyles","className"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,SAAA,QAAA,mBAAA;AASA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,qBAAA,QAAA,gBAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,SAAS,GAAA,aAAGC,UAAU,CACjC,UAAA,WAAA,EAAA,GAAA,EAAsB;AAAA,MAAA,oBAAA;;AACpB,MAAMC,MAAM,GAAGC,cAAc,CAAA,WAAA,EAA7B,WAA6B,CAA7B;AACA,MAAMC,KAAK,GAAGC,gBAAgB,CAA9B,WAA8B,CAA9B;;AAEA,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,8BAAA,KAAA,CAGEC,iBAHF;AAAA,MAGEA,iBAHF,sCAGmB,aAAG,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,IAAA,CAHtB;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,mBAAA,CAAA,CAAA;;AAOA,MAAMC,KAAK,GAAGC,qBAAd,EAAA;AACA,MAAMC,QAAQ,GAAA,CAAA,oBAAA,GAAGF,KAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,KAAK,CAALA,aAAAA,CAAAA,IAAAA,EAAH,GAAGA,CAAH,KAAA,IAAA,GAAA,oBAAA,GAAA,QAAA,CAAA;AAAwCG,IAAAA,GAAAA,EAAAA;AAAxC,GAAA,EAAd,IAAc,CAAd;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,EAAE,CAAA,oBAAA,EAAuBP,KAAK,CAF3C,SAEe,CAFf;AAGE,IAAA,KAAK,EAAA,QAAA,CAAA;AACHQ,MAAAA,OAAO,EADJ,OAAA;AAEHC,MAAAA,SAAS,EAAE;AAFR,KAAA,EAAA,MAAA;AAHP,GAAA,CAAA,EAAA,QAAA,EAUGN,KAAK,IAALA,IAAAA,IAAAA,KAAK,CAALA,UAAAA,GAAAA,iBAAAA,GAXL,IACE,CADF;AAfG,CAA4B,CAA5B;;AAgCP,IAAA,OAAA,EAAa;AACXP,EAAAA,SAAS,CAATA,WAAAA,GAAAA,WAAAA;AACD;AAID;AACA;AACA;AACA;;;AACA,OAAO,IAAMc,iBAAiB,GAAA,aAAGb,UAAU,CACzC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACd,MAAMM,KAAK,GAAGC,qBAAd,EAAA;AACA,MAAMN,MAAM,GAAGa,SAAf,EAAA;AAEA,MAAI,EAACR,KAAD,IAAA,IAACA,IAAAA,KAAK,CAAV,UAAI,CAAJ,EAAwB,OAAA,IAAA;AAExB,MAAMS,SAAS,GAAGL,EAAE,CAAA,iCAAA,EAAoCP,KAAK,CAA7D,SAAoB,CAApB;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EACMG,KADN,IAAA,IACMA,GADN,KAAA,CACMA,GAAAA,KAAK,CAALA,yBAAAA,CAAAA,KAAAA,EADN,GACMA,CADN,EAAA;AAEE,IAAA,KAAK,EAAEL,MAAM,CAFf,iBAAA;AAGE,IAAA,SAAS,EAAEc;AAHb,GAAA,CAAA,CADF;AATG,CAAoC,CAApC;;AAmBP,IAAA,OAAA,EAAa;AACXF,EAAAA,iBAAiB,CAAjBA,WAAAA,GAAAA,mBAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(\n  (passedProps, ref) => {\n    const styles = useStyleConfig(\"FormLabel\", passedProps)\n    const props = omitThemingProps(passedProps)\n\n    const {\n      className,\n      children,\n      requiredIndicator = <RequiredIndicator />,\n      ...rest\n    } = props\n\n    const field = useFormControlContext()\n    const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n    return (\n      <chakra.label\n        {...ownProps}\n        className={cx(\"chakra-form__label\", props.className)}\n        __css={{\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles,\n        }}\n      >\n        {children}\n        {field?.isRequired ? requiredIndicator : null}\n      </chakra.label>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  (props, ref) => {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"]},"metadata":{},"sourceType":"module"}