{"version":3,"sources":["../../src/simple-grid.tsx"],"names":["forwardRef","mapResponsive","isNumber","isNull","__DEV__","React","Grid","SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","templateColumns","widthToColumns","countToColumns","displayName","toPx","n","width","value","count"],"mappings":";;;;AAAA,SAA0BA,UAA1B,QAA4C,mBAA5C;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,OAA1C,QAAyD,kBAAzD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAgC,QAAhC;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,UAAU,gBAAGP,UAAU,CAAyB,CAACQ,KAAD,EAAQC,GAAR,KAAgB;AAC3E,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,OAA/B;AAAwCC,IAAAA;AAAxC,MAAmEN,KAAzE;AAAA,MAAgEO,IAAhE,iCAAyEP,KAAzE;;AAEA,MAAMQ,eAAe,GAAGF,aAAa,GACjCG,cAAc,CAACH,aAAD,CADmB,GAEjCI,cAAc,CAACR,OAAD,CAFlB;AAIA,sBACE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,GAAG,EAAEI,OAFP;AAGE,IAAA,SAAS,EAAEF,QAHb;AAIE,IAAA,MAAM,EAAEC,QAJV;AAKE,IAAA,eAAe,EAAEI;AALnB,KAMMD,IANN,EADF;AAUD,CAjBmC,CAA7B;;AAmBP,IAAIX,OAAJ,EAAa;AACXG,EAAAA,UAAU,CAACY,WAAX,GAAyB,YAAzB;AACD;;AAED,SAASC,IAAT,CAAcC,CAAd,EAAkC;AAChC,SAAOnB,QAAQ,CAACmB,CAAD,CAAR,GAAiBA,CAAjB,UAAyBA,CAAhC;AACD;;AAED,SAASJ,cAAT,CAAwBK,KAAxB,EAAoC;AAClC,SAAOrB,aAAa,CAACqB,KAAD,EAASC,KAAD,IAC1BpB,MAAM,CAACoB,KAAD,CAAN,GAAgB,IAAhB,gCAAkDH,IAAI,CAACG,KAAD,CAAtD,YADkB,CAApB;AAGD;;AAED,SAASL,cAAT,CAAwBM,KAAxB,EAAoC;AAClC,SAAOvB,aAAa,CAACuB,KAAD,EAASD,KAAD,IAC1BpB,MAAM,CAACoB,KAAD,CAAN,GAAgB,IAAhB,eAAiCA,KAAjC,sBADkB,CAApB;AAGD","sourcesContent":["import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"file":"simple-grid.js"}