{"ast":null,"code":"import { useRef } from \"react\";\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\n\nexport function useConst(init) {\n  var ref = useRef(null);\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["../../src/use-const.ts"],"names":["ref","useRef","init"],"mappings":"AAAA,SAAA,MAAA,QAAA,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,QAAA,CAAA,IAAA,EAAwD;AAC7D,MAAMA,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;;AAEA,MAAID,GAAG,CAAHA,OAAAA,KAAJ,IAAA,EAA0B;AACxBA,IAAAA,GAAG,CAAHA,OAAAA,GAAc,OAAA,IAAA,KAAA,UAAA,GAA6BE,IAA7B,EAAA,GAAdF,IAAAA;AACD;;AAED,SAAOA,GAAG,CAAV,OAAA;AACD","sourcesContent":["import { useRef } from \"react\"\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nexport function useConst<T extends any | (() => any)>(init: T) {\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init\n  }\n\n  return ref.current as T\n}\n"]},"metadata":{},"sourceType":"module"}