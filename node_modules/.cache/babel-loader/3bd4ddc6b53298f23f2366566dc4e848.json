{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { dataAttr, isRightClick } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useEventListeners } from \"./use-event-listeners\";\n\nfunction isValidElement(event) {\n  var element = event.target;\n  var tagName = element.tagName,\n      isContentEditable = element.isContentEditable;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\n\n\nexport function useClickable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      htmlRef = _props.ref,\n      isDisabled = _props.isDisabled,\n      isFocusable = _props.isFocusable,\n      _props$clickOnEnter = _props.clickOnEnter,\n      clickOnEnter = _props$clickOnEnter === void 0 ? true : _props$clickOnEnter,\n      _props$clickOnSpace = _props.clickOnSpace,\n      clickOnSpace = _props$clickOnSpace === void 0 ? true : _props$clickOnSpace,\n      onMouseDown = _props.onMouseDown,\n      onMouseUp = _props.onMouseUp,\n      onClick = _props.onClick,\n      onKeyDown = _props.onKeyDown,\n      onKeyUp = _props.onKeyUp,\n      tabIndexProp = _props.tabIndex,\n      onMouseOver = _props.onMouseOver,\n      onMouseLeave = _props.onMouseLeave,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"ref\", \"isDisabled\", \"isFocusable\", \"clickOnEnter\", \"clickOnSpace\", \"onMouseDown\", \"onMouseUp\", \"onClick\", \"onKeyDown\", \"onKeyUp\", \"tabIndex\", \"onMouseOver\", \"onMouseLeave\"]);\n  /**\n   * We'll use this to track if the element is a button element\n   */\n\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isButton = _React$useState2[0],\n      setIsButton = _React$useState2[1];\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isPressed = _React$useState4[0],\n      setIsPressed = _React$useState4[1];\n\n  var listeners = useEventListeners();\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n\n  var refCallback = function refCallback(node) {\n    if (!node) return;\n\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n\n  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  var trulyDisabled = isDisabled && !isFocusable;\n  var handleClick = React.useCallback(function (event) {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    var self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  var onDocumentKeyUp = React.useCallback(function (e) {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  var handleKeyDown = React.useCallback(function (event) {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      var self = event.currentTarget;\n      self.click();\n    }\n\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  var handleKeyUp = React.useCallback(function (event) {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  var onDocumentMouseUp = React.useCallback(function (event) {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  var handleMouseDown = React.useCallback(function (event) {\n    if (isRightClick(event)) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsPressed(true);\n    }\n\n    var target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  var handleMouseUp = React.useCallback(function (event) {\n    if (isRightClick(event)) return;\n\n    if (!isButton) {\n      setIsPressed(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  var handleMouseOver = React.useCallback(function (event) {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  var handleMouseLeave = React.useCallback(function (event) {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  var ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return _extends({}, htmlProps, {\n      ref: ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      onKeyUp: onKeyUp,\n      onKeyDown: onKeyDown,\n      onMouseOver: onMouseOver,\n      onMouseLeave: onMouseLeave\n    });\n  }\n\n  return _extends({}, htmlProps, {\n    ref: ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  });\n}","map":{"version":3,"sources":["../../src/use-clickable.ts"],"names":["element","event","isContentEditable","tagName","props","ref","clickOnEnter","clickOnSpace","tabIndex","onMouseLeave","React","listeners","useEventListeners","refCallback","node","setIsButton","isButton","tabIndexProp","trulyDisabled","isDisabled","handleClick","self","onClick","onDocumentKeyUp","e","isPressed","isValidElement","setIsPressed","handleKeyDown","onKeyDown","shouldClickOnEnter","shouldClickOnSpace","handleKeyUp","onKeyUp","onDocumentMouseUp","handleMouseDown","isRightClick","target","preventScroll","onMouseDown","handleMouseUp","onMouseUp","handleMouseOver","onMouseOver","handleMouseLeave","mergeRefs","type","disabled","role","dataAttr"],"mappings":"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","sourcesContent":["import { dataAttr, isRightClick } from \"@chakra-ui/utils\"\nimport { mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useEventListeners } from \"./use-event-listeners\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = React.useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = React.useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = React.useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}