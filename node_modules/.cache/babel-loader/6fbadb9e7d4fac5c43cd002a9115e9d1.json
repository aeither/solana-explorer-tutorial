{"ast":null,"code":"import { __assign } from 'tslib';\nimport { mix } from './mix.js';\nimport { hex, rgba, hsla } from 'style-value-types';\nimport { invariant } from 'hey-listen';\n\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  var toExpo = to * to;\n  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\n\nvar colorTypes = [hex, rgba, hsla];\n\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\n\nvar notAnimatable = function notAnimatable(color) {\n  return \"'\" + color + \"' is not an animatable color. Use the equivalent color code instead.\";\n};\n\nvar mixColor = function mixColor(from, to) {\n  var fromColorType = getColorType(from);\n  var toColorType = getColorType(to);\n  invariant(!!fromColorType, notAnimatable(from));\n  invariant(!!toColorType, notAnimatable(to));\n  invariant(fromColorType.transform === toColorType.transform, \"Both colors must be hex/RGBA, OR both must be HSLA.\");\n  var fromColor = fromColorType.parse(from);\n  var toColor = toColorType.parse(to);\n\n  var blended = __assign({}, fromColor);\n\n  var mixFunc = fromColorType === hsla ? mix : mixLinearColor;\n  return function (v) {\n    for (var key in blended) {\n      if (key !== \"alpha\") {\n        blended[key] = mixFunc(fromColor[key], toColor[key], v);\n      }\n    }\n\n    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n    return fromColorType.transform(blended);\n  };\n};\n\nexport { mixColor, mixLinearColor };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/popmotion/dist/es/utils/mix-color.js"],"names":["__assign","mix","hex","rgba","hsla","invariant","mixLinearColor","from","to","v","fromExpo","toExpo","Math","sqrt","max","colorTypes","getColorType","find","type","test","notAnimatable","color","mixColor","fromColorType","toColorType","transform","fromColor","parse","toColor","blended","mixFunc","key","alpha"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,IAAV,EAAgBC,EAAhB,EAAoBC,CAApB,EAAuB;AACxC,MAAIC,QAAQ,GAAGH,IAAI,GAAGA,IAAtB;AACA,MAAII,MAAM,GAAGH,EAAE,GAAGA,EAAlB;AACA,SAAOI,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYL,CAAC,IAAIE,MAAM,GAAGD,QAAb,CAAD,GAA0BA,QAAtC,CAAV,CAAP;AACH,CAJD;;AAKA,IAAIK,UAAU,GAAG,CAACb,GAAD,EAAMC,IAAN,EAAYC,IAAZ,CAAjB;;AACA,IAAIY,YAAY,GAAG,SAAfA,YAAe,CAAUP,CAAV,EAAa;AAC5B,SAAOM,UAAU,CAACE,IAAX,CAAgB,UAAUC,IAAV,EAAgB;AAAE,WAAOA,IAAI,CAACC,IAAL,CAAUV,CAAV,CAAP;AAAsB,GAAxD,CAAP;AACH,CAFD;;AAGA,IAAIW,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,KAAV,EAAiB;AACjC,SAAO,MAAMA,KAAN,GAAc,sEAArB;AACH,CAFD;;AAGA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUf,IAAV,EAAgBC,EAAhB,EAAoB;AAC/B,MAAIe,aAAa,GAAGP,YAAY,CAACT,IAAD,CAAhC;AACA,MAAIiB,WAAW,GAAGR,YAAY,CAACR,EAAD,CAA9B;AACAH,EAAAA,SAAS,CAAC,CAAC,CAACkB,aAAH,EAAkBH,aAAa,CAACb,IAAD,CAA/B,CAAT;AACAF,EAAAA,SAAS,CAAC,CAAC,CAACmB,WAAH,EAAgBJ,aAAa,CAACZ,EAAD,CAA7B,CAAT;AACAH,EAAAA,SAAS,CAACkB,aAAa,CAACE,SAAd,KAA4BD,WAAW,CAACC,SAAzC,EAAoD,qDAApD,CAAT;AACA,MAAIC,SAAS,GAAGH,aAAa,CAACI,KAAd,CAAoBpB,IAApB,CAAhB;AACA,MAAIqB,OAAO,GAAGJ,WAAW,CAACG,KAAZ,CAAkBnB,EAAlB,CAAd;;AACA,MAAIqB,OAAO,GAAG7B,QAAQ,CAAC,EAAD,EAAK0B,SAAL,CAAtB;;AACA,MAAII,OAAO,GAAGP,aAAa,KAAKnB,IAAlB,GAAyBH,GAAzB,GAA+BK,cAA7C;AACA,SAAO,UAAUG,CAAV,EAAa;AAChB,SAAK,IAAIsB,GAAT,IAAgBF,OAAhB,EAAyB;AACrB,UAAIE,GAAG,KAAK,OAAZ,EAAqB;AACjBF,QAAAA,OAAO,CAACE,GAAD,CAAP,GAAeD,OAAO,CAACJ,SAAS,CAACK,GAAD,CAAV,EAAiBH,OAAO,CAACG,GAAD,CAAxB,EAA+BtB,CAA/B,CAAtB;AACH;AACJ;;AACDoB,IAAAA,OAAO,CAACG,KAAR,GAAgB/B,GAAG,CAACyB,SAAS,CAACM,KAAX,EAAkBJ,OAAO,CAACI,KAA1B,EAAiCvB,CAAjC,CAAnB;AACA,WAAOc,aAAa,CAACE,SAAd,CAAwBI,OAAxB,CAAP;AACH,GARD;AASH,CAnBD;;AAqBA,SAASP,QAAT,EAAmBhB,cAAnB","sourcesContent":["import { __assign } from 'tslib';\nimport { mix } from './mix.js';\nimport { hex, rgba, hsla } from 'style-value-types';\nimport { invariant } from 'hey-listen';\n\nvar mixLinearColor = function (from, to, v) {\n    var fromExpo = from * from;\n    var toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nvar colorTypes = [hex, rgba, hsla];\nvar getColorType = function (v) {\n    return colorTypes.find(function (type) { return type.test(v); });\n};\nvar notAnimatable = function (color) {\n    return \"'\" + color + \"' is not an animatable color. Use the equivalent color code instead.\";\n};\nvar mixColor = function (from, to) {\n    var fromColorType = getColorType(from);\n    var toColorType = getColorType(to);\n    invariant(!!fromColorType, notAnimatable(from));\n    invariant(!!toColorType, notAnimatable(to));\n    invariant(fromColorType.transform === toColorType.transform, \"Both colors must be hex/RGBA, OR both must be HSLA.\");\n    var fromColor = fromColorType.parse(from);\n    var toColor = toColorType.parse(to);\n    var blended = __assign({}, fromColor);\n    var mixFunc = fromColorType === hsla ? mix : mixLinearColor;\n    return function (v) {\n        for (var key in blended) {\n            if (key !== \"alpha\") {\n                blended[key] = mixFunc(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"]},"metadata":{},"sourceType":"module"}