{"version":3,"sources":["../../src/skeleton.tsx"],"names":["StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","from","opacity","to","useIsFirstRender","isFirstRender","React","useRef","useEffect","current","Skeleton","props","ref","styles","startColor","endColor","isLoaded","fadeDuration","speed","className","rest","wasPreviouslyLoaded","_className","animation","defaultProps","__DEV__","displayName","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","length","number","sizeProps","mb","width","height","toString","undefined","SkeletonCircle","size"],"mappings":"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","sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { usePrevious } from \"@chakra-ui/hooks\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"],"file":"skeleton.js"}