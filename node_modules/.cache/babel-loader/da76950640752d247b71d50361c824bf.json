{"ast":null,"code":"/**\n * Thank you @markdalgleish for this piece of art!\n */\nimport { isObject } from \"@chakra-ui/utils\";\n\nfunction resolveReference(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpression = function toExpression(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(resolveReference).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\n\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"+\"].concat(operands)) + \")\";\n};\n\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"-\"].concat(operands)) + \")\";\n};\n\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"*\"].concat(operands)) + \")\";\n};\n\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return \"calc(\" + toExpression.apply(void 0, [\"/\"].concat(operands)) + \")\";\n};\n\nvar _negate = function _negate(x) {\n  var value = resolveReference(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n\n  return _multiply(value, -1);\n};\n\nexport var calc = Object.assign(function (x) {\n  return {\n    add: function add() {\n      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        operands[_key6] = arguments[_key6];\n      }\n\n      return calc(_add.apply(void 0, [x].concat(operands)));\n    },\n    subtract: function subtract() {\n      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        operands[_key7] = arguments[_key7];\n      }\n\n      return calc(_subtract.apply(void 0, [x].concat(operands)));\n    },\n    multiply: function multiply() {\n      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        operands[_key8] = arguments[_key8];\n      }\n\n      return calc(_multiply.apply(void 0, [x].concat(operands)));\n    },\n    divide: function divide() {\n      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        operands[_key9] = arguments[_key9];\n      }\n\n      return calc(_divide.apply(void 0, [x].concat(operands)));\n    },\n    negate: function negate() {\n      return calc(_negate(x));\n    },\n    toString: function toString() {\n      return x.toString();\n    }\n  };\n}, {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"sources":["../../../src/create-theme-vars/calc.ts"],"names":["isObject","operand","String","toExpression","operands","add","subtract","multiply","divide","negate","x","value","resolveReference","Number","parseFloat","calc","toString"],"mappings":"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","sourcesContent":["/**\n * Thank you @markdalgleish for this piece of art!\n */\nimport { isObject } from \"@chakra-ui/utils\"\n\nexport type Operand = string | number | { reference: string }\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction resolveReference(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpression = (operator: Operator, ...operands: Array<Operand>) =>\n  operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"+\", ...operands)})`\n\nconst subtract = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"-\", ...operands)})`\n\nconst multiply = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"*\", ...operands)})`\n\nconst divide = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = resolveReference(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\ninterface CalcChain {\n  add: (...operands: Array<Operand>) => CalcChain\n  subtract: (...operands: Array<Operand>) => CalcChain\n  multiply: (...operands: Array<Operand>) => CalcChain\n  divide: (...operands: Array<Operand>) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}