{"version":3,"sources":["../../src/popover-transition.tsx"],"names":["chakra","motion","mergeWith","React","usePopoverContext","mergeVariants","variants","enter","visibility","exit","transitionEnd","scaleFade","opacity","scale","transition","duration","ease","Section","section","PopoverTransition","forwardRef","props","ref","isOpen","defaultProps"],"mappings":";;AAAA,SAASA,MAAT,QAAwC,mBAAxC;AACA,SAA0BC,MAA1B,QAAiD,eAAjD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC,C,CAEA;;AAmBA,IAAMC,aAAa,GAAIC,QAAD,IAA+B;AACnD,MAAI,CAACA,QAAL,EAAe;AACf,SAAOJ,SAAS,CAACI,QAAD,EAAW;AACzBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AADP,KADkB;AAIzBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,aAAa,EAAE;AACbF,QAAAA,UAAU,EAAE;AADC;AADX;AAJmB,GAAX,CAAhB;AAUD,CAZD;;AAcA,IAAMG,SAAyB,GAAG;AAChCF,EAAAA,IAAI,EAAE;AACJG,IAAAA,OAAO,EAAE,CADL;AAEJC,IAAAA,KAAK,EAAE,IAFH;AAGJC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,GADA;AAEVC,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,CAAZ;AAFI;AAHR,GAD0B;AAShCT,EAAAA,KAAK,EAAE;AACLM,IAAAA,KAAK,EAAE,CADF;AAELD,IAAAA,OAAO,EAAE,CAFJ;AAGLE,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,IADA;AAEVC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,CAAZ;AAFI;AAHP;AATyB,CAAlC;AAmBA,IAAMC,OAAO,GAAGhB,MAAM,CAACD,MAAM,CAACkB,OAAR,CAAtB;AAKA,OAAO,IAAMC,iBAAiB,gBAAGhB,KAAK,CAACiB,UAAN,CAC/B,CAACC,KAAD,EAA0CC,GAA1C,KAAkE;AAChE,MAAM;AAAEC,IAAAA;AAAF,MAAanB,iBAAiB,EAApC;AACA,sBACE,oBAAC,OAAD;AACE,IAAA,GAAG,EAAEkB,GADP;AAEE,IAAA,QAAQ,EAAEjB,aAAa,CAACgB,KAAK,CAACf,QAAP;AAFzB,KAGMe,KAHN;AAIE,IAAA,OAAO,EAAE,KAJX;AAKE,IAAA,OAAO,EAAEE,MAAM,GAAG,OAAH,GAAa;AAL9B,KADF;AASD,CAZ8B,CAA1B;AAePJ,iBAAiB,CAACK,YAAlB,GAAiC;AAC/BlB,EAAAA,QAAQ,EAAEK;AADqB,CAAjC","sourcesContent":["import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { HTMLMotionProps, motion, Variant } from \"framer-motion\"\nimport { mergeWith } from \"@chakra-ui/utils\"\nimport React from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n// TODO: consider moving this to some util\ntype HTMLMotionChakraProps<T extends keyof React.ReactHTML> = Omit<\n  HTMLChakraProps<T>,\n  keyof HTMLMotionProps<T>\n> &\n  Omit<\n    HTMLMotionProps<T>,\n    | \"style\"\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"variants\"\n  > & {\n    variants?: MotionVariants\n  }\n\ntype MotionVariants = Partial<Record<\"enter\" | \"exit\", Variant>>\n\nconst mergeVariants = (variants?: MotionVariants) => {\n  if (!variants) return\n  return mergeWith(variants, {\n    enter: {\n      visibility: \"visible\",\n    },\n    exit: {\n      transitionEnd: {\n        visibility: \"hidden\",\n      },\n    },\n  })\n}\n\nconst scaleFade: MotionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst Section = motion(chakra.section)\n\nexport interface PopoverTransitionProps\n  extends HTMLMotionChakraProps<\"section\"> {}\n\nexport const PopoverTransition = React.forwardRef(\n  (props: HTMLMotionChakraProps<\"section\">, ref: React.Ref<any>) => {\n    const { isOpen } = usePopoverContext()\n    return (\n      <Section\n        ref={ref}\n        variants={mergeVariants(props.variants)}\n        {...props}\n        initial={false}\n        animate={isOpen ? \"enter\" : \"exit\"}\n      />\n    )\n  },\n)\n\nPopoverTransition.defaultProps = {\n  variants: scaleFade,\n}\n"],"file":"popover-transition.js"}