{"version":3,"sources":["../../src/use-editable.ts"],"names":["useControllableState","useFocusOnPointerDown","useUpdateEffect","mergeRefs","ariaAttr","callAllHandlers","contains","focus","getRelatedTarget","isEmpty","normalizeEventKey","useCallback","useRef","useState","useEditable","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","selectTextIfInput","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","onBlur","relatedTarget","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","undefined","children","hidden","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"mappings":"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","sourcesContent":["import {\n  useControllableState,\n  useFocusOnPointerDown,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  contains,\n  focus,\n  getRelatedTarget,\n  isEmpty,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      focus(editButtonRef.current)\n      return\n    }\n\n    focus(inputRef.current, {\n      selectTextIfInput: selectAllOnFocus,\n    })\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      const relatedTarget = getRelatedTarget(event)\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur && submitOnBlur) {\n        onSubmit()\n      }\n    },\n    [submitOnBlur, onSubmit],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [isDisabled, isEditing, onBlur, onChange, onKeyDown, placeholder, value],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n    }),\n    [onEdit],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n    }),\n    [onSubmit],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n    }),\n    [onCancel],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}