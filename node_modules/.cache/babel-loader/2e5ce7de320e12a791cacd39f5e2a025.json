{"ast":null,"code":"import { __spreadArray, __assign } from 'tslib';\nimport { complex, color } from 'style-value-types';\nimport { mix } from './mix.js';\nimport { mixColor } from './mix-color.js';\nimport { isNum } from './inc.js';\nimport { pipe } from './pipe.js';\nimport { invariant } from 'hey-listen';\n\nfunction getMixer(origin, target) {\n  if (isNum(origin)) {\n    return function (v) {\n      return mix(origin, target, v);\n    };\n  } else if (color.test(origin)) {\n    return mixColor(origin, target);\n  } else {\n    return mixComplex(origin, target);\n  }\n}\n\nvar mixArray = function mixArray(from, to) {\n  var output = __spreadArray([], from);\n\n  var numValues = output.length;\n  var blendValue = from.map(function (fromThis, i) {\n    return getMixer(fromThis, to[i]);\n  });\n  return function (v) {\n    for (var i = 0; i < numValues; i++) {\n      output[i] = blendValue[i](v);\n    }\n\n    return output;\n  };\n};\n\nvar mixObject = function mixObject(origin, target) {\n  var output = __assign(__assign({}, origin), target);\n\n  var blendValue = {};\n\n  for (var key in output) {\n    if (origin[key] !== undefined && target[key] !== undefined) {\n      blendValue[key] = getMixer(origin[key], target[key]);\n    }\n  }\n\n  return function (v) {\n    for (var key in blendValue) {\n      output[key] = blendValue[key](v);\n    }\n\n    return output;\n  };\n};\n\nfunction analyse(value) {\n  var parsed = complex.parse(value);\n  var numValues = parsed.length;\n  var numNumbers = 0;\n  var numRGB = 0;\n  var numHSL = 0;\n\n  for (var i = 0; i < numValues; i++) {\n    if (numNumbers || typeof parsed[i] === \"number\") {\n      numNumbers++;\n    } else {\n      if (parsed[i].hue !== undefined) {\n        numHSL++;\n      } else {\n        numRGB++;\n      }\n    }\n  }\n\n  return {\n    parsed: parsed,\n    numNumbers: numNumbers,\n    numRGB: numRGB,\n    numHSL: numHSL\n  };\n}\n\nvar mixComplex = function mixComplex(origin, target) {\n  var template = complex.createTransformer(target);\n  var originStats = analyse(origin);\n  var targetStats = analyse(target);\n  invariant(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, \"Complex values '\" + origin + \"' and '\" + target + \"' too different to mix. Ensure all colors are of the same type.\");\n  return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n};\n\nexport { mixArray, mixComplex, mixObject };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/popmotion/dist/es/utils/mix-complex.js"],"names":["__spreadArray","__assign","complex","color","mix","mixColor","isNum","pipe","invariant","getMixer","origin","target","v","test","mixComplex","mixArray","from","to","output","numValues","length","blendValue","map","fromThis","i","mixObject","key","undefined","analyse","value","parsed","parse","numNumbers","numRGB","numHSL","hue","template","createTransformer","originStats","targetStats"],"mappings":"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","sourcesContent":["import { __spreadArray, __assign } from 'tslib';\nimport { complex, color } from 'style-value-types';\nimport { mix } from './mix.js';\nimport { mixColor } from './mix-color.js';\nimport { isNum } from './inc.js';\nimport { pipe } from './pipe.js';\nimport { invariant } from 'hey-listen';\n\nfunction getMixer(origin, target) {\n    if (isNum(origin)) {\n        return function (v) { return mix(origin, target, v); };\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nvar mixArray = function (from, to) {\n    var output = __spreadArray([], from);\n    var numValues = output.length;\n    var blendValue = from.map(function (fromThis, i) { return getMixer(fromThis, to[i]); });\n    return function (v) {\n        for (var i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nvar mixObject = function (origin, target) {\n    var output = __assign(__assign({}, origin), target);\n    var blendValue = {};\n    for (var key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return function (v) {\n        for (var key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nfunction analyse(value) {\n    var parsed = complex.parse(value);\n    var numValues = parsed.length;\n    var numNumbers = 0;\n    var numRGB = 0;\n    var numHSL = 0;\n    for (var i = 0; i < numValues; i++) {\n        if (numNumbers || typeof parsed[i] === \"number\") {\n            numNumbers++;\n        }\n        else {\n            if (parsed[i].hue !== undefined) {\n                numHSL++;\n            }\n            else {\n                numRGB++;\n            }\n        }\n    }\n    return { parsed: parsed, numNumbers: numNumbers, numRGB: numRGB, numHSL: numHSL };\n}\nvar mixComplex = function (origin, target) {\n    var template = complex.createTransformer(target);\n    var originStats = analyse(origin);\n    var targetStats = analyse(target);\n    invariant(originStats.numHSL === targetStats.numHSL &&\n        originStats.numRGB === targetStats.numRGB &&\n        originStats.numNumbers >= targetStats.numNumbers, \"Complex values '\" + origin + \"' and '\" + target + \"' too different to mix. Ensure all colors are of the same type.\");\n    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n};\n\nexport { mixArray, mixComplex, mixObject };\n"]},"metadata":{},"sourceType":"module"}