{"ast":null,"code":"import { addUniqueItem, removeItem } from './array.js';\n\nvar SubscriptionManager = function () {\n  function SubscriptionManager() {\n    this.subscriptions = [];\n  }\n\n  SubscriptionManager.prototype.add = function (handler) {\n    var _this = this;\n\n    addUniqueItem(this.subscriptions, handler);\n    return function () {\n      return removeItem(_this.subscriptions, handler);\n    };\n  };\n\n  SubscriptionManager.prototype.notify = function (a, b, c) {\n    var numSubscriptions = this.subscriptions.length;\n    if (!numSubscriptions) return;\n\n    if (numSubscriptions === 1) {\n      /**\n       * If there's only a single handler we can just call it without invoking a loop.\n       */\n      this.subscriptions[0](a, b, c);\n    } else {\n      for (var i = 0; i < numSubscriptions; i++) {\n        /**\n         * Check whether the handler exists before firing as it's possible\n         * the subscriptions were modified during this loop running.\n         */\n        var handler = this.subscriptions[i];\n        handler && handler(a, b, c);\n      }\n    }\n  };\n\n  SubscriptionManager.prototype.getSize = function () {\n    return this.subscriptions.length;\n  };\n\n  SubscriptionManager.prototype.clear = function () {\n    this.subscriptions.length = 0;\n  };\n\n  return SubscriptionManager;\n}();\n\nexport { SubscriptionManager };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/utils/subscription-manager.js"],"names":["addUniqueItem","removeItem","SubscriptionManager","subscriptions","prototype","add","handler","_this","notify","a","b","c","numSubscriptions","length","i","getSize","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,YAA1C;;AAEA,IAAIC,mBAAmB,GAAkB,YAAY;AACjD,WAASA,mBAAT,GAA+B;AAC3B,SAAKC,aAAL,GAAqB,EAArB;AACH;;AACDD,EAAAA,mBAAmB,CAACE,SAApB,CAA8BC,GAA9B,GAAoC,UAAUC,OAAV,EAAmB;AACnD,QAAIC,KAAK,GAAG,IAAZ;;AACAP,IAAAA,aAAa,CAAC,KAAKG,aAAN,EAAqBG,OAArB,CAAb;AACA,WAAO,YAAY;AAAE,aAAOL,UAAU,CAACM,KAAK,CAACJ,aAAP,EAAsBG,OAAtB,CAAjB;AAAkD,KAAvE;AACH,GAJD;;AAKAJ,EAAAA,mBAAmB,CAACE,SAApB,CAA8BI,MAA9B,GAAuC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACtD,QAAIC,gBAAgB,GAAG,KAAKT,aAAL,CAAmBU,MAA1C;AACA,QAAI,CAACD,gBAAL,EACI;;AACJ,QAAIA,gBAAgB,KAAK,CAAzB,EAA4B;AACxB;AACZ;AACA;AACY,WAAKT,aAAL,CAAmB,CAAnB,EAAsBM,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B;AACH,KALD,MAMK;AACD,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;AACvC;AAChB;AACA;AACA;AACgB,YAAIR,OAAO,GAAG,KAAKH,aAAL,CAAmBW,CAAnB,CAAd;AACAR,QAAAA,OAAO,IAAIA,OAAO,CAACG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAlB;AACH;AACJ;AACJ,GApBD;;AAqBAT,EAAAA,mBAAmB,CAACE,SAApB,CAA8BW,OAA9B,GAAwC,YAAY;AAChD,WAAO,KAAKZ,aAAL,CAAmBU,MAA1B;AACH,GAFD;;AAGAX,EAAAA,mBAAmB,CAACE,SAApB,CAA8BY,KAA9B,GAAsC,YAAY;AAC9C,SAAKb,aAAL,CAAmBU,MAAnB,GAA4B,CAA5B;AACH,GAFD;;AAGA,SAAOX,mBAAP;AACH,CArCwC,EAAzC;;AAuCA,SAASA,mBAAT","sourcesContent":["import { addUniqueItem, removeItem } from './array.js';\n\nvar SubscriptionManager = /** @class */ (function () {\n    function SubscriptionManager() {\n        this.subscriptions = [];\n    }\n    SubscriptionManager.prototype.add = function (handler) {\n        var _this = this;\n        addUniqueItem(this.subscriptions, handler);\n        return function () { return removeItem(_this.subscriptions, handler); };\n    };\n    SubscriptionManager.prototype.notify = function (a, b, c) {\n        var numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (var i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                var handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    };\n    SubscriptionManager.prototype.getSize = function () {\n        return this.subscriptions.length;\n    };\n    SubscriptionManager.prototype.clear = function () {\n        this.subscriptions.length = 0;\n    };\n    return SubscriptionManager;\n}());\n\nexport { SubscriptionManager };\n"]},"metadata":{},"sourceType":"module"}