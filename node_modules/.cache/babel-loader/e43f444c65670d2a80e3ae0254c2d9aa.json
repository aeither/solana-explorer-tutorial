{"ast":null,"code":"import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.js';\n\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\n\nvar MotionValue = function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n\n\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n\n    this.lastUpdated = 0;\n    /**\n     * Functions to notify when the `MotionValue` updates.\n     *\n     * @internal\n     */\n\n    this.updateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the velocity updates.\n     *\n     * @internal\n     */\n\n    this.velocityUpdateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n     *\n     * @internal\n     */\n\n    this.renderSubscribers = new SubscriptionManager();\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = false;\n\n    this.updateAndNotify = function (v, render) {\n      if (render === void 0) {\n        render = true;\n      }\n\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      var _a = getFrameData(),\n          delta = _a.delta,\n          timestamp = _a.timestamp;\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current) {\n        _this.updateSubscribers.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.velocityUpdateSubscribers.getSize()) {\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render) {\n        _this.renderSubscribers.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.velocityCheck = function (_a) {\n      var timestamp = _a.timestamp;\n\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * @library\n   *\n   * ```jsx\n   * function MyComponent() {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.onChange(updateOpacity)\n   *     const unsubscribeY = y.onChange(updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <Frame x={x} />\n   * }\n   * ```\n   *\n   * @motion\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.onChange(updateOpacity)\n   *     const unsubscribeY = y.onChange(updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @internalremarks\n   *\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n   *\n   * ```jsx\n   * useOnChange(x, () => {})\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.onChange = function (subscription) {\n    return this.updateSubscribers.add(subscription);\n  };\n\n  MotionValue.prototype.clearListeners = function () {\n    this.updateSubscribers.clear();\n  };\n  /**\n   * Adds a function that will be notified when the `MotionValue` requests a render.\n   *\n   * @param subscriber - A function that's provided the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @internal\n   */\n\n\n  MotionValue.prototype.onRenderRequest = function (subscription) {\n    // Render immediately\n    subscription(this.get());\n    return this.renderSubscribers.add(subscription);\n  };\n  /**\n   * Attaches a passive effect to the `MotionValue`.\n   *\n   * @internal\n   */\n\n\n  MotionValue.prototype.attach = function (passiveEffect) {\n    this.passiveEffect = passiveEffect;\n  };\n  /**\n   * Sets the state of the `MotionValue`.\n   *\n   * @remarks\n   *\n   * ```jsx\n   * const x = useMotionValue(0)\n   * x.set(10)\n   * ```\n   *\n   * @param latest - Latest value to set.\n   * @param render - Whether to notify render subscribers. Defaults to `true`\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.set = function (v, render) {\n    if (render === void 0) {\n      render = true;\n    }\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  };\n  /**\n   * Returns the latest state of `MotionValue`\n   *\n   * @returns - The latest state of `MotionValue`\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.get = function () {\n    return this.current;\n  };\n  /**\n   * @public\n   */\n\n\n  MotionValue.prototype.getPrevious = function () {\n    return this.prev;\n  };\n  /**\n   * Returns the latest velocity of `MotionValue`\n   *\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.getVelocity = function () {\n    // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n    return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n    velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n  };\n  /**\n   * Registers a new animation to control this `MotionValue`. Only one\n   * animation can drive a `MotionValue` at one time.\n   *\n   * ```jsx\n   * value.start()\n   * ```\n   *\n   * @param animation - A function that starts the provided animation\n   *\n   * @internal\n   */\n\n\n  MotionValue.prototype.start = function (animation) {\n    var _this = this;\n\n    this.stop();\n    return new Promise(function (resolve) {\n      _this.hasAnimated = true;\n      _this.stopAnimation = animation(resolve);\n    }).then(function () {\n      return _this.clearAnimation();\n    });\n  };\n  /**\n   * Stop the currently active animation.\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.stop = function () {\n    if (this.stopAnimation) this.stopAnimation();\n    this.clearAnimation();\n  };\n  /**\n   * Returns `true` if this value is currently animating.\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.isAnimating = function () {\n    return !!this.stopAnimation;\n  };\n\n  MotionValue.prototype.clearAnimation = function () {\n    this.stopAnimation = null;\n  };\n  /**\n   * Destroy and clean up subscribers to this `MotionValue`.\n   *\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n   * created a `MotionValue` via the `motionValue` function.\n   *\n   * @public\n   */\n\n\n  MotionValue.prototype.destroy = function () {\n    this.updateSubscribers.clear();\n    this.renderSubscribers.clear();\n    this.stop();\n  };\n\n  return MotionValue;\n}();\n/**\n * @internal\n */\n\n\nfunction motionValue(init) {\n  return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/value/index.js"],"names":["sync","getFrameData","velocityPerSecond","SubscriptionManager","isFloat","value","isNaN","parseFloat","MotionValue","init","_this","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","_a","delta","timestamp","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","prototype","onChange","subscription","add","clearListeners","clear","onRenderRequest","get","attach","passiveEffect","set","getPrevious","start","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","isAnimating","destroy","motionValue"],"mappings":"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","sourcesContent":["import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.js';\n\nvar isFloat = function (value) {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /** @class */ (function () {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    function MotionValue(init) {\n        var _this = this;\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */\n        this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */\n        this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */\n        this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        this.updateAndNotify = function (v, render) {\n            if (render === void 0) { render = true; }\n            _this.prev = _this.current;\n            _this.current = v;\n            // Update timestamp\n            var _a = getFrameData(), delta = _a.delta, timestamp = _a.timestamp;\n            if (_this.lastUpdated !== timestamp) {\n                _this.timeDelta = delta;\n                _this.lastUpdated = timestamp;\n                sync.postRender(_this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (_this.prev !== _this.current) {\n                _this.updateSubscribers.notify(_this.current);\n            }\n            // Update velocity subscribers\n            if (_this.velocityUpdateSubscribers.getSize()) {\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                _this.renderSubscribers.notify(_this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = function () { return sync.postRender(_this.velocityCheck); };\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = function (_a) {\n            var timestamp = _a.timestamp;\n            if (timestamp !== _this.lastUpdated) {\n                _this.prev = _this.current;\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * @library\n     *\n     * ```jsx\n     * function MyComponent() {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <Frame x={x} />\n     * }\n     * ```\n     *\n     * @motion\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @internalremarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */\n    MotionValue.prototype.onChange = function (subscription) {\n        return this.updateSubscribers.add(subscription);\n    };\n    MotionValue.prototype.clearListeners = function () {\n        this.updateSubscribers.clear();\n    };\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n    MotionValue.prototype.onRenderRequest = function (subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    };\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    MotionValue.prototype.attach = function (passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    };\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    MotionValue.prototype.set = function (v, render) {\n        if (render === void 0) { render = true; }\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    };\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    MotionValue.prototype.get = function () {\n        return this.current;\n    };\n    /**\n     * @public\n     */\n    MotionValue.prototype.getPrevious = function () {\n        return this.prev;\n    };\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    MotionValue.prototype.getVelocity = function () {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    };\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    MotionValue.prototype.start = function (animation) {\n        var _this = this;\n        this.stop();\n        return new Promise(function (resolve) {\n            _this.hasAnimated = true;\n            _this.stopAnimation = animation(resolve);\n        }).then(function () { return _this.clearAnimation(); });\n    };\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    MotionValue.prototype.stop = function () {\n        if (this.stopAnimation)\n            this.stopAnimation();\n        this.clearAnimation();\n    };\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    MotionValue.prototype.isAnimating = function () {\n        return !!this.stopAnimation;\n    };\n    MotionValue.prototype.clearAnimation = function () {\n        this.stopAnimation = null;\n    };\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    MotionValue.prototype.destroy = function () {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    };\n    return MotionValue;\n}());\n/**\n * @internal\n */\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };\n"]},"metadata":{},"sourceType":"module"}