{"ast":null,"code":"import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n  var _a;\n\n  for (var key in next) {\n    var nextValue = next[key];\n    var prevValue = prev[key];\n\n    if (isMotionValue(nextValue)) {\n      /**\n       * If this is a motion value found in props or style, we want to add it\n       * to our visual element's motion value map.\n       */\n      element.addValue(key, nextValue);\n    } else if (isMotionValue(prevValue)) {\n      /**\n       * If we're swapping to a new motion value, create a new motion value\n       * from that\n       */\n      element.addValue(key, motionValue(nextValue));\n    } else if (prevValue !== nextValue) {\n      /**\n       * If this is a flat value that has changed, update the motion value\n       * or create one if it doesn't exist. We only want to do this if we're\n       * not handling the value with our animation state.\n       */\n      if (element.hasValue(key)) {\n        var existingValue = element.getValue(key); // TODO: Only update values that aren't being animated or even looked at\n\n        !existingValue.hasAnimated && existingValue.set(nextValue);\n      } else {\n        element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n      }\n    }\n  } // Handle removed values\n\n\n  for (var key in prev) {\n    if (next[key] === undefined) element.removeValue(key);\n  }\n\n  return next;\n}\n\nexport { updateMotionValuesFromProps };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/render/utils/motion-values.js"],"names":["motionValue","isMotionValue","updateMotionValuesFromProps","element","next","prev","_a","key","nextValue","prevValue","addValue","hasValue","existingValue","getValue","hasAnimated","set","getStaticValue","undefined","removeValue"],"mappings":"AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,sCAA9B;;AAEA,SAASC,2BAAT,CAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,IAApD,EAA0D;AACtD,MAAIC,EAAJ;;AACA,OAAK,IAAIC,GAAT,IAAgBH,IAAhB,EAAsB;AAClB,QAAII,SAAS,GAAGJ,IAAI,CAACG,GAAD,CAApB;AACA,QAAIE,SAAS,GAAGJ,IAAI,CAACE,GAAD,CAApB;;AACA,QAAIN,aAAa,CAACO,SAAD,CAAjB,EAA8B;AAC1B;AACZ;AACA;AACA;AACYL,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBC,SAAtB;AACH,KAND,MAOK,IAAIP,aAAa,CAACQ,SAAD,CAAjB,EAA8B;AAC/B;AACZ;AACA;AACA;AACYN,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAACQ,SAAD,CAAjC;AACH,KANI,MAOA,IAAIC,SAAS,KAAKD,SAAlB,EAA6B;AAC9B;AACZ;AACA;AACA;AACA;AACY,UAAIL,OAAO,CAACQ,QAAR,CAAiBJ,GAAjB,CAAJ,EAA2B;AACvB,YAAIK,aAAa,GAAGT,OAAO,CAACU,QAAR,CAAiBN,GAAjB,CAApB,CADuB,CAEvB;;AACA,SAACK,aAAa,CAACE,WAAf,IAA8BF,aAAa,CAACG,GAAd,CAAkBP,SAAlB,CAA9B;AACH,OAJD,MAKK;AACDL,QAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAAC,CAACM,EAAE,GAAGH,OAAO,CAACa,cAAR,CAAuBT,GAAvB,CAAN,MAAuC,IAAvC,IAA+CD,EAAE,KAAK,KAAK,CAA3D,GAA+DA,EAA/D,GAAoEE,SAArE,CAAjC;AACH;AACJ;AACJ,GAlCqD,CAmCtD;;;AACA,OAAK,IAAID,GAAT,IAAgBF,IAAhB,EAAsB;AAClB,QAAID,IAAI,CAACG,GAAD,CAAJ,KAAcU,SAAlB,EACId,OAAO,CAACe,WAAR,CAAoBX,GAApB;AACP;;AACD,SAAOH,IAAP;AACH;;AAED,SAASF,2BAAT","sourcesContent":["import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"]},"metadata":{},"sourceType":"module"}