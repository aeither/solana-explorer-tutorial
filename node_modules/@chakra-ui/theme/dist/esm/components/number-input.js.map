{"version":3,"sources":["../../../src/components/number-input.ts"],"names":["numberInputAnatomy","parts","calc","cssVar","mode","typography","Input","variants","defaultProps","$stepperWidth","$inputPadding","inputPaddingValue","add","toString","baseStyleRoot","variable","baseStyleField","baseStyle","field","baseStyleStepperGroup","width","reference","baseStyleStepper","props","borderStart","borderStartColor","color","_active","bg","_disabled","opacity","cursor","root","stepperGroup","stepper","getSize","size","sizeStyle","sizes","radius","lg","md","sm","xs","_fontSize","fontSize","fontSizes","paddingInlineEnd","verticalAlign","multiply","_first","borderTopEndRadius","_last","borderBottomEndRadius","mt","borderTopWidth","keys"],"mappings":"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","sourcesContent":["import { numberInputAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport type {\n  PartsStyleFunction,\n  PartsStyleObject,\n  SystemStyleFunction,\n  SystemStyleObject,\n} from \"@chakra-ui/theme-tools\"\nimport { calc, cssVar, mode } from \"@chakra-ui/theme-tools\"\nimport typography from \"../foundations/typography\"\nimport Input from \"./input\"\n\nconst { variants, defaultProps } = Input\n\nconst $stepperWidth = cssVar(\"number-input-stepper-width\")\n\nconst $inputPadding = cssVar(\"number-input-input-padding\")\nconst inputPaddingValue = calc($stepperWidth).add(\"0.5rem\").toString()\n\nconst baseStyleRoot: SystemStyleObject = {\n  [$stepperWidth.variable]: \"24px\",\n  [$inputPadding.variable]: inputPaddingValue,\n}\n\nconst baseStyleField: SystemStyleObject = Input.baseStyle?.field ?? {}\n\nconst baseStyleStepperGroup: SystemStyleObject = {\n  width: [$stepperWidth.reference],\n}\n\nconst baseStyleStepper: SystemStyleFunction = (props) => {\n  return {\n    borderStart: \"1px solid\",\n    borderStartColor: mode(\"inherit\", \"whiteAlpha.300\")(props),\n    color: mode(\"inherit\", \"whiteAlpha.800\")(props),\n    _active: {\n      bg: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: \"not-allowed\",\n    },\n  }\n}\n\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\n  root: baseStyleRoot,\n  field: baseStyleField,\n  stepperGroup: baseStyleStepperGroup,\n  stepper: baseStyleStepper(props),\n})\n\ntype Size = \"xs\" | \"sm\" | \"md\" | \"lg\"\n\nfunction getSize(size: Size): PartsStyleObject<typeof parts> {\n  const sizeStyle = Input.sizes[size]\n\n  const radius: Record<Size, string> = {\n    lg: \"md\",\n    md: \"md\",\n    sm: \"sm\",\n    xs: \"sm\",\n  }\n\n  const _fontSize = sizeStyle.field?.fontSize ?? \"md\"\n  const fontSize = typography.fontSizes[_fontSize.toString()]\n\n  return {\n    field: {\n      ...sizeStyle.field,\n      paddingInlineEnd: $inputPadding.reference,\n      verticalAlign: \"top\",\n    },\n    stepper: {\n      fontSize: calc(fontSize).multiply(0.75).toString(),\n      _first: {\n        borderTopEndRadius: radius[size],\n      },\n      _last: {\n        borderBottomEndRadius: radius[size],\n        mt: \"-1px\",\n        borderTopWidth: 1,\n      },\n    },\n  }\n}\n\nconst sizes = {\n  xs: getSize(\"xs\"),\n  sm: getSize(\"sm\"),\n  md: getSize(\"md\"),\n  lg: getSize(\"lg\"),\n}\n\nexport default {\n  parts: parts.keys,\n  baseStyle,\n  sizes,\n  variants,\n  defaultProps,\n}\n"],"file":"number-input.js"}