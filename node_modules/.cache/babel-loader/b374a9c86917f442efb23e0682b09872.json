{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\n\nexport var Box = chakra(\"div\");\n\nif (__DEV__) {\n  Box.displayName = \"Box\";\n}\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\n\n\nexport var Square = /*#__PURE__*/forwardRef(function (props, ref) {\n  var size = props.size,\n      _props$centerContent = props.centerContent,\n      centerContent = _props$centerContent === void 0 ? true : _props$centerContent,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"centerContent\"]);\n\n  var styles = centerContent ? {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  } : {};\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref,\n    boxSize: size,\n    __css: _extends({}, styles, {\n      flexShrink: 0,\n      flexGrow: 0\n    })\n  }, rest));\n});\n\nif (__DEV__) {\n  Square.displayName = \"Square\";\n}\n\nexport var Circle = /*#__PURE__*/forwardRef(function (props, ref) {\n  var size = props.size,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\"]);\n\n  return /*#__PURE__*/React.createElement(Square, _extends({\n    size: size,\n    ref: ref,\n    borderRadius: \"9999px\"\n  }, rest));\n});\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}","map":{"version":3,"sources":["../../src/box.tsx"],"names":["Box","chakra","Square","forwardRef","centerContent","styles","display","alignItems","justifyContent","flexShrink","flexGrow","Circle","size"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,mBAAA;AAMA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,GAAG,GAAGC,MAAM,CAAlB,KAAkB,CAAlB;;AAEP,IAAA,OAAA,EAAa;AACXD,EAAAA,GAAG,CAAHA,WAAAA,GAAAA,KAAAA;AACD;AAED;AACA;AACA;AACA;;;AAcA,OAAO,IAAME,MAAM,GAAA,aAAGC,UAAU,CAAqB,UAAA,KAAA,EAAA,GAAA,EAAgB;AACnE,MAAM,IAAN,GAAA,KAAA,CAAM,IAAN;AAAA,6BAAA,KAAA,CAAcC,aAAd;AAAA,MAAcA,aAAd,qCAA8B,IAA9B;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,eAAA,CAAA,CAAA;;AAEA,MAAMC,MAAyB,GAAGD,aAAa,GAC3C;AAAEE,IAAAA,OAAO,EAAT,MAAA;AAAmBC,IAAAA,UAAU,EAA7B,QAAA;AAAyCC,IAAAA,cAAc,EAAE;AAAzD,GAD2C,GAA/C,EAAA;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,OAAO,EAFT,IAAA;AAGE,IAAA,KAAK,EAAA,QAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEHC,MAAAA,UAAU,EAFP,CAAA;AAGHC,MAAAA,QAAQ,EAAE;AAHP,KAAA;AAHP,GAAA,EADF,IACE,CAAA,CADF;AAPK,CAAyB,CAAzB;;AAqBP,IAAA,OAAA,EAAa;AACXR,EAAAA,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD;;AAED,OAAO,IAAMS,MAAM,GAAA,aAAGR,UAAU,CAAqB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAC7D,MAAES,IAAF,GAAN,KAAM,CAAEA,IAAF;AAAA,MAAN,IAAM,GAAN,6BAAA,CAAA,KAAA,EAAA,CAAA,MAAA,CAAA,CAAM;;AACN,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,IAAA,IAAI,EAAZ,IAAA;AAAoB,IAAA,GAAG,EAAvB,GAAA;AAA8B,IAAA,YAAY,EAAC;AAA3C,GAAA,EAAP,IAAO,CAAA,CAAP;AAFK,CAAyB,CAAzB;;AAKP,IAAA,OAAA,EAAa;AACXD,EAAAA,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nif (__DEV__) {\n  Box.displayName = \"Box\"\n}\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  Square.displayName = \"Square\"\n}\n\nexport const Circle = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n"]},"metadata":{},"sourceType":"module"}