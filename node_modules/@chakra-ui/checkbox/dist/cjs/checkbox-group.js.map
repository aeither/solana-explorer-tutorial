{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["name","strict","CheckboxGroupProvider","useCheckboxGroupContext","CheckboxGroup","props","colorScheme","size","variant","children","isDisabled","value","onChange","group","React","useMemo","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;AACA;;AACA;;;;;;qBAmBI,+BAAoC;AACtCA,EAAAA,IAAI,EAAE,sBADgC;AAEtCC,EAAAA,MAAM,EAAE;AAF8B,CAApC,C;IAFFC,qB;IACAC,uB;;;;AAQF;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,CAACC,KAAD,EAAW;AAAA,MAC5DC,WAD4D,GACPD,KADO,CAC5DC,WAD4D;AAAA,MAC/CC,IAD+C,GACPF,KADO,CAC/CE,IAD+C;AAAA,MACzCC,OADyC,GACPH,KADO,CACzCG,OADyC;AAAA,MAChCC,QADgC,GACPJ,KADO,CAChCI,QADgC;AAAA,MACtBC,UADsB,GACPL,KADO,CACtBK,UADsB;;AAAA,0BAExC,yCAAiBL,KAAjB,CAFwC;AAAA,MAE5DM,KAF4D,qBAE5DA,KAF4D;AAAA,MAErDC,QAFqD,qBAErDA,QAFqD;;AAIpE,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CACZ;AAAA,WAAO;AACLR,MAAAA,IAAI,EAAJA,IADK;AAELK,MAAAA,QAAQ,EAARA,QAFK;AAGLN,MAAAA,WAAW,EAAXA,WAHK;AAILK,MAAAA,KAAK,EAALA,KAJK;AAKLH,MAAAA,OAAO,EAAPA,OALK;AAMLE,MAAAA,UAAU,EAAVA;AANK,KAAP;AAAA,GADY,EASZ,CAACH,IAAD,EAAOK,QAAP,EAAiBN,WAAjB,EAA8BK,KAA9B,EAAqCH,OAArC,EAA8CE,UAA9C,CATY,CAAd;AAYA,sBAAO,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEG;AAA9B,KAAsCJ,QAAtC,CAAP;AACD,CAjBM;;;;AAmBP,IAAIO,cAAJ,EAAa;AACXZ,EAAAA,aAAa,CAACa,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\" | \"isDisabled\">,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {}\n\nconst [\n  CheckboxGroupProvider,\n  useCheckboxGroupContext,\n] = createContext<CheckboxGroupContext>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"],"file":"checkbox-group.js"}