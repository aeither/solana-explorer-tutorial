{"version":3,"sources":["../../../src/utils/parse-gradient.ts"],"names":["isString","directionMap","valueSet","Set","Object","values","globalSet","trimSpace","str","trim","parseGradient","value","theme","has","regex","type","exec","groups","_type","includes","maybeDirection","stops","split","map","filter","Boolean","length","direction","unshift","_values","stop","firstStop","indexOf","_color","_stop","substr","_stopOrFunc","isCSSFunction","key","color","__cssMap","varRef","join","gradientTransform"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAAeA,QAAf,QAA+B,kBAA/B;AAGA,IAAMC,YAAY,GAAG;AACnB,UAAQ,QADW;AAEnB,WAAS,cAFU;AAGnB,UAAQ,UAHW;AAInB,WAAS,iBAJU;AAKnB,UAAQ,WALW;AAMnB,WAAS,gBANU;AAOnB,UAAQ,SAPW;AAQnB,WAAS;AARU,CAArB;AAWA,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,MAAP,CAAcJ,YAAd,CAAR,CAAjB;AAEA,OAAO,IAAMK,SAAS,GAAG,IAAIH,GAAJ,CAAQ,CAC/B,MAD+B,EAE/B,cAF+B,EAG/B,SAH+B,EAI/B,SAJ+B,EAK/B,QAL+B,EAM/B,OAN+B,CAAR,CAAlB;;AASP,IAAMI,SAAS,GAAIC,GAAD,IAAiBA,GAAG,CAACC,IAAJ,EAAnC;;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAyDC,KAAzD,EAAsE;AAAA;;AAC3E,MAAID,KAAK,IAAI,IAAT,IAAiBL,SAAS,CAACO,GAAV,CAAcF,KAAd,CAArB,EAA2C,OAAOA,KAAP;;AAC3C,MAAMG,KAAK,4BAAG,6BAAH;AAAA;AAAA;AAAA,IAAX;;AACA,MAAM;AAAEC,IAAAA,IAAF;AAAQV,IAAAA;AAAR,2CAAmBS,KAAK,CAACE,IAAN,CAAWL,KAAX,CAAnB,qBAAmB,YAAmBM,MAAtC,iCAAgD,EAAtD;AAEA,MAAI,CAACF,IAAD,IAAS,CAACV,MAAd,EAAsB,OAAOM,KAAP;;AAEtB,MAAMO,KAAK,GAAGH,IAAI,CAACI,QAAL,CAAc,WAAd,IAA6BJ,IAA7B,GAAuCA,IAAvC,cAAd;;AACA,MAAM,CAACK,cAAD,EAAiB,GAAGC,KAApB,IAA6BhB,MAAM,CACtCiB,KADgC,CAC1B,GAD0B,EAEhCC,GAFgC,CAE5BhB,SAF4B,EAGhCiB,MAHgC,CAGzBC,OAHyB,CAAnC;AAKA,MAAI,CAAAJ,KAAK,QAAL,YAAAA,KAAK,CAAEK,MAAP,MAAkB,CAAtB,EAAyB,OAAOf,KAAP;AAEzB,MAAMgB,SAAS,GACbP,cAAc,IAAInB,YAAlB,GACIA,YAAY,CAACmB,cAAD,CADhB,GAEIA,cAHN;AAKAC,EAAAA,KAAK,CAACO,OAAN,CAAcD,SAAd;;AAEA,MAAME,OAAO,GAAGR,KAAK,CAACE,GAAN,CAAWO,IAAD,IAAU;AAClC;AACA,QAAI5B,QAAQ,CAACW,GAAT,CAAaiB,IAAb,CAAJ,EAAwB,OAAOA,IAAP;AAExB,QAAMC,SAAS,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,CAAlB,CAJkC,CAMlC;;AACA,QAAM,CAACC,MAAD,EAASC,KAAT,IACJH,SAAS,KAAK,CAAC,CAAf,GACI,CAACD,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeJ,SAAf,CAAD,EAA4BD,IAAI,CAACK,MAAL,CAAYJ,SAAS,GAAG,CAAxB,CAA5B,CADJ,GAEI,CAACD,IAAD,CAHN;;AAKA,QAAMM,WAAW,GAAGC,aAAa,CAACH,KAAD,CAAb,GAAuBA,KAAvB,GAA+BA,KAAK,IAAIA,KAAK,CAACZ,KAAN,CAAY,GAAZ,CAA5D,CAZkC,CAclC;;;AACA,QAAMgB,GAAG,eAAaL,MAAtB;AACA,QAAMM,KAAK,GAAGD,GAAG,IAAI1B,KAAK,CAAC4B,QAAb,GAAwB5B,KAAK,CAAC4B,QAAN,CAAeF,GAAf,EAAoBG,MAA5C,GAAqDR,MAAnE;AACA,WAAOG,WAAW,GAAG,CAACG,KAAD,EAAQH,WAAR,EAAqBM,IAArB,CAA0B,GAA1B,CAAH,GAAoCH,KAAtD;AACD,GAlBe,CAAhB;;AAoBA,SAAUrB,KAAV,SAAmBW,OAAO,CAACa,IAAR,CAAa,IAAb,CAAnB;AACD;AAED,OAAO,IAAML,aAAa,GAAI1B,KAAD,IAAoB;AAC/C,SAAOX,QAAQ,CAACW,KAAD,CAAR,IAAmBA,KAAK,CAACQ,QAAN,CAAe,GAAf,CAAnB,IAA0CR,KAAK,CAACQ,QAAN,CAAe,GAAf,CAAjD;AACD,CAFM;AAIP,OAAO,IAAMwB,iBAA4B,GAAG,CAAChC,KAAD,EAAQC,KAAR,KAC1CF,aAAa,CAACC,KAAD,EAAQC,KAAR,WAAQA,KAAR,GAAiB,EAAjB,CADR","sourcesContent":["import { Dict, isString } from \"@chakra-ui/utils\"\nimport { Transform } from \"./types\"\n\nconst directionMap = {\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\",\n}\n\nconst valueSet = new Set(Object.values(directionMap))\n\nexport const globalSet = new Set([\n  \"none\",\n  \"-moz-initial\",\n  \"inherit\",\n  \"initial\",\n  \"revert\",\n  \"unset\",\n])\n\nconst trimSpace = (str: string) => str.trim()\n\nexport function parseGradient(value: string | null | undefined, theme: Dict) {\n  if (value == null || globalSet.has(value)) return value\n  const regex = /(?<type>^[a-z-A-Z]+)\\((?<values>(.*))\\)/g\n  const { type, values } = regex.exec(value)?.groups ?? {}\n\n  if (!type || !values) return value\n\n  const _type = type.includes(\"-gradient\") ? type : `${type}-gradient`\n  const [maybeDirection, ...stops] = values\n    .split(\",\")\n    .map(trimSpace)\n    .filter(Boolean)\n\n  if (stops?.length === 0) return value\n\n  const direction =\n    maybeDirection in directionMap\n      ? directionMap[maybeDirection]\n      : maybeDirection\n\n  stops.unshift(direction)\n\n  const _values = stops.map((stop) => {\n    // if stop is valid shorthand direction, return it\n    if (valueSet.has(stop)) return stop\n\n    const firstStop = stop.indexOf(\" \")\n\n    // color stop could be `red.200 20%` based on css gradient spec\n    const [_color, _stop] =\n      firstStop !== -1\n        ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)]\n        : [stop]\n\n    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(\" \")\n\n    // else, get and transform the color token or css value\n    const key = `colors.${_color}`\n    const color = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color\n    return _stopOrFunc ? [color, _stopOrFunc].join(\" \") : color\n  })\n\n  return `${_type}(${_values.join(\", \")})`\n}\n\nexport const isCSSFunction = (value: unknown) => {\n  return isString(value) && value.includes(\"(\") && value.includes(\")\")\n}\n\nexport const gradientTransform: Transform = (value, theme) =>\n  parseGradient(value, theme ?? {})\n"],"file":"parse-gradient.js"}