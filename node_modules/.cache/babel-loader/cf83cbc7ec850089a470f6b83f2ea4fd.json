{"ast":null,"code":"var unresolvedJobs = new Set();\n\nfunction pushJob(stack, job, pointer) {\n  if (!stack[pointer]) stack[pointer] = [];\n  stack[pointer].push(job);\n}\n\nfunction batchLayout(callback) {\n  unresolvedJobs.add(callback);\n  return function () {\n    return unresolvedJobs.delete(callback);\n  };\n}\n\nfunction flushLayout() {\n  if (!unresolvedJobs.size) return;\n  var pointer = 0;\n  var reads = [[]];\n  var writes = [];\n\n  var setRead = function setRead(job) {\n    return pushJob(reads, job, pointer);\n  };\n\n  var setWrite = function setWrite(job) {\n    pushJob(writes, job, pointer);\n    pointer++;\n  };\n  /**\n   * Resolve jobs into their array stacks\n   */\n\n\n  unresolvedJobs.forEach(function (callback) {\n    callback(setRead, setWrite);\n    pointer = 0;\n  });\n  unresolvedJobs.clear();\n  /**\n   * Execute jobs\n   */\n\n  var numStacks = writes.length;\n\n  for (var i = 0; i <= numStacks; i++) {\n    reads[i] && reads[i].forEach(executeJob);\n    writes[i] && writes[i].forEach(executeJob);\n  }\n}\n\nvar executeJob = function executeJob(job) {\n  return job();\n};\n\nexport { batchLayout, flushLayout };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js"],"names":["unresolvedJobs","Set","pushJob","stack","job","pointer","push","batchLayout","callback","add","delete","flushLayout","size","reads","writes","setRead","setWrite","forEach","clear","numStacks","length","i","executeJob"],"mappings":"AAAA,IAAIA,cAAc,GAAG,IAAIC,GAAJ,EAArB;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AAClC,MAAI,CAACF,KAAK,CAACE,OAAD,CAAV,EACIF,KAAK,CAACE,OAAD,CAAL,GAAiB,EAAjB;AACJF,EAAAA,KAAK,CAACE,OAAD,CAAL,CAAeC,IAAf,CAAoBF,GAApB;AACH;;AACD,SAASG,WAAT,CAAqBC,QAArB,EAA+B;AAC3BR,EAAAA,cAAc,CAACS,GAAf,CAAmBD,QAAnB;AACA,SAAO,YAAY;AAAE,WAAOR,cAAc,CAACU,MAAf,CAAsBF,QAAtB,CAAP;AAAyC,GAA9D;AACH;;AACD,SAASG,WAAT,GAAuB;AACnB,MAAI,CAACX,cAAc,CAACY,IAApB,EACI;AACJ,MAAIP,OAAO,GAAG,CAAd;AACA,MAAIQ,KAAK,GAAG,CAAC,EAAD,CAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIC,OAAO,GAAG,SAAVA,OAAU,CAAUX,GAAV,EAAe;AAAE,WAAOF,OAAO,CAACW,KAAD,EAAQT,GAAR,EAAaC,OAAb,CAAd;AAAsC,GAArE;;AACA,MAAIW,QAAQ,GAAG,SAAXA,QAAW,CAAUZ,GAAV,EAAe;AAC1BF,IAAAA,OAAO,CAACY,MAAD,EAASV,GAAT,EAAcC,OAAd,CAAP;AACAA,IAAAA,OAAO;AACV,GAHD;AAIA;AACJ;AACA;;;AACIL,EAAAA,cAAc,CAACiB,OAAf,CAAuB,UAAUT,QAAV,EAAoB;AACvCA,IAAAA,QAAQ,CAACO,OAAD,EAAUC,QAAV,CAAR;AACAX,IAAAA,OAAO,GAAG,CAAV;AACH,GAHD;AAIAL,EAAAA,cAAc,CAACkB,KAAf;AACA;AACJ;AACA;;AACI,MAAIC,SAAS,GAAGL,MAAM,CAACM,MAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,SAArB,EAAgCE,CAAC,EAAjC,EAAqC;AACjCR,IAAAA,KAAK,CAACQ,CAAD,CAAL,IAAYR,KAAK,CAACQ,CAAD,CAAL,CAASJ,OAAT,CAAiBK,UAAjB,CAAZ;AACAR,IAAAA,MAAM,CAACO,CAAD,CAAN,IAAaP,MAAM,CAACO,CAAD,CAAN,CAAUJ,OAAV,CAAkBK,UAAlB,CAAb;AACH;AACJ;;AACD,IAAIA,UAAU,GAAG,SAAbA,UAAa,CAAUlB,GAAV,EAAe;AAAE,SAAOA,GAAG,EAAV;AAAe,CAAjD;;AAEA,SAASG,WAAT,EAAsBI,WAAtB","sourcesContent":["var unresolvedJobs = new Set();\nfunction pushJob(stack, job, pointer) {\n    if (!stack[pointer])\n        stack[pointer] = [];\n    stack[pointer].push(job);\n}\nfunction batchLayout(callback) {\n    unresolvedJobs.add(callback);\n    return function () { return unresolvedJobs.delete(callback); };\n}\nfunction flushLayout() {\n    if (!unresolvedJobs.size)\n        return;\n    var pointer = 0;\n    var reads = [[]];\n    var writes = [];\n    var setRead = function (job) { return pushJob(reads, job, pointer); };\n    var setWrite = function (job) {\n        pushJob(writes, job, pointer);\n        pointer++;\n    };\n    /**\n     * Resolve jobs into their array stacks\n     */\n    unresolvedJobs.forEach(function (callback) {\n        callback(setRead, setWrite);\n        pointer = 0;\n    });\n    unresolvedJobs.clear();\n    /**\n     * Execute jobs\n     */\n    var numStacks = writes.length;\n    for (var i = 0; i <= numStacks; i++) {\n        reads[i] && reads[i].forEach(executeJob);\n        writes[i] && writes[i].forEach(executeJob);\n    }\n}\nvar executeJob = function (job) { return job(); };\n\nexport { batchLayout, flushLayout };\n"]},"metadata":{},"sourceType":"module"}