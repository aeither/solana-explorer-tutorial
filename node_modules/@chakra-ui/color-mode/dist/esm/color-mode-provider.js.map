{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["isBrowser","noop","__DEV__","React","addListener","getColorScheme","syncBodyClassName","root","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","colorMode","rawSetColorMode","useState","type","get","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n  root,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"],"file":"color-mode-provider.js"}