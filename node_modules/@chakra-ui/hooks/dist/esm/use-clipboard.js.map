{"version":3,"sources":["../../src/use-clipboard.ts"],"names":["useState","useCallback","useEffect","copy","useClipboard","text","optionsOrTimeout","hasCopied","setHasCopied","timeout","copyOptions","onCopy","didCopy","timeoutId","window","setTimeout","clearTimeout","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAT,CACLC,IADK,EAELC,gBAFK,EAGL;AAAA,MADAA,gBACA;AADAA,IAAAA,gBACA,GADiD,EACjD;AAAA;;AACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;AAEA,aACE,OAAOM,gBAAP,KAA4B,QAA5B,GACI;AAAEG,IAAAA,OAAO,EAAEH;AAAX,GADJ,GAEIA,gBAHN;AAAA,MAAM;AAAEG,IAAAA,OAAO,GAAG;AAAZ,GAAN;AAAA,MAA2BC,WAA3B;;AAKA,MAAMC,MAAM,GAAGV,WAAW,CAAC,MAAM;AAC/B,QAAMW,OAAO,GAAGT,IAAI,CAACE,IAAD,EAAOK,WAAP,CAApB;AACAF,IAAAA,YAAY,CAACI,OAAD,CAAZ;AACD,GAHyB,EAGvB,CAACP,IAAD,EAAOK,WAAP,CAHuB,CAA1B;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAwB,GAAG,IAA/B;;AAEA,QAAIN,SAAJ,EAAe;AACbM,MAAAA,SAAS,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAClCP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAFW,EAETC,OAFS,CAAZ;AAGD;;AAED,WAAO,MAAM;AACX,UAAII,SAAJ,EAAe;AACbC,QAAAA,MAAM,CAACE,YAAP,CAAoBH,SAApB;AACD;AACF,KAJD;AAKD,GAdQ,EAcN,CAACJ,OAAD,EAAUF,SAAV,CAdM,CAAT;AAgBA,SAAO;AAAEU,IAAAA,KAAK,EAAEZ,IAAT;AAAeM,IAAAA,MAAf;AAAuBJ,IAAAA;AAAvB,GAAP;AACD","sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\nexport function useClipboard(\n  text: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text, copyOptions)\n    setHasCopied(didCopy)\n  }, [text, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return { value: text, onCopy, hasCopied }\n}\n"],"file":"use-clipboard.js"}