{"ast":null,"code":"import { __read } from 'tslib';\nimport { mix } from 'popmotion';\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\n\nfunction applyConstraints(point, _a, elastic) {\n  var min = _a.min,\n      max = _a.max;\n\n  if (min !== undefined && point < min) {\n    // If we have a min point defined, and this is outside of that, constrain\n    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n  } else if (max !== undefined && point > max) {\n    // If we have a max point defined, and this is outside of that, constrain\n    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n  }\n\n  return point;\n}\n/**\n * Calculates a min projection point based on a pointer, pointer progress\n * within the drag target, and constraints.\n *\n * For instance if an element was 100px width, we were dragging from 0.25\n * along this axis, the pointer is at 200px, and there were no constraints,\n * we would calculate a min projection point of 175px.\n */\n\n\nfunction calcConstrainedMinPoint(point, length, progress, constraints, elastic) {\n  // Calculate a min point for this axis and apply it to the current pointer\n  var min = point - length * progress;\n  return constraints ? applyConstraints(min, constraints, elastic) : min;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\n\n\nfunction calcRelativeAxisConstraints(axis, min, max) {\n  return {\n    min: min !== undefined ? axis.min + min : undefined,\n    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n  };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\n\n\nfunction calcRelativeConstraints(layoutBox, _a) {\n  var top = _a.top,\n      left = _a.left,\n      bottom = _a.bottom,\n      right = _a.right;\n  return {\n    x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\n\n\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n  var _a;\n\n  var min = constraintsAxis.min - layoutAxis.min;\n  var max = constraintsAxis.max - layoutAxis.max; // If the constraints axis is actually smaller than the layout axis then we can\n  // flip the constraints\n\n  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n    _a = __read([max, min], 2), min = _a[0], max = _a[1];\n  }\n\n  return {\n    min: layoutAxis.min + min,\n    max: layoutAxis.min + max\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\n\n\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n  return {\n    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n  };\n}\n/**\n * Calculate the an axis position based on two axes and a progress value.\n */\n\n\nfunction calcPositionFromProgress(axis, constraints, progress) {\n  var axisLength = axis.max - axis.min;\n  var min = mix(constraints.min, constraints.max - axisLength, progress);\n  return {\n    min: min,\n    max: min + axisLength\n  };\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\n\n\nfunction rebaseAxisConstraints(layout, constraints) {\n  var relativeConstraints = {};\n\n  if (constraints.min !== undefined) {\n    relativeConstraints.min = constraints.min - layout.min;\n  }\n\n  if (constraints.max !== undefined) {\n    relativeConstraints.max = constraints.max - layout.min;\n  }\n\n  return relativeConstraints;\n}\n\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\n\nfunction resolveDragElastic(dragElastic) {\n  if (dragElastic === false) {\n    dragElastic = 0;\n  } else if (dragElastic === true) {\n    dragElastic = defaultElastic;\n  }\n\n  return {\n    x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n    y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n  };\n}\n\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n  return {\n    min: resolvePointElastic(dragElastic, minLabel),\n    max: resolvePointElastic(dragElastic, maxLabel)\n  };\n}\n\nfunction resolvePointElastic(dragElastic, label) {\n  var _a;\n\n  return typeof dragElastic === \"number\" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js"],"names":["__read","mix","applyConstraints","point","_a","elastic","min","max","undefined","Math","calcConstrainedMinPoint","length","progress","constraints","calcRelativeAxisConstraints","axis","calcRelativeConstraints","layoutBox","top","left","bottom","right","x","y","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcPositionFromProgress","axisLength","rebaseAxisConstraints","layout","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label"],"mappings":"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","sourcesContent":["import { __read } from 'tslib';\nimport { mix } from 'popmotion';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, _a, elastic) {\n    var min = _a.min, max = _a.max;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculates a min projection point based on a pointer, pointer progress\n * within the drag target, and constraints.\n *\n * For instance if an element was 100px width, we were dragging from 0.25\n * along this axis, the pointer is at 200px, and there were no constraints,\n * we would calculate a min projection point of 175px.\n */\nfunction calcConstrainedMinPoint(point, length, progress, constraints, elastic) {\n    // Calculate a min point for this axis and apply it to the current pointer\n    var min = point - length * progress;\n    return constraints ? applyConstraints(min, constraints, elastic) : min;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, _a) {\n    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    var _a;\n    var min = constraintsAxis.min - layoutAxis.min;\n    var max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        _a = __read([max, min], 2), min = _a[0], max = _a[1];\n    }\n    return {\n        min: layoutAxis.min + min,\n        max: layoutAxis.min + max,\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate the an axis position based on two axes and a progress value.\n */\nfunction calcPositionFromProgress(axis, constraints, progress) {\n    var axisLength = axis.max - axis.min;\n    var min = mix(constraints.min, constraints.max - axisLength, progress);\n    return { min: min, max: min + axisLength };\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    var relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n"]},"metadata":{},"sourceType":"module"}