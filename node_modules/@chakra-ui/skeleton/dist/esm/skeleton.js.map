{"version":3,"sources":["../../src/skeleton.tsx"],"names":["useBreakpointValue","chakra","forwardRef","keyframes","omitThemingProps","useStyleConfig","usePrevious","cx","__DEV__","React","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","from","opacity","to","useIsFirstRender","isFirstRender","useRef","useEffect","current","Skeleton","props","ref","styles","isLoaded","fadeDuration","className","rest","wasPreviouslyLoaded","_className","animation","defaultProps","speed","displayName","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","startColor","endColor","children","noOfLinesValue","numbers","getWidth","length","number","sizeProps","mb","width","height","toString","undefined","SkeletonCircle","size"],"mappings":"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","sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { usePrevious } from \"@chakra-ui/hooks\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"],"file":"skeleton.js"}