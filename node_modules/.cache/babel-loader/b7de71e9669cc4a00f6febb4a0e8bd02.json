{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { usePrevious } from \"@chakra-ui/hooks\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\n\nvar useIsFirstRender = function useIsFirstRender() {\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\n\nexport var Skeleton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Skeleton\", props);\n  var isFirstRender = useIsFirstRender();\n\n  var _omitThemingProps = omitThemingProps(props),\n      isLoaded = _omitThemingProps.isLoaded,\n      fadeDuration = _omitThemingProps.fadeDuration,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\"]);\n\n  var wasPreviouslyLoaded = usePrevious(isLoaded);\n\n  var _className = cx(\"chakra-skeleton\", className);\n\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : fade + \" \" + fadeDuration + \"s\";\n    return /*#__PURE__*/React.createElement(chakra.div, _extends({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(StyledSkeleton, _extends({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: styles\n  }));\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\";\n}\n\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\n\nvar defaultNoOfLines = 3;\nexport var SkeletonText = function SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n      noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      _props$skeletonHeight = props.skeletonHeight,\n      skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n      className = props.className,\n      startColor = props.startColor,\n      endColor = props.endColor,\n      isLoaded = props.isLoaded,\n      fadeDuration = props.fadeDuration,\n      speed = props.speed,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"]);\n\n  var noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  var _className = cx(\"chakra-skeleton__group\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest), numbers.map(function (number, index) {\n    if (isLoaded && index > 0) {\n      // skip other lines\n      return null;\n    }\n\n    var sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /*#__PURE__*/React.createElement(Skeleton, _extends({\n      key: numbers.length.toString() + number,\n      startColor: startColor,\n      endColor: endColor,\n      isLoaded: isLoaded,\n      fadeDuration: fadeDuration,\n      speed: speed\n    }, sizeProps), // allows animating the children\n    index === 0 ? children : undefined);\n  }));\n};\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\";\n}\n\nexport var SkeletonCircle = function SkeletonCircle(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"2rem\" : _ref$size,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"size\"]);\n\n  return /*#__PURE__*/React.createElement(Skeleton, _extends({\n    borderRadius: \"full\",\n    boxSize: size\n  }, rest));\n};\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\";\n}","map":{"version":3,"sources":["../../src/skeleton.tsx"],"names":["StyledSkeleton","chakra","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","keyframes","from","opacity","to","useIsFirstRender","isFirstRender","React","Skeleton","forwardRef","styles","useStyleConfig","className","omitThemingProps","wasPreviouslyLoaded","usePrevious","_className","cx","animation","fadeDuration","speed","Array","index","defaultNoOfLines","SkeletonText","props","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","useBreakpointValue","numbers","range","getWidth","isLoaded","sizeProps","mb","number","width","height","SkeletonCircle","size"],"mappings":"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","sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { usePrevious } from \"@chakra-ui/hooks\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst useIsFirstRender = () => {\n  const isFirstRender = React.useRef(true)\n\n  React.useEffect(() => {\n    isFirstRender.current = false\n  }, [])\n\n  return isFirstRender.current\n}\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"]},"metadata":{},"sourceType":"module"}