{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\n\nexport function useImage(props) {\n  var src = props.src,\n      srcSet = props.srcSet,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      crossOrigin = props.crossOrigin,\n      sizes = props.sizes,\n      ignoreFallback = props.ignoreFallback;\n\n  var _useState = useState(\"pending\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  useEffect(function () {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(function () {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet;\n    }\n\n    if (sizes) {\n      img.sizes = sizes;\n    }\n\n    img.onload = function (event) {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = function (error) {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError]);\n\n  var flush = function flush() {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(function () {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return function () {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}","map":{"version":3,"sources":["../../src/use-image.ts"],"names":["ignoreFallback","useState","useEffect","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","useSafeLayoutEffect","status"],"mappings":"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","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}