{"version":3,"sources":["../../src/use-image.ts"],"names":["useImage","props","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","undefined"],"mappings":";;;;;AAAA;;AACA;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAT,CAAkBC,KAAlB,EAAwC;AAAA,MAE3CC,GAF2C,GASzCD,KATyC,CAE3CC,GAF2C;AAAA,MAG3CC,MAH2C,GASzCF,KATyC,CAG3CE,MAH2C;AAAA,MAI3CC,MAJ2C,GASzCH,KATyC,CAI3CG,MAJ2C;AAAA,MAK3CC,OAL2C,GASzCJ,KATyC,CAK3CI,OAL2C;AAAA,MAM3CC,WAN2C,GASzCL,KATyC,CAM3CK,WAN2C;AAAA,MAO3CC,KAP2C,GASzCN,KATyC,CAO3CM,KAP2C;AAAA,MAQ3CC,cAR2C,GASzCP,KATyC,CAQ3CO,cAR2C;;AAAA,kBAWjB,qBAAiB,SAAjB,CAXiB;AAAA,MAWtCC,MAXsC;AAAA,MAW9BC,SAX8B;;AAa7C,wBAAU,YAAM;AACdA,IAAAA,SAAS,CAACR,GAAG,GAAG,SAAH,GAAe,SAAnB,CAAT;AACD,GAFD,EAEG,CAACA,GAAD,CAFH;AAIA,MAAMS,QAAQ,GAAG,oBAAjB;AAEA,MAAMC,IAAI,GAAG,wBAAY,YAAM;AAC7B,QAAI,CAACV,GAAL,EAAU;AAEVW,IAAAA,KAAK;AAEL,QAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AAEAD,IAAAA,GAAG,CAACZ,GAAJ,GAAUA,GAAV;;AAEA,QAAII,WAAJ,EAAiB;AACfQ,MAAAA,GAAG,CAACR,WAAJ,GAAkBA,WAAlB;AACD;;AAED,QAAIH,MAAJ,EAAY;AACVW,MAAAA,GAAG,CAACE,MAAJ,GAAab,MAAb;AACD;;AAED,QAAII,KAAJ,EAAW;AACTO,MAAAA,GAAG,CAACP,KAAJ,GAAYA,KAAZ;AACD;;AAEDO,IAAAA,GAAG,CAACG,MAAJ,GAAa,UAACC,KAAD,EAAW;AACtBL,MAAAA,KAAK;AACLH,MAAAA,SAAS,CAAC,QAAD,CAAT;AACAN,MAAAA,MAAM,QAAN,YAAAA,MAAM,CAAIc,KAAJ,CAAN;AACD,KAJD;;AAKAJ,IAAAA,GAAG,CAACK,OAAJ,GAAc,UAACC,KAAD,EAAW;AACvBP,MAAAA,KAAK;AACLH,MAAAA,SAAS,CAAC,QAAD,CAAT;AACAL,MAAAA,OAAO,QAAP,YAAAA,OAAO,CAAGe,KAAH,CAAP;AACD,KAJD;;AAMAT,IAAAA,QAAQ,CAACU,OAAT,GAAmBP,GAAnB;AACD,GAjCY,EAiCV,CAACZ,GAAD,EAAMI,WAAN,EAAmBH,MAAnB,EAA2BI,KAA3B,EAAkCH,MAAlC,EAA0CC,OAA1C,CAjCU,CAAb;;AAmCA,MAAMQ,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAIF,QAAQ,CAACU,OAAb,EAAsB;AACpBV,MAAAA,QAAQ,CAACU,OAAT,CAAiBJ,MAAjB,GAA0B,IAA1B;AACAN,MAAAA,QAAQ,CAACU,OAAT,CAAiBF,OAAjB,GAA2B,IAA3B;AACAR,MAAAA,QAAQ,CAACU,OAAT,GAAmB,IAAnB;AACD;AACF,GAND;;AAQA,kCAAoB,YAAM;AACxB;AACJ;AACA;AACA;AACI,QAAIb,cAAJ,EAAoB,OAAOc,SAAP;;AAEpB,QAAIb,MAAM,KAAK,SAAf,EAA0B;AACxBG,MAAAA,IAAI;AACL;;AACD,WAAO,YAAM;AACXC,MAAAA,KAAK;AACN,KAFD;AAGD,GAbD,EAaG,CAACJ,MAAD,EAASG,IAAT,EAAeJ,cAAf,CAbH;AAeA;AACF;AACA;AACA;;AACE,SAAOA,cAAc,GAAG,QAAH,GAAcC,MAAnC;AACD","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"file":"use-image.js"}