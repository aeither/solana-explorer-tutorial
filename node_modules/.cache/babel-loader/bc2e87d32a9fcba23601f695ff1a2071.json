{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__, filterUndefined } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\n\nexport var Text = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Text\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"align\", \"decoration\", \"casing\"]);\n\n  var aliasedProps = filterUndefined({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /*#__PURE__*/React.createElement(chakra.p, _extends({\n    ref: ref,\n    className: cx(\"chakra-text\", props.className)\n  }, aliasedProps, rest, {\n    __css: styles\n  }));\n});\n\nif (__DEV__) {\n  Text.displayName = \"Text\";\n}","map":{"version":3,"sources":["../../src/text.tsx"],"names":["Text","forwardRef","styles","useStyleConfig","rest","omitThemingProps","aliasedProps","filterUndefined","textAlign","props","textDecoration","textTransform","casing","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AASA,SAAA,EAAA,EAAA,OAAA,EAAA,eAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAoBA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,IAAI,GAAA,aAAGC,UAAU,CAAiB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAC7D,MAAMC,MAAM,GAAGC,cAAc,CAAA,MAAA,EAA7B,KAA6B,CAA7B;;AACA,MAAA,iBAAA,GAA0DE,gBAAgB,CAA1E,KAA0E,CAA1E;AAAA,MAAiDD,IAAjD,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,YAAA,EAAA,QAAA,CAAA,CAAA;;AAIA,MAAME,YAAY,GAAGC,eAAe,CAAC;AACnCC,IAAAA,SAAS,EAAEC,KAAK,CADmB,KAAA;AAEnCC,IAAAA,cAAc,EAAED,KAAK,CAFc,UAAA;AAGnCE,IAAAA,aAAa,EAAEF,KAAK,CAACG;AAHc,GAAD,CAApC;AAMA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,CAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,SAAS,EAAEC,EAAE,CAAA,aAAA,EAAgBJ,KAAK,CAArB,SAAA;AAFf,GAAA,EAAA,YAAA,EAAA,IAAA,EAAA;AAKE,IAAA,KAAK,EAAEP;AALT,GAAA,CAAA,CADF;AAZK,CAAuB,CAAvB;;AAuBP,IAAA,OAAA,EAAa;AACXF,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__, filterUndefined } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(\n    props,\n  )\n\n  const aliasedProps = filterUndefined({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Text.displayName = \"Text\"\n}\n"]},"metadata":{},"sourceType":"module"}