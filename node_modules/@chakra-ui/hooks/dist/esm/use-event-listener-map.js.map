{"version":3,"sources":["../../src/use-event-listener-map.ts"],"names":["getPointerEventName","wrapPointerEventHandler","React","useEventListenerMap","listeners","useRef","Map","currentListeners","current","add","useCallback","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","delete","useEffect","forEach","value","key"],"mappings":"AAAA,SAEEA,mBAFF,EAGEC,uBAHF,QAKO,kBALP;AAMA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,mBAAT,GAA+C;AACpD,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAlB;AACA,MAAMC,gBAAgB,GAAGH,SAAS,CAACI,OAAnC;AAEA,MAAMC,GAAG,GAAGP,KAAK,CAACQ,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAC7D,QAAMC,oBAAoB,GAAGd,uBAAuB,CAClDY,QADkD,EAElDD,IAAI,KAAK,aAFyC,CAApD;AAIAR,IAAAA,SAAS,CAACI,OAAV,CAAkBQ,GAAlB,CAAsBH,QAAtB,EAAgC;AAC9BI,MAAAA,UAAU,EAAEF,oBADkB;AAE9BH,MAAAA,IAAI,EAAEZ,mBAAmB,CAACY,IAAD,CAFK;AAG9BD,MAAAA,EAH8B;AAI9BG,MAAAA;AAJ8B,KAAhC;AAMAH,IAAAA,EAAE,CAACO,gBAAH,CAAoBN,IAApB,EAA0BG,oBAA1B,EAAgDD,OAAhD;AACD,GAZW,EAYT,EAZS,CAAZ;AAcA,MAAMK,MAAM,GAAGjB,KAAK,CAACQ,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAChE,QAAM;AAAEG,MAAAA,UAAU,EAAEF;AAAd,QAAuCX,SAAS,CAACI,OAAV,CAAkBY,GAAlB,CAAsBP,QAAtB,CAA7C;AACAF,IAAAA,EAAE,CAACU,mBAAH,CAAuBT,IAAvB,EAA6BG,oBAA7B,EAAmDD,OAAnD;AACAV,IAAAA,SAAS,CAACI,OAAV,CAAkBc,MAAlB,CAAyBP,oBAAzB;AACD,GAJc,EAIZ,EAJY,CAAf;AAMAb,EAAAA,KAAK,CAACqB,SAAN,CACE,MAAM,MAAM;AACVhB,IAAAA,gBAAgB,CAACiB,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvCP,MAAAA,MAAM,CAACM,KAAK,CAACd,EAAP,EAAWc,KAAK,CAACb,IAAjB,EAAuBc,GAAvB,EAA4BD,KAAK,CAACX,OAAlC,CAAN;AACD,KAFD;AAGD,GALH,EAME,CAACK,MAAD,EAASZ,gBAAT,CANF;AASA,SAAO;AAAEE,IAAAA,GAAF;AAAOU,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    const { __listener: pointerEventListener } = listeners.current.get(listener)\n    el.removeEventListener(type, pointerEventListener, options)\n    listeners.current.delete(pointerEventListener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"file":"use-event-listener-map.js"}