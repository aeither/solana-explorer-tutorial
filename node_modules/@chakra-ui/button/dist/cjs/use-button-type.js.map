{"version":3,"sources":["../../src/use-button-type.tsx"],"names":["useButtonType","value","React","useState","isButton","setIsButton","refCallback","useCallback","node","tagName","type","undefined","ref"],"mappings":";;;;;AAAA;;;;;;AAEO,SAASA,aAAT,CAAuBC,KAAvB,EAAkD;AAAA,wBACvBC,KAAK,CAACC,QAAN,CAAe,CAACF,KAAhB,CADuB;AAAA,MAChDG,QADgD;AAAA,MACtCC,WADsC;;AAEvD,MAAMC,WAAW,GAAGJ,KAAK,CAACK,WAAN,CAAkB,UAACC,IAAD,EAA8B;AAClE,QAAI,CAACA,IAAL,EAAW;AACXH,IAAAA,WAAW,CAACG,IAAI,CAACC,OAAL,KAAiB,QAAlB,CAAX;AACD,GAHmB,EAGjB,EAHiB,CAApB;AAIA,MAAMC,IAAI,GAAGN,QAAQ,GAAG,QAAH,GAAcO,SAAnC;AACA,SAAO;AAAEC,IAAAA,GAAG,EAAEN,WAAP;AAAoBI,IAAAA,IAAI,EAAJA;AAApB,GAAP;AACD","sourcesContent":["import * as React from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = React.useState(!value)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"file":"use-button-type.js"}