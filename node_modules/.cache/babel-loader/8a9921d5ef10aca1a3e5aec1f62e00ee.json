{"ast":null,"code":"import { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { usePointerEvent } from \"./use-pointer-event\";\nimport { useUnmountEffect } from \"./use-unmount-effect\";\nexport function usePanGesture(ref, props) {\n  var onPan = props.onPan,\n      onPanStart = props.onPanStart,\n      onPanEnd = props.onPanEnd,\n      onPanSessionStart = props.onPanSessionStart,\n      onPanSessionEnd = props.onPanSessionEnd;\n  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  var panSession = useRef(null);\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    var _panSession$current;\n\n    (_panSession$current = panSession.current) == null ? void 0 : _panSession$current.updateHandlers(handlers);\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers);\n  }\n\n  usePointerEvent(function () {\n    return ref.current;\n  }, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(function () {\n    var _panSession$current2;\n\n    (_panSession$current2 = panSession.current) == null ? void 0 : _panSession$current2.end();\n    panSession.current = null;\n  });\n}","map":{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["onPanSessionEnd","hasPanEvents","Boolean","onPan","panSession","useRef","handlers","onSessionStart","onSessionEnd","onStart","onMove","onEnd","onPanEnd","useEffect","usePointerEvent","ref","useUnmountEffect"],"mappings":"AAAA,SAAA,IAAA,EAAA,UAAA,QAAA,kBAAA;AAOA,SAAA,SAAA,EAAA,MAAA,QAAA,OAAA;AACA,SAAA,eAAA,QAAA,qBAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AAUA,OAAO,SAAA,aAAA,CAAA,GAAA,EAAA,KAAA,EAGL;AACA,MAAM,KAAN,GAAA,KAAA,CAAM,KAAN;AAAA,MAAM,UAAN,GAAA,KAAA,CAAM,UAAN;AAAA,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAM,iBAAN,GAAA,KAAA,CAAM,iBAAN;AAAA,MAKEA,eALF,GAAA,KAAA,CAKEA,eALF;AAQA,MAAMC,YAAY,GAAGC,OAAO,CAC1BC,KAAK,IAALA,UAAAA,IAAAA,QAAAA,IAAAA,iBAAAA,IADF,eAA4B,CAA5B;AAIA,MAAMC,UAAU,GAAGC,MAAM,CAAzB,IAAyB,CAAzB;AAEA,MAAMC,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAD8B,iBAAA;AAE5CC,IAAAA,YAAY,EAFgC,eAAA;AAG5CC,IAAAA,OAAO,EAHqC,UAAA;AAI5CC,IAAAA,MAAM,EAJsC,KAAA;AAK5CC,IAAAA,KAL4C,iBAKvC,KALuC,EAKvC,IALuC,EAKzB;AACjBP,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AACAQ,MAAAA,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAA,KAAA,EAARA,IAAQ,CAARA;AACD;AAR2C,GAA9C;AAWAC,EAAAA,SAAS,CAAC,YAAM;AAAA,QAAA,mBAAA;;AACd,KAAA,mBAAA,GAAA,UAAU,CAAV,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,cAAA,CAAA,QAAA,CAAA;AADFA,GAAS,CAATA;;AAIA,WAAA,aAAA,CAAA,KAAA,EAA+C;AAC7CT,IAAAA,UAAU,CAAVA,OAAAA,GAAqB,IAAA,UAAA,CAAA,KAAA,EAArBA,QAAqB,CAArBA;AACD;;AAEDU,EAAAA,eAAe,CACb;AAAA,WAAMC,GAAG,CADI,OACb;AAAA,GADa,EAAA,aAAA,EAGbd,YAAY,GAAA,aAAA,GAHda,IAAe,CAAfA;AAMAE,EAAAA,gBAAgB,CAAC,YAAM;AAAA,QAAA,oBAAA;;AACrB,KAAA,oBAAA,GAAA,UAAU,CAAV,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,oBAAA,CAAA,GAAA,EAAA;AACAZ,IAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AAFFY,GAAgB,CAAhBA;AAID","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"]},"metadata":{},"sourceType":"module"}