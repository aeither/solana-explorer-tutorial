{"version":3,"sources":["../../src/pin-input.tsx"],"names":["PinInput","props","styles","children","rest","descendants","context","clones","map","child","React","cloneElement","__css","__DEV__","displayName","PinInputField","ref","inputProps","className"],"mappings":";;;;;AAAA;;AAQA;;AACA;;AACA;;AACA;;;;;;;;;;AAiCO,IAAMA,QAAiC,GAAG,SAApCA,QAAoC,CAACC,KAAD,EAAW;AAC1D,MAAMC,MAAM,GAAG,4BAAe,UAAf,EAA2BD,KAA3B,CAAf;;AAD0D,0BAG5B,8BAAiBA,KAAjB,CAH4B;AAAA,MAGlDE,QAHkD,qBAGlDA,QAHkD;AAAA,MAGrCC,IAHqC;;AAAA,qBAItB,+BAAYA,IAAZ,CAJsB;AAAA,MAIlDC,WAJkD,gBAIlDA,WAJkD;AAAA,MAIlCC,OAJkC;;AAM1D,MAAMC,MAAM,GAAG,kCAAiBJ,QAAjB,EAA2BK,GAA3B,CAA+B,UAACC,KAAD;AAAA,wBAC5CC,KAAK,CAACC,YAAN,CAAmBF,KAAnB,EAA0B;AAAEG,MAAAA,KAAK,EAAEV;AAAT,KAA1B,CAD4C;AAAA,GAA/B,CAAf;AAIA,sBACE,oBAAC,yCAAD;AAA6B,IAAA,KAAK,EAAEG;AAApC,kBACE,oBAAC,8BAAD;AAAkB,IAAA,KAAK,EAAEC;AAAzB,KAAmCC,MAAnC,CADF,CADF;AAKD,CAfM;;;;AAiBP,IAAIM,cAAJ,EAAa;AACXb,EAAAA,QAAQ,CAACc,WAAT,GAAuB,UAAvB;AACD;;AAIM,IAAMC,aAAa,gBAAG,wBAC3B,UAACd,KAAD,EAAQe,GAAR,EAAgB;AACd,MAAMC,UAAU,GAAG,oCAAiBhB,KAAjB,EAAwBe,GAAxB,CAAnB;AACA,sBACE,oBAAC,cAAD,CAAQ,KAAR,eACMC,UADN;AAEE,IAAA,SAAS,EAAE,eAAG,kBAAH,EAAuBhB,KAAK,CAACiB,SAA7B;AAFb,KADF;AAMD,CAT0B,CAAtB;;;AAYP,IAAIL,cAAJ,EAAa;AACXE,EAAAA,aAAa,CAACD,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  PinInputDescendantsProvider,\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps<\"PinInput\">,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\nexport const PinInput: React.FC<PinInputProps> = (props) => {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const { descendants, ...context } = usePinInput(rest)\n\n  const clones = getValidChildren(children).map((child) =>\n    React.cloneElement(child, { __css: styles }),\n  )\n\n  return (\n    <PinInputDescendantsProvider value={descendants}>\n      <PinInputProvider value={context}>{clones}</PinInputProvider>\n    </PinInputDescendantsProvider>\n  )\n}\n\nif (__DEV__) {\n  PinInput.displayName = \"PinInput\"\n}\n\nexport interface PinInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  (props, ref) => {\n    const inputProps = usePinInputField(props, ref)\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PinInputField.displayName = \"PinInputField\"\n}\n"],"file":"pin-input.js"}