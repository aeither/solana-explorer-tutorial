{"version":3,"sources":["../../src/input-group.tsx"],"names":["InputGroup","props","ref","styles","children","className","rest","_className","groupStyles","validChildren","input","field","forEach","child","type","id","paddingStart","height","h","paddingEnd","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","React","cloneElement","Object","assign","width","display","position","__DEV__","displayName"],"mappings":";;;;;AAAA;;AASA;;AACA;;AACA;;;;;;;;;;AAMO,IAAMA,UAAU,gBAAG,wBAAmC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3E,MAAMC,MAAM,GAAG,iCAAoB,OAApB,EAA6BF,KAA7B,CAAf;;AAD2E,0BAElC,8BAAiBA,KAAjB,CAFkC;AAAA,MAEnEG,QAFmE,qBAEnEA,QAFmE;AAAA,MAEzDC,SAFyD,qBAEzDA,SAFyD;AAAA,MAE3CC,IAF2C;;AAI3E,MAAMC,UAAU,GAAG,eAAG,qBAAH,EAA0BF,SAA1B,CAAnB;;AACA,MAAMG,WAA4B,GAAG,EAArC;AAEA,MAAMC,aAAa,GAAG,kCAAiBL,QAAjB,CAAtB;AAEA,MAAMM,KAAU,GAAGP,MAAM,CAACQ,KAA1B;AAEAF,EAAAA,aAAa,CAACG,OAAd,CAAsB,UAACC,KAAD,EAAgB;AACpC,QAAI,CAACV,MAAL,EAAa;;AAEb,QAAIO,KAAK,IAAIG,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,kBAA/B,EAAmD;AAAA;;AACjDP,MAAAA,WAAW,CAACQ,YAAZ,oBAA2BN,KAAK,CAACO,MAAjC,4BAA2CP,KAAK,CAACQ,CAAjD;AACD;;AAED,QAAIR,KAAK,IAAIG,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,mBAA/B,EAAoD;AAAA;;AAClDP,MAAAA,WAAW,CAACW,UAAZ,qBAAyBT,KAAK,CAACO,MAA/B,6BAAyCP,KAAK,CAACQ,CAA/C;AACD;;AAED,QAAIL,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,iBAAtB,EAAyC;AACvCP,MAAAA,WAAW,CAACY,eAAZ,GAA8B,CAA9B;AACD;;AAED,QAAIP,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,gBAAtB,EAAwC;AACtCP,MAAAA,WAAW,CAACa,iBAAZ,GAAgC,CAAhC;AACD;AACF,GAlBD;AAoBA,MAAMC,MAAM,GAAGb,aAAa,CAACc,GAAd,CAAkB,UAACV,KAAD,EAAgB;AAAA;;AAC/C;AACJ;AACA;AACI,QAAMW,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAE,iBAAAZ,KAAK,CAACZ,KAAN,kCAAawB,IAAb,KAAqBxB,KAAK,CAACwB,IADnB;AAEdC,MAAAA,OAAO,EAAE,kBAAAb,KAAK,CAACZ,KAAN,mCAAayB,OAAb,KAAwBzB,KAAK,CAACyB;AAFzB,KAAhB;AAKA,WAAOb,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,OAAlB,gBACHY,KAAK,CAACC,YAAN,CAAmBf,KAAnB,EAA0BW,OAA1B,CADG,gBAEHG,KAAK,CAACC,YAAN,CACEf,KADF,EAEEgB,MAAM,CAACC,MAAP,CAAcN,OAAd,EAAuBhB,WAAvB,EAAoCK,KAAK,CAACZ,KAA1C,CAFF,CAFJ;AAMD,GAfc,CAAf;AAiBA,sBACE,oBAAC,cAAD,CAAQ,GAAR;AACE,IAAA,SAAS,EAAEM,UADb;AAEE,IAAA,GAAG,EAAEL,GAFP;AAGE,IAAA,KAAK,EAAE;AACL6B,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,OAAO,EAAE,MAFJ;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAHT,KAQM3B,IARN,gBAUE,oBAAC,sBAAD;AAAgB,IAAA,KAAK,EAAEH;AAAvB,KAAgCmB,MAAhC,CAVF,CADF;AAcD,CA9DyB,CAAnB;;;AAgEP,IAAIY,cAAJ,EAAa;AACXlC,EAAAA,UAAU,CAACmC,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(\n          child,\n          Object.assign(theming, groupStyles, child.props),\n        )\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"],"file":"input-group.js"}