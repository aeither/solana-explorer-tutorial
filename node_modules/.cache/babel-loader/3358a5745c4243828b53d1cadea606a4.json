{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\n\nvar _createContext = createContext(),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    DrawerContextProvider = _createContext2[0],\n    useDrawerContext = _createContext2[1];\n\nexport function Drawer(props) {\n  var _theme$components;\n\n  var isOpen = props.isOpen,\n      onClose = props.onClose,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"right\" : _props$placement,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement: placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyleSlide = chakra(Slide);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var DrawerContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var _useModalContext = useModalContext(),\n      getDialogProps = _useModalContext.getDialogProps,\n      getDialogContainerProps = _useModalContext.getDialogContainerProps,\n      isOpen = _useModalContext.isOpen;\n\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var _useDrawerContext = useDrawerContext(),\n      placement = _useDrawerContext.placement;\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyleSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":{"version":3,"sources":["../../src/drawer.tsx"],"names":["createContext","placement","children","theme","useTheme","drawerStyleConfig","StyleSlide","chakra","DrawerContent","forwardRef","isOpen","useModalContext","dialogProps","getDialogProps","containerProps","getDialogContainerProps","_className","cx","styles","useStyles","dialogStyles","display","flexDirection","position","width","outline","dialogContainerStyles","height","left","top","useDrawerContext","ModalBody","ModalCloseButton","ModalFooter","ModalHeader","ModalOverlay"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps extends Omit<ModalProps, \"scrollBehavior\"> {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideOptions[\"direction\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyleSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyleSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyleSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"]},"metadata":{},"sourceType":"module"}