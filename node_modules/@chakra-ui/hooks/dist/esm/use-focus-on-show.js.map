{"version":3,"sources":["../../src/use-focus-on-show.ts"],"names":["contains","focus","getAllFocusable","isRefObject","useCallback","useEventListener","useUpdateEffect","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocus","onFocus","document","activeElement","nextTick","tabbableEls","length"],"mappings":"AAAA,SACEA,QADF,EAEEC,KAFF,EAIEC,eAJF,EAKEC,WALF,QAMO,kBANP;AAOA,SAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AASA,IAAMC,cAAqC,GAAG;AAC5CC,EAAAA,aAAa,EAAE,IAD6B;AAE5CC,EAAAA,WAAW,EAAE;AAF+B,CAA9C;AAKA,OAAO,SAASC,cAAT,CACLC,MADK,EAELC,OAFK,EAGL;AAAA,MADAA,OACA;AADAA,IAAAA,OACA,GADUL,cACV;AAAA;;AACA,MAAM;AAAEM,IAAAA,QAAF;AAAYL,IAAAA,aAAZ;AAA2BC,IAAAA,WAA3B;AAAwCK,IAAAA;AAAxC,MAAoDF,OAA1D;AACA,MAAMG,OAAO,GAAGZ,WAAW,CAACQ,MAAD,CAAX,GAAsBA,MAAM,CAACK,OAA7B,GAAuCL,MAAvD;AAEA,MAAMM,SAAS,GAAGR,WAAW,IAAIK,OAAjC;AAEA,MAAMI,OAAO,GAAGd,WAAW,CAAC,MAAM;AAChC,QAAI,CAACW,OAAD,IAAY,CAACE,SAAjB,EAA4B;AAE5B,QAAIjB,QAAQ,CAACe,OAAD,EAAUI,QAAQ,CAACC,aAAnB,CAAZ,EAA8D;;AAE9D,QAAIP,QAAJ,YAAIA,QAAQ,CAAEG,OAAd,EAAuB;AACrBf,MAAAA,KAAK,CAACY,QAAQ,CAACG,OAAV,EAAmB;AAAER,QAAAA,aAAF;AAAiBa,QAAAA,QAAQ,EAAE;AAA3B,OAAnB,CAAL;AACD,KAFD,MAEO;AACL,UAAMC,WAAW,GAAGpB,eAAe,CAACa,OAAD,CAAnC;;AACA,UAAIO,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BtB,QAAAA,KAAK,CAACqB,WAAW,CAAC,CAAD,CAAZ,EAAiB;AAAEd,UAAAA,aAAF;AAAiBa,UAAAA,QAAQ,EAAE;AAA3B,SAAjB,CAAL;AACD;AACF;AACF,GAb0B,EAaxB,CAACJ,SAAD,EAAYT,aAAZ,EAA2BO,OAA3B,EAAoCF,QAApC,CAbwB,CAA3B;AAeAP,EAAAA,eAAe,CAAC,MAAM;AACpBY,IAAAA,OAAO;AACR,GAFc,EAEZ,CAACA,OAAD,CAFY,CAAf;AAIAb,EAAAA,gBAAgB,CAAC,eAAD,EAAkBa,OAAlB,EAA2BH,OAA3B,CAAhB;AACD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport React, { useCallback } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = useCallback(() => {\n    if (!element || !autoFocus) return\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll, nextTick: true })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll, nextTick: true })\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"],"file":"use-focus-on-show.js"}