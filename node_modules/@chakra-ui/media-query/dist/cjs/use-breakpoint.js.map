{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["useBreakpoint","defaultBreakpoint","breakpoints","env","mediaQueries","React","useMemo","base","useState","undefined","mediaQuery","find","breakpoint","query","currentBreakpoint","setCurrentBreakpoint","current","update","useCallback","matches","useEffect","listeners","Set","forEach","window","matchMedia","handleChange","addListener","add","removeListener","clear"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,iBAAvB,EAAmD;AAAA,kBAChC,uBADgC;AAAA,MAChDC,WADgD,aAChDA,WADgD;;AAExD,MAAMC,GAAG,GAAG,+BAAZ;;AAEA,MAAMC,YAAY,GAAGC,kBAAMC,OAAN,CACnB;AAAA,WAAM;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,OAAqCL,WAArC,EAAN;AAAA,GADmB,EAEnB,CAACA,WAAD,CAFmB,CAArB;;AAJwD,wBASNG,kBAAMG,QAAN,CAAe,YAAM;AACrE,QAAI,CAACP,iBAAL,EAAwB;AACtB,aAAOQ,SAAP;AACD;;AAED,QAAMC,UAAU,GAAGN,YAAY,CAACO,IAAb,CACjB;AAAA,UAAGC,UAAH,QAAGA,UAAH;AAAA,aAAoBA,UAAU,KAAKX,iBAAnC;AAAA,KADiB,CAAnB;;AAIA,QAAIS,UAAJ,EAAgB;AAAA,UACNG,KADM,GACmBH,UADnB,CACNG,KADM;AAAA,UACID,UADJ,iCACmBF,UADnB;;AAEd,aAAOE,UAAP;AACD;;AAED,WAAOH,SAAP;AACD,GAfiD,CATM;AAAA,MASjDK,iBATiD;AAAA,MAS9BC,oBAT8B;;AA0BxD,MAAMC,OAAO,GAAGF,iBAAH,oBAAGA,iBAAiB,CAAEF,UAAnC;;AAEA,MAAMK,MAAM,GAAGZ,kBAAMa,WAAN,CACb,UAACL,KAAD,EAAwBD,UAAxB,EAAmD;AACjD,QAAIC,KAAK,CAACM,OAAN,IAAiBH,OAAO,KAAKJ,UAAU,CAACA,UAA5C,EAAwD;AACtDG,MAAAA,oBAAoB,CAACH,UAAD,CAApB;AACD;AACF,GALY,EAMb,CAACI,OAAD,CANa,CAAf;;AASAX,oBAAMe,SAAN,CAAgB,YAAM;AACpB,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEAlB,IAAAA,YAAY,CAACmB,OAAb,CAAqB,iBAA8B;AAAA,UAA3BV,KAA2B,SAA3BA,KAA2B;AAAA,UAAjBD,UAAiB;;AACjD,UAAMF,UAAU,GAAGP,GAAG,CAACqB,MAAJ,CAAWC,UAAX,CAAsBZ,KAAtB,CAAnB,CADiD,CAGjD;;AACAI,MAAAA,MAAM,CAACP,UAAD,EAAaE,UAAb,CAAN;;AAEA,UAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBT,QAAAA,MAAM,CAACP,UAAD,EAAaE,UAAb,CAAN;AACD,OAFD,CANiD,CAUjD;;;AACAF,MAAAA,UAAU,CAACiB,WAAX,CAAuBD,YAAvB,EAXiD,CAajD;AACA;;AACAL,MAAAA,SAAS,CAACO,GAAV,CAAc;AAAElB,QAAAA,UAAU,EAAVA,UAAF;AAAcgB,QAAAA,YAAY,EAAZA;AAAd,OAAd;AAEA,aAAO,YAAM;AACX;AACAhB,QAAAA,UAAU,CAACmB,cAAX,CAA0BH,YAA1B;AACD,OAHD;AAID,KArBD;AAuBA,WAAO,YAAM;AACX;AACAL,MAAAA,SAAS,CAACE,OAAV,CAAkB,iBAAkC;AAAA,YAA/Bb,UAA+B,SAA/BA,UAA+B;AAAA,YAAnBgB,YAAmB,SAAnBA,YAAmB;AAClDhB,QAAAA,UAAU,CAACmB,cAAX,CAA0BH,YAA1B;AACD,OAFD;AAGAL,MAAAA,SAAS,CAACS,KAAV;AACD,KAND;AAOD,GAjCD,EAiCG,CAAC1B,YAAD,EAAeF,WAAf,EAA4Be,MAA5B,EAAoCd,GAAG,CAACqB,MAAxC,CAjCH;;AAmCA,SAAOR,OAAP;AACD","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n  const env = useEnvironment()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = env.window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update, env.window])\n\n  return current\n}\n"],"file":"use-breakpoint.js"}