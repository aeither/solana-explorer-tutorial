{"ast":null,"code":"import { __assign } from 'tslib';\nimport sync, { getFrameData } from 'framesync';\nimport { mix, progress, linear, mixColor, circOut } from 'popmotion';\nimport { animate } from '../../../animation/animate.js';\nimport { getValueTransition } from '../../../animation/utils/transitions.js';\nimport { motionValue } from '../../../value/index.js';\n\nfunction createCrossfader() {\n  /**\n   * The current state of the crossfade as a value between 0 and 1\n   */\n  var progress = motionValue(1);\n  var options = {\n    lead: undefined,\n    follow: undefined,\n    crossfadeOpacity: false,\n    preserveFollowOpacity: false\n  };\n\n  var prevOptions = __assign({}, options);\n\n  var leadState = {};\n  var followState = {};\n  /**\n   *\n   */\n\n  var _isActive = false;\n  /**\n   *\n   */\n\n  var finalCrossfadeFrame = null;\n  /**\n   * Framestamp of the last frame we updated values at.\n   */\n\n  var prevUpdate = 0;\n\n  function startCrossfadeAnimation(target, transition) {\n    var lead = options.lead,\n        follow = options.follow;\n    _isActive = true;\n    finalCrossfadeFrame = null;\n    var hasUpdated = false;\n\n    var onUpdate = function onUpdate() {\n      hasUpdated = true;\n      lead && lead.scheduleRender();\n      follow && follow.scheduleRender();\n    };\n\n    var _onComplete = function onComplete() {\n      _isActive = false;\n      /**\n       * If the crossfade animation is no longer active, flag a frame\n       * that we're still allowed to crossfade\n       */\n\n      finalCrossfadeFrame = getFrameData().timestamp;\n    };\n\n    transition = transition && getValueTransition(transition, \"crossfade\");\n    return animate(progress, target, __assign(__assign({}, transition), {\n      onUpdate: onUpdate,\n      onComplete: function onComplete() {\n        if (!hasUpdated) {\n          progress.set(target);\n          /**\n           * If we never ran an update, for instance if this was an instant transition, fire a\n           * simulated final frame to ensure the crossfade gets applied correctly.\n           */\n\n          sync.read(_onComplete);\n        } else {\n          _onComplete();\n        }\n\n        onUpdate();\n      }\n    }));\n  }\n\n  function updateCrossfade() {\n    var _a, _b;\n    /**\n     * We only want to compute the crossfade once per frame, so we\n     * compare the previous update framestamp with the current frame\n     * and early return if they're the same.\n     */\n\n\n    var timestamp = getFrameData().timestamp;\n    var lead = options.lead,\n        follow = options.follow;\n    if (timestamp === prevUpdate || !lead) return;\n    prevUpdate = timestamp;\n    /**\n     * Merge each component's latest values into our crossfaded state\n     * before crossfading.\n     */\n\n    var latestLeadValues = lead.getLatestValues();\n    Object.assign(leadState, latestLeadValues);\n    var latestFollowValues = follow ? follow.getLatestValues() : options.prevValues;\n    Object.assign(followState, latestFollowValues);\n    var p = progress.get();\n    /**\n     * Crossfade the opacity between the two components. This will result\n     * in a different opacity for each component.\n     */\n\n    var leadTargetOpacity = (_a = latestLeadValues.opacity) !== null && _a !== void 0 ? _a : 1;\n    var followTargetOpacity = (_b = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b !== void 0 ? _b : 1;\n\n    if (options.crossfadeOpacity && follow) {\n      leadState.opacity = mix(\n      /**\n       * If the follow child has been completely hidden we animate\n       * this opacity from its previous opacity, but otherwise from completely transparent.\n       */\n      follow.isVisible !== false ? 0 : followTargetOpacity, leadTargetOpacity, easeCrossfadeIn(p));\n      followState.opacity = options.preserveFollowOpacity ? followTargetOpacity : mix(followTargetOpacity, 0, easeCrossfadeOut(p));\n    } else if (!follow) {\n      leadState.opacity = mix(followTargetOpacity, leadTargetOpacity, p);\n    }\n\n    mixValues(leadState, followState, latestLeadValues, latestFollowValues || {}, Boolean(follow), p);\n  }\n\n  return {\n    isActive: function isActive() {\n      return leadState && (_isActive || getFrameData().timestamp === finalCrossfadeFrame);\n    },\n    fromLead: function fromLead(transition) {\n      return startCrossfadeAnimation(0, transition);\n    },\n    toLead: function toLead(transition) {\n      var initialProgress = 0;\n\n      if (!options.prevValues && !options.follow) {\n        /**\n         * If we're not coming from anywhere, start at the end of the animation.\n         */\n        initialProgress = 1;\n      } else if (prevOptions.lead === options.follow && prevOptions.follow === options.lead) {\n        /**\n         * If we're swapping follow/lead we can reverse the progress\n         */\n        initialProgress = 1 - progress.get();\n      }\n\n      progress.set(initialProgress);\n      return startCrossfadeAnimation(1, transition);\n    },\n    reset: function reset() {\n      return progress.set(1);\n    },\n    stop: function stop() {\n      return progress.stop();\n    },\n    getCrossfadeState: function getCrossfadeState(element) {\n      updateCrossfade();\n\n      if (element === options.lead) {\n        return leadState;\n      } else if (element === options.follow) {\n        return followState;\n      }\n    },\n    setOptions: function setOptions(newOptions) {\n      prevOptions = options;\n      options = newOptions;\n      leadState = {};\n      followState = {};\n    },\n    getLatestValues: function getLatestValues() {\n      return leadState;\n    }\n  };\n}\n\nvar easeCrossfadeIn = compress(0, 0.5, circOut);\nvar easeCrossfadeOut = compress(0.5, 0.95, linear);\n\nfunction compress(min, max, easing) {\n  return function (p) {\n    // Could replace ifs with clamp\n    if (p < min) return 0;\n    if (p > max) return 1;\n    return easing(progress(min, max, p));\n  };\n}\n\nvar borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nvar numBorders = borders.length;\n\nfunction mixValues(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {\n  /**\n   * Mix border radius\n   */\n  for (var i = 0; i < numBorders; i++) {\n    var borderLabel = \"border\" + borders[i] + \"Radius\";\n    var followRadius = getRadius(latestFollowValues, borderLabel);\n    var leadRadius = getRadius(latestLeadValues, borderLabel);\n    if (followRadius === undefined && leadRadius === undefined) continue;\n    followRadius || (followRadius = 0);\n    leadRadius || (leadRadius = 0);\n    /**\n     * Currently we're only crossfading between numerical border radius.\n     * It would be possible to crossfade between percentages for a little\n     * extra bundle size.\n     */\n\n    if (typeof followRadius === \"number\" && typeof leadRadius === \"number\") {\n      var radius = Math.max(mix(followRadius, leadRadius, p), 0);\n      leadState[borderLabel] = followState[borderLabel] = radius;\n    }\n  }\n  /**\n   * Mix rotation\n   */\n\n\n  if (latestFollowValues.rotate || latestLeadValues.rotate) {\n    var rotate = mix(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);\n    leadState.rotate = followState.rotate = rotate;\n  }\n  /**\n   * We only want to mix the background color if there's a follow element\n   * that we're not crossfading opacity between. For instance with switch\n   * AnimateSharedLayout animations, this helps the illusion of a continuous\n   * element being animated but also cuts down on the number of paints triggered\n   * for elements where opacity is doing that work for us.\n   */\n\n\n  if (!hasFollowElement && latestLeadValues.backgroundColor && latestFollowValues.backgroundColor) {\n    /**\n     * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n     * We could probably create a mixer that runs at the start of the animation but\n     * the idea behind the crossfader is that it runs dynamically between two potentially\n     * changing targets (ie opacity or borderRadius may be animating independently via variants)\n     */\n    leadState.backgroundColor = followState.backgroundColor = mixColor(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);\n  }\n}\n\nfunction getRadius(values, radiusName) {\n  var _a;\n\n  return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;\n}\n\nexport { createCrossfader };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/crossfader.js"],"names":["__assign","sync","getFrameData","mix","progress","linear","mixColor","circOut","animate","getValueTransition","motionValue","createCrossfader","options","lead","undefined","follow","crossfadeOpacity","preserveFollowOpacity","prevOptions","leadState","followState","isActive","finalCrossfadeFrame","prevUpdate","startCrossfadeAnimation","target","transition","hasUpdated","onUpdate","scheduleRender","onComplete","timestamp","set","read","updateCrossfade","_a","_b","latestLeadValues","getLatestValues","Object","assign","latestFollowValues","prevValues","p","get","leadTargetOpacity","opacity","followTargetOpacity","isVisible","easeCrossfadeIn","easeCrossfadeOut","mixValues","Boolean","fromLead","toLead","initialProgress","reset","stop","getCrossfadeState","element","setOptions","newOptions","compress","min","max","easing","borders","numBorders","length","hasFollowElement","i","borderLabel","followRadius","getRadius","leadRadius","radius","Math","rotate","backgroundColor","values","radiusName","borderRadius"],"mappings":"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","sourcesContent":["import { __assign } from 'tslib';\nimport sync, { getFrameData } from 'framesync';\nimport { mix, progress, linear, mixColor, circOut } from 'popmotion';\nimport { animate } from '../../../animation/animate.js';\nimport { getValueTransition } from '../../../animation/utils/transitions.js';\nimport { motionValue } from '../../../value/index.js';\n\nfunction createCrossfader() {\n    /**\n     * The current state of the crossfade as a value between 0 and 1\n     */\n    var progress = motionValue(1);\n    var options = {\n        lead: undefined,\n        follow: undefined,\n        crossfadeOpacity: false,\n        preserveFollowOpacity: false,\n    };\n    var prevOptions = __assign({}, options);\n    var leadState = {};\n    var followState = {};\n    /**\n     *\n     */\n    var isActive = false;\n    /**\n     *\n     */\n    var finalCrossfadeFrame = null;\n    /**\n     * Framestamp of the last frame we updated values at.\n     */\n    var prevUpdate = 0;\n    function startCrossfadeAnimation(target, transition) {\n        var lead = options.lead, follow = options.follow;\n        isActive = true;\n        finalCrossfadeFrame = null;\n        var hasUpdated = false;\n        var onUpdate = function () {\n            hasUpdated = true;\n            lead && lead.scheduleRender();\n            follow && follow.scheduleRender();\n        };\n        var onComplete = function () {\n            isActive = false;\n            /**\n             * If the crossfade animation is no longer active, flag a frame\n             * that we're still allowed to crossfade\n             */\n            finalCrossfadeFrame = getFrameData().timestamp;\n        };\n        transition = transition && getValueTransition(transition, \"crossfade\");\n        return animate(progress, target, __assign(__assign({}, transition), { onUpdate: onUpdate, onComplete: function () {\n                if (!hasUpdated) {\n                    progress.set(target);\n                    /**\n                     * If we never ran an update, for instance if this was an instant transition, fire a\n                     * simulated final frame to ensure the crossfade gets applied correctly.\n                     */\n                    sync.read(onComplete);\n                }\n                else {\n                    onComplete();\n                }\n                onUpdate();\n            } }));\n    }\n    function updateCrossfade() {\n        var _a, _b;\n        /**\n         * We only want to compute the crossfade once per frame, so we\n         * compare the previous update framestamp with the current frame\n         * and early return if they're the same.\n         */\n        var timestamp = getFrameData().timestamp;\n        var lead = options.lead, follow = options.follow;\n        if (timestamp === prevUpdate || !lead)\n            return;\n        prevUpdate = timestamp;\n        /**\n         * Merge each component's latest values into our crossfaded state\n         * before crossfading.\n         */\n        var latestLeadValues = lead.getLatestValues();\n        Object.assign(leadState, latestLeadValues);\n        var latestFollowValues = follow\n            ? follow.getLatestValues()\n            : options.prevValues;\n        Object.assign(followState, latestFollowValues);\n        var p = progress.get();\n        /**\n         * Crossfade the opacity between the two components. This will result\n         * in a different opacity for each component.\n         */\n        var leadTargetOpacity = (_a = latestLeadValues.opacity) !== null && _a !== void 0 ? _a : 1;\n        var followTargetOpacity = (_b = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b !== void 0 ? _b : 1;\n        if (options.crossfadeOpacity && follow) {\n            leadState.opacity = mix(\n            /**\n             * If the follow child has been completely hidden we animate\n             * this opacity from its previous opacity, but otherwise from completely transparent.\n             */\n            follow.isVisible !== false ? 0 : followTargetOpacity, leadTargetOpacity, easeCrossfadeIn(p));\n            followState.opacity = options.preserveFollowOpacity\n                ? followTargetOpacity\n                : mix(followTargetOpacity, 0, easeCrossfadeOut(p));\n        }\n        else if (!follow) {\n            leadState.opacity = mix(followTargetOpacity, leadTargetOpacity, p);\n        }\n        mixValues(leadState, followState, latestLeadValues, latestFollowValues || {}, Boolean(follow), p);\n    }\n    return {\n        isActive: function () {\n            return leadState &&\n                (isActive || getFrameData().timestamp === finalCrossfadeFrame);\n        },\n        fromLead: function (transition) {\n            return startCrossfadeAnimation(0, transition);\n        },\n        toLead: function (transition) {\n            var initialProgress = 0;\n            if (!options.prevValues && !options.follow) {\n                /**\n                 * If we're not coming from anywhere, start at the end of the animation.\n                 */\n                initialProgress = 1;\n            }\n            else if (prevOptions.lead === options.follow &&\n                prevOptions.follow === options.lead) {\n                /**\n                 * If we're swapping follow/lead we can reverse the progress\n                 */\n                initialProgress = 1 - progress.get();\n            }\n            progress.set(initialProgress);\n            return startCrossfadeAnimation(1, transition);\n        },\n        reset: function () { return progress.set(1); },\n        stop: function () { return progress.stop(); },\n        getCrossfadeState: function (element) {\n            updateCrossfade();\n            if (element === options.lead) {\n                return leadState;\n            }\n            else if (element === options.follow) {\n                return followState;\n            }\n        },\n        setOptions: function (newOptions) {\n            prevOptions = options;\n            options = newOptions;\n            leadState = {};\n            followState = {};\n        },\n        getLatestValues: function () {\n            return leadState;\n        },\n    };\n}\nvar easeCrossfadeIn = compress(0, 0.5, circOut);\nvar easeCrossfadeOut = compress(0.5, 0.95, linear);\nfunction compress(min, max, easing) {\n    return function (p) {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\nvar borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nvar numBorders = borders.length;\nfunction mixValues(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {\n    /**\n     * Mix border radius\n     */\n    for (var i = 0; i < numBorders; i++) {\n        var borderLabel = \"border\" + borders[i] + \"Radius\";\n        var followRadius = getRadius(latestFollowValues, borderLabel);\n        var leadRadius = getRadius(latestLeadValues, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        /**\n         * Currently we're only crossfading between numerical border radius.\n         * It would be possible to crossfade between percentages for a little\n         * extra bundle size.\n         */\n        if (typeof followRadius === \"number\" &&\n            typeof leadRadius === \"number\") {\n            var radius = Math.max(mix(followRadius, leadRadius, p), 0);\n            leadState[borderLabel] = followState[borderLabel] = radius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (latestFollowValues.rotate || latestLeadValues.rotate) {\n        var rotate = mix(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);\n        leadState.rotate = followState.rotate = rotate;\n    }\n    /**\n     * We only want to mix the background color if there's a follow element\n     * that we're not crossfading opacity between. For instance with switch\n     * AnimateSharedLayout animations, this helps the illusion of a continuous\n     * element being animated but also cuts down on the number of paints triggered\n     * for elements where opacity is doing that work for us.\n     */\n    if (!hasFollowElement &&\n        latestLeadValues.backgroundColor &&\n        latestFollowValues.backgroundColor) {\n        /**\n         * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n         * We could probably create a mixer that runs at the start of the animation but\n         * the idea behind the crossfader is that it runs dynamically between two potentially\n         * changing targets (ie opacity or borderRadius may be animating independently via variants)\n         */\n        leadState.backgroundColor = followState.backgroundColor = mixColor(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);\n    }\n}\nfunction getRadius(values, radiusName) {\n    var _a;\n    return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;\n}\n\nexport { createCrossfader };\n"]},"metadata":{},"sourceType":"module"}