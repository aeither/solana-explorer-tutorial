"use strict";

exports.__esModule = true;
exports.getPartsStyle = getPartsStyle;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function orient(options) {
  var orientation = options.orientation,
      vertical = options.vertical,
      horizontal = options.horizontal;
  return orientation === "vertical" ? vertical : horizontal;
}

function getPartsStyle(options) {
  var orientation = options.orientation,
      trackPercent = options.trackPercent,
      thumbRect = options.thumbRect,
      isReversed = options.isReversed;

  var thumbStyle = _extends({
    position: "absolute",
    userSelect: "none",
    WebkitUserSelect: "none",
    MozUserSelect: "none",
    msUserSelect: "none",
    touchAction: "none"
  }, orient({
    orientation: orientation,
    vertical: {
      bottom: "calc(" + trackPercent + "% - " + thumbRect.height / 2 + "px)"
    },
    horizontal: {
      left: "calc(" + trackPercent + "% - " + thumbRect.width / 2 + "px)"
    }
  }));

  var rootStyle = _extends({
    position: "relative",
    touchAction: "none",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    userSelect: "none",
    outline: 0
  }, orient({
    orientation: orientation,
    vertical: {
      paddingLeft: thumbRect.width / 2,
      paddingRight: thumbRect.width / 2
    },
    horizontal: {
      paddingTop: thumbRect.height / 2,
      paddingBottom: thumbRect.height / 2
    }
  }));

  var trackStyle = _extends({
    position: "absolute"
  }, orient({
    orientation: orientation,
    vertical: {
      left: "50%",
      transform: "translateX(-50%)",
      height: "100%"
    },
    horizontal: {
      top: "50%",
      transform: "translateY(-50%)",
      width: "100%"
    }
  }));

  var innerTrackStyle = _extends({}, trackStyle, orient({
    orientation: orientation,
    vertical: isReversed ? {
      height: 100 - trackPercent + "%",
      top: 0
    } : {
      height: trackPercent + "%",
      bottom: 0
    },
    horizontal: isReversed ? {
      width: 100 - trackPercent + "%",
      right: 0
    } : {
      width: trackPercent + "%",
      left: 0
    }
  }));

  return {
    trackStyle: trackStyle,
    innerTrackStyle: innerTrackStyle,
    rootStyle: rootStyle,
    thumbStyle: thumbStyle
  };
}
//# sourceMappingURL=slider-utils.js.map