{"ast":null,"code":"import { useConstant } from '../../utils/use-constant.js';\nimport { createScrollUpdater, createScrollMotionValues } from './utils.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\nimport { invariant } from 'hey-listen';\n\nvar getElementScrollOffsets = function getElementScrollOffsets(element) {\n  return function () {\n    return {\n      xOffset: element.scrollLeft,\n      yOffset: element.scrollTop,\n      xMaxOffset: element.scrollWidth - element.offsetWidth,\n      yMaxOffset: element.scrollHeight - element.offsetHeight\n    };\n  };\n};\n/**\n * Returns MotionValues that update when the provided element scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels.\n * - `scrollY` — Vertical scroll distance in pixels.\n * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.\n * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * This element must be set to `overflow: scroll` on either or both axes to report scroll offset.\n *\n * @library\n *\n * ```jsx\n * import * as React from \"react\"\n * import {\n *   Frame,\n *   useElementScroll,\n *   useTransform\n * } from \"framer\"\n *\n * export function MyComponent() {\n *   const ref = React.useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <Frame ref={ref}>\n *       <Frame scaleX={scrollYProgress} />\n *     </Frame>\n *   )\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const ref = useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <div ref={ref}>\n *       <motion.div style={{ scaleX: scrollYProgress }} />\n *     </div>\n *   )\n * }\n * ```\n *\n * @public\n */\n\n\nfunction useElementScroll(ref) {\n  var values = useConstant(createScrollMotionValues);\n  useIsomorphicLayoutEffect(function () {\n    var element = ref.current;\n    invariant(!!element, \"ref provided to useScroll must be passed into a HTML element.\");\n    if (!element) return;\n    var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));\n    var scrollListener = addDomEvent(element, \"scroll\", updateScrollValues, {\n      passive: true\n    });\n    var resizeListener = addDomEvent(element, \"resize\", updateScrollValues);\n    return function () {\n      scrollListener && scrollListener();\n      resizeListener && resizeListener();\n    };\n  }, []);\n  return values;\n}\n\nexport { useElementScroll };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/value/scroll/use-element-scroll.js"],"names":["useConstant","createScrollUpdater","createScrollMotionValues","addDomEvent","useIsomorphicLayoutEffect","invariant","getElementScrollOffsets","element","xOffset","scrollLeft","yOffset","scrollTop","xMaxOffset","scrollWidth","offsetWidth","yMaxOffset","scrollHeight","offsetHeight","useElementScroll","ref","values","current","updateScrollValues","scrollListener","passive","resizeListener"],"mappings":"AAAA,SAASA,WAAT,QAA4B,6BAA5B;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,QAA8D,YAA9D;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,IAAIC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAUC,OAAV,EAAmB;AAAE,SAAO,YAAY;AAClE,WAAO;AACHC,MAAAA,OAAO,EAAED,OAAO,CAACE,UADd;AAEHC,MAAAA,OAAO,EAAEH,OAAO,CAACI,SAFd;AAGHC,MAAAA,UAAU,EAAEL,OAAO,CAACM,WAAR,GAAsBN,OAAO,CAACO,WAHvC;AAIHC,MAAAA,UAAU,EAAER,OAAO,CAACS,YAAR,GAAuBT,OAAO,CAACU;AAJxC,KAAP;AAMH,GAPkD;AAO/C,CAPJ;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,MAAIC,MAAM,GAAGpB,WAAW,CAACE,wBAAD,CAAxB;AACAE,EAAAA,yBAAyB,CAAC,YAAY;AAClC,QAAIG,OAAO,GAAGY,GAAG,CAACE,OAAlB;AACAhB,IAAAA,SAAS,CAAC,CAAC,CAACE,OAAH,EAAY,+DAAZ,CAAT;AACA,QAAI,CAACA,OAAL,EACI;AACJ,QAAIe,kBAAkB,GAAGrB,mBAAmB,CAACmB,MAAD,EAASd,uBAAuB,CAACC,OAAD,CAAhC,CAA5C;AACA,QAAIgB,cAAc,GAAGpB,WAAW,CAACI,OAAD,EAAU,QAAV,EAAoBe,kBAApB,EAAwC;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAxC,CAAhC;AACA,QAAIC,cAAc,GAAGtB,WAAW,CAACI,OAAD,EAAU,QAAV,EAAoBe,kBAApB,CAAhC;AACA,WAAO,YAAY;AACfC,MAAAA,cAAc,IAAIA,cAAc,EAAhC;AACAE,MAAAA,cAAc,IAAIA,cAAc,EAAhC;AACH,KAHD;AAIH,GAZwB,EAYtB,EAZsB,CAAzB;AAaA,SAAOL,MAAP;AACH;;AAED,SAASF,gBAAT","sourcesContent":["import { useConstant } from '../../utils/use-constant.js';\nimport { createScrollUpdater, createScrollMotionValues } from './utils.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\nimport { invariant } from 'hey-listen';\n\nvar getElementScrollOffsets = function (element) { return function () {\n    return {\n        xOffset: element.scrollLeft,\n        yOffset: element.scrollTop,\n        xMaxOffset: element.scrollWidth - element.offsetWidth,\n        yMaxOffset: element.scrollHeight - element.offsetHeight,\n    };\n}; };\n/**\n * Returns MotionValues that update when the provided element scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels.\n * - `scrollY` — Vertical scroll distance in pixels.\n * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.\n * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * This element must be set to `overflow: scroll` on either or both axes to report scroll offset.\n *\n * @library\n *\n * ```jsx\n * import * as React from \"react\"\n * import {\n *   Frame,\n *   useElementScroll,\n *   useTransform\n * } from \"framer\"\n *\n * export function MyComponent() {\n *   const ref = React.useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <Frame ref={ref}>\n *       <Frame scaleX={scrollYProgress} />\n *     </Frame>\n *   )\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const ref = useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <div ref={ref}>\n *       <motion.div style={{ scaleX: scrollYProgress }} />\n *     </div>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction useElementScroll(ref) {\n    var values = useConstant(createScrollMotionValues);\n    useIsomorphicLayoutEffect(function () {\n        var element = ref.current;\n        invariant(!!element, \"ref provided to useScroll must be passed into a HTML element.\");\n        if (!element)\n            return;\n        var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));\n        var scrollListener = addDomEvent(element, \"scroll\", updateScrollValues, { passive: true });\n        var resizeListener = addDomEvent(element, \"resize\", updateScrollValues);\n        return function () {\n            scrollListener && scrollListener();\n            resizeListener && resizeListener();\n        };\n    }, []);\n    return values;\n}\n\nexport { useElementScroll };\n"]},"metadata":{},"sourceType":"module"}