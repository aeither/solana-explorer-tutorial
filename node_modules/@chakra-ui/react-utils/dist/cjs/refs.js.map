{"version":3,"sources":["../../src/refs.ts"],"names":["assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach"],"mappings":";;;;;;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;AACzE,MAAID,GAAG,IAAI,IAAX,EAAiB;;AAEjB,MAAI,uBAAWA,GAAX,CAAJ,EAAqB;AACnBA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACA;AACD;;AAED,MAAI;AACF;AACAD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,2BAAkCH,KAAlC,kBAAoDD,GAApD,OAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASK,SAAT,GAA4D;AAAA,oCAAnCC,IAAmC;AAAnCA,IAAAA,IAAmC;AAAA;;AACjE,SAAO,UAACC,IAAD,EAAoB;AACzBD,IAAAA,IAAI,CAACE,OAAL,CAAa,UAACR,GAAD;AAAA,aAASD,SAAS,CAACC,GAAD,EAAMO,IAAN,CAAlB;AAAA,KAAb;AACD,GAFD;AAGD","sourcesContent":["import { isFunction } from \"@chakra-ui/utils\"\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node))\n  }\n}\n"],"file":"refs.js"}