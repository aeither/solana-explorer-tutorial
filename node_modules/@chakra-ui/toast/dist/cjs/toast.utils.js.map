{"version":3,"sources":["../../src/toast.utils.ts"],"names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","Object","values","flat","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection"],"mappings":";;;;;;;AAEA;AACA;AACA;AACA;AACO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAsBC,EAAtB;AAAA,SACtBD,GAAG,CAACE,IAAJ,CAAS,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,GAAT,CADsB;AAAA,CAAjB;AAGP;AACA;AACA;AACA;;;;;AACO,SAASG,SAAT,CAAmBC,MAAnB,EAAuCJ,EAAvC,EAAoD;AACzD,MAAMK,QAAQ,GAAGC,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CAAjC;AAEA,MAAMO,KAAK,GAAGF,QAAQ,GAClBD,MAAM,CAACC,QAAD,CAAN,CAAiBG,SAAjB,CAA2B,UAACN,KAAD;AAAA,WAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,GAA3B,CADkB,GAElB,CAAC,CAFL;AAIA,SAAO;AACLK,IAAAA,QAAQ,EAARA,QADK;AAELE,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;;;AACO,IAAMD,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,MAAD,EAAqBJ,EAArB;AAAA;;AAAA,kCAC9BS,MAAM,CAACC,MAAP,CAAcN,MAAd,EACGO,IADH,GAEGV,IAFH,CAEQ,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,GAFR,CAD8B,qBAC9B,sBAEqCK,QAHP;AAAA,CAAzB;AAKP;AACA;AACA;AACA;;;;;AACO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACR,MAAD,EAAqBJ,EAArB;AAAA,SACvB,CAAC,CAACM,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CADK;AAAA,CAAlB;AAGP;AACA;AACA;AACA;;;;;AACO,SAASa,aAAT,CAAuBR,QAAvB,EAAqE;AAC1E,MAAMS,QAAQ,GAAGT,QAAQ,CAACU,QAAT,CAAkB,OAAlB,CAAjB;AACA,MAAMC,OAAO,GAAGX,QAAQ,CAACU,QAAT,CAAkB,MAAlB,CAAhB;AAEA,MAAIE,UAAU,GAAG,QAAjB;AACA,MAAIH,QAAJ,EAAcG,UAAU,GAAG,UAAb;AACd,MAAID,OAAJ,EAAaC,UAAU,GAAG,YAAb;AAEb,SAAO;AACLC,IAAAA,OAAO,EAAE,MADJ;AAELC,IAAAA,aAAa,EAAE,QAFV;AAGLF,IAAAA,UAAU,EAAVA;AAHK,GAAP;AAKD","sourcesContent":["import { ToastPosition, ToastOptions, ToastState, ToastId } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport const getToastPosition = (toasts: ToastState, id: ToastId) =>\n  Object.values(toasts)\n    .flat()\n    .find((toast) => toast.id === id)?.position\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n"],"file":"toast.utils.js"}