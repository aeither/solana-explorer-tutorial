{"version":3,"sources":["../../src/input.tsx"],"names":["Input","props","ref","styles","ownProps","input","_className","className","field","__DEV__","displayName","id"],"mappings":";;;;;AAAA;;AACA;;AAQA;;AACA;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACO,IAAMA,KAAK,gBAAG,wBAAgC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACnE,MAAMC,MAAM,GAAG,iCAAoB,OAApB,EAA6BF,KAA7B,CAAf;AACA,MAAMG,QAAQ,GAAG,8BAAiBH,KAAjB,CAAjB;AACA,MAAMI,KAAK,GAAG,iCAAiCD,QAAjC,CAAd;;AACA,MAAME,UAAU,GAAG,eAAG,cAAH,EAAmBL,KAAK,CAACM,SAAzB,CAAnB;;AAEA,sBACE,oBAAC,cAAD,CAAQ,KAAR,eACMF,KADN;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACK,KAFhB;AAGE,IAAA,GAAG,EAAEN,GAHP;AAIE,IAAA,SAAS,EAAEI;AAJb,KADF;AAQD,CAdoB,CAAd;;;AAgBP,IAAIG,cAAJ,EAAa;AACXT,EAAAA,KAAK,CAACU,WAAN,GAAoB,OAApB;AACD,C,CAED;;;AACAV,KAAK,CAACW,EAAN,GAAW,OAAX","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"file":"input.js"}