{"version":3,"sources":["../../src/modal-manager.ts"],"names":["ModalManager","modals","add","modal","push","remove","filter","_modal","isTopModal","topmostModal","length","manager","useModalManager","ref","isOpen"],"mappings":";;;;;;AAAA;;;;AAEA;AACA;AACA;AACA;IACMA,Y;AAEJ,0BAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACD;;;;SAEDC,G,GAAA,aAAIC,KAAJ,EAAgB;AACd,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;AACD,G;;SAEDE,M,GAAA,gBAAOF,KAAP,EAAmB;AACjB,SAAKF,MAAL,GAAc,KAAKA,MAAL,CAAYK,MAAZ,CAAmB,UAACC,MAAD;AAAA,aAAYA,MAAM,KAAKJ,KAAvB;AAAA,KAAnB,CAAd;AACD,G;;SAEDK,U,GAAA,oBAAWL,KAAX,EAAuB;AACrB,QAAMM,YAAY,GAAG,KAAKR,MAAL,CAAY,KAAKA,MAAL,CAAYS,MAAZ,GAAqB,CAAjC,CAArB;AACA,WAAOD,YAAY,KAAKN,KAAxB;AACD,G;;;;;AAGI,IAAMQ,OAAO,GAAG,IAAIX,YAAJ,EAAhB;;;AAEA,SAASY,eAAT,CAAyBC,GAAzB,EAAwCC,MAAxC,EAA0D;AAC/D,wBAAU,YAAM;AACd,QAAIA,MAAJ,EAAY;AACVH,MAAAA,OAAO,CAACT,GAAR,CAAYW,GAAZ;AACD;;AACD,WAAO,YAAM;AACXF,MAAAA,OAAO,CAACN,MAAR,CAAeQ,GAAf;AACD,KAFD;AAGD,GAPD,EAOG,CAACC,MAAD,EAASD,GAAT,CAPH;AAQD","sourcesContent":["import { useEffect, Ref } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: any[]\n  constructor() {\n    this.modals = []\n  }\n\n  add(modal: any) {\n    this.modals.push(modal)\n  }\n\n  remove(modal: any) {\n    this.modals = this.modals.filter((_modal) => _modal !== modal)\n  }\n\n  isTopModal(modal: any) {\n    const topmostModal = this.modals[this.modals.length - 1]\n    return topmostModal === modal\n  }\n}\n\nexport const manager = new ModalManager()\n\nexport function useModalManager(ref: Ref<any>, isOpen?: boolean) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref)\n    }\n    return () => {\n      manager.remove(ref)\n    }\n  }, [isOpen, ref])\n}\n"],"file":"modal-manager.js"}