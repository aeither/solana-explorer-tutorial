{"ast":null,"code":"import { contains, detectBrowser, focus, getOwnerDocument, isActiveElement, isRefObject } from \"@chakra-ui/utils\";\nimport { usePointerEvent } from \"./use-pointer-event\";\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\n\nexport function useFocusOnPointerDown(props) {\n  var ref = props.ref,\n      elements = props.elements,\n      enabled = props.enabled;\n  var isSafari = detectBrowser(\"Safari\");\n\n  var doc = function doc() {\n    return getOwnerDocument(ref.current);\n  };\n\n  usePointerEvent(doc, \"pointerdown\", function (event) {\n    if (!isSafari || !enabled) return;\n    var target = event.target;\n    var els = elements != null ? elements : [ref];\n    var isValidTarget = els.some(function (elementOrRef) {\n      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return contains(el, target);\n    });\n\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault();\n      focus(target);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/use-focus-on-pointerdown.ts"],"names":["enabled","isSafari","detectBrowser","doc","getOwnerDocument","ref","usePointerEvent","event","target","els","elements","isValidTarget","elementOrRef","el","isRefObject","contains","isActiveElement","focus"],"mappings":"AAAA,SAAA,QAAA,EAAA,aAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,WAAA,QAAA,kBAAA;AASA,SAAA,eAAA,QAAA,qBAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,qBAAA,CAAA,KAAA,EAAgE;AACrE,MAAM,GAAN,GAAA,KAAA,CAAM,GAAN;AAAA,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAuBA,OAAvB,GAAA,KAAA,CAAuBA,OAAvB;AAEA,MAAMC,QAAQ,GAAGC,aAAa,CAA9B,QAA8B,CAA9B;;AACA,MAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,WAAMC,gBAAgB,CAACC,GAAG,CAAtC,OAAkC,CAAtB;AAAA,GAAZ;;AAEAC,EAAAA,eAAe,CAAA,GAAA,EAAA,aAAA,EAAsBC,UAAAA,KAAD,EAAW;AAC7C,QAAI,CAAA,QAAA,IAAa,CAAjB,OAAA,EAA2B;AAC3B,QAAMC,MAAM,GAAGD,KAAK,CAApB,MAAA;AAEA,QAAME,GAAG,GAAGC,QAAH,IAAA,IAAGA,GAAH,QAAGA,GAAY,CAAxB,GAAwB,CAAxB;AACA,QAAMC,aAAa,GAAG,GAAG,CAAH,IAAA,CAAUC,UAAAA,YAAD,EAAkB;AAC/C,UAAMC,EAAE,GAAGC,WAAW,CAAXA,YAAW,CAAXA,GAA4BF,YAAY,CAAxCE,OAAAA,GAAX,YAAA;AACA,aAAOC,QAAQ,CAAA,EAAA,EAAf,MAAe,CAAf;AAFF,KAAsB,CAAtB;;AAKA,QAAI,CAACC,eAAe,CAAhB,MAAgB,CAAhB,IAAJ,aAAA,EAA+C;AAC7CT,MAAAA,KAAK,CAALA,cAAAA;AACAU,MAAAA,KAAK,CAALA,MAAK,CAALA;AACD;AAbHX,GAAe,CAAfA;AAeD","sourcesContent":["import {\n  contains,\n  detectBrowser,\n  focus,\n  getOwnerDocument,\n  isActiveElement,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: RefObject<HTMLElement>\n  elements?: Array<RefObject<HTMLElement> | HTMLElement | null>\n}\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const isSafari = detectBrowser(\"Safari\")\n  const doc = () => getOwnerDocument(ref.current)\n\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return contains(el, target)\n    })\n\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault()\n      focus(target)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}