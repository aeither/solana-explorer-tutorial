{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Button } from \"./button\";\nexport var IconButton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var icon = props.icon,\n      children = props.children,\n      isRound = props.isRound,\n      ariaLabel = props[\"aria-label\"],\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"children\", \"isRound\", \"aria-label\"]);\n  /**\n   * Passing the icon as prop or children should work\n   */\n\n\n  var element = icon || children;\n\n  var _children = /*#__PURE__*/React.isValidElement(element) ? /*#__PURE__*/React.cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : undefined,\n    ref: ref,\n    \"aria-label\": ariaLabel\n  }, rest), _children);\n});\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\";\n}","map":{"version":3,"sources":["../../src/icon-button.tsx"],"names":["IconButton","forwardRef","ariaLabel","element","icon","_children","focusable","isRound"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,mBAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,MAAA,QAAA,UAAA;AA4BA,OAAO,IAAMA,UAAU,GAAA,aAAGC,UAAU,CAClC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACd,MAAM,IAAN,GAAA,KAAA,CAAM,IAAN;AAAA,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,MAA+CC,SAA/C,GAAA,KAAA,CAAiC,YAAjC;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,YAAA,CAAA,CAAA;AAEA;AACJ;AACA;;;AACI,MAAMC,OAAO,GAAGC,IAAI,IAApB,QAAA;;AACA,MAAMC,SAAS,GAAG,aAAA,KAAK,CAAL,cAAA,CAAA,OAAA,IAAA,aACd,KAAK,CAAL,YAAA,CAAA,OAAA,EAAmC;AACjC,mBADiC,IAAA;AAEjCC,IAAAA,SAAS,EAAE;AAFsB,GAAnC,CADc,GAAlB,IAAA;;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EADT,GAAA;AAEE,IAAA,YAAY,EAAEC,OAAO,GAAA,MAAA,GAFvB,SAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,kBAAYL;AAJd,GAAA,EAAA,IAAA,CAAA,EADF,SACE,CADF;AAfG,CAA6B,CAA7B;;AA6BP,IAAA,OAAA,EAAa;AACXF,EAAAA,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AACD","sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n"]},"metadata":{},"sourceType":"module"}