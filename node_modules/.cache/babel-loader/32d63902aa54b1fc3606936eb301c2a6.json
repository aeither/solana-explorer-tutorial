{"ast":null,"code":"import { t, transforms } from \"../utils\";\nexport var layout = {\n  width: t.sizesT(\"width\"),\n  inlineSize: t.sizesT(\"inlineSize\"),\n  height: t.sizes(\"height\"),\n  blockSize: t.sizes(\"blockSize\"),\n  boxSize: t.sizes([\"width\", \"height\"]),\n  minWidth: t.sizes(\"minWidth\"),\n  minInlineSize: t.sizes(\"minInlineSize\"),\n  minHeight: t.sizes(\"minHeight\"),\n  minBlockSize: t.sizes(\"minBlockSize\"),\n  maxWidth: t.sizes(\"maxWidth\"),\n  maxInlineSize: t.sizes(\"maxInlineSize\"),\n  maxHeight: t.sizes(\"maxHeight\"),\n  maxBlockSize: t.sizes(\"maxBlockSize\"),\n  d: t.prop(\"display\"),\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  overscrollBehavior: true,\n  overscrollBehaviorX: true,\n  overscrollBehaviorY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true,\n  boxDecorationBreak: true,\n  float: t.propT(\"float\", transforms.float),\n  objectFit: true,\n  objectPosition: true,\n  visibility: true,\n  isolation: true\n};\nObject.assign(layout, {\n  w: layout.width,\n  h: layout.height,\n  minW: layout.minWidth,\n  maxW: layout.maxWidth,\n  minH: layout.minHeight,\n  maxH: layout.maxHeight,\n  overscroll: layout.overscrollBehavior,\n  overscrollX: layout.overscrollBehaviorX,\n  overscrollY: layout.overscrollBehaviorY\n});\n/**\n * Types for layout related CSS properties\n */","map":{"version":3,"sources":["../../../src/config/layout.ts"],"names":["layout","width","t","inlineSize","height","blockSize","boxSize","minWidth","minInlineSize","minHeight","minBlockSize","maxWidth","maxInlineSize","maxHeight","maxBlockSize","d","overflow","overflowX","overflowY","overscrollBehavior","overscrollBehaviorX","overscrollBehaviorY","display","verticalAlign","boxSizing","boxDecorationBreak","float","transforms","objectFit","objectPosition","visibility","isolation","Object","w","h","minW","maxW","minH","maxH","overscroll","overscrollX","overscrollY"],"mappings":"AAEA,SAAA,CAAA,EAAA,UAAA,QAAA,UAAA;AAEA,OAAO,IAAMA,MAAc,GAAG;AAC5BC,EAAAA,KAAK,EAAEC,CAAC,CAADA,MAAAA,CADqB,OACrBA,CADqB;AAE5BC,EAAAA,UAAU,EAAED,CAAC,CAADA,MAAAA,CAFgB,YAEhBA,CAFgB;AAG5BE,EAAAA,MAAM,EAAEF,CAAC,CAADA,KAAAA,CAHoB,QAGpBA,CAHoB;AAI5BG,EAAAA,SAAS,EAAEH,CAAC,CAADA,KAAAA,CAJiB,WAIjBA,CAJiB;AAK5BI,EAAAA,OAAO,EAAEJ,CAAC,CAADA,KAAAA,CAAQ,CAAA,OAAA,EALW,QAKX,CAARA,CALmB;AAM5BK,EAAAA,QAAQ,EAAEL,CAAC,CAADA,KAAAA,CANkB,UAMlBA,CANkB;AAO5BM,EAAAA,aAAa,EAAEN,CAAC,CAADA,KAAAA,CAPa,eAObA,CAPa;AAQ5BO,EAAAA,SAAS,EAAEP,CAAC,CAADA,KAAAA,CARiB,WAQjBA,CARiB;AAS5BQ,EAAAA,YAAY,EAAER,CAAC,CAADA,KAAAA,CATc,cASdA,CATc;AAU5BS,EAAAA,QAAQ,EAAET,CAAC,CAADA,KAAAA,CAVkB,UAUlBA,CAVkB;AAW5BU,EAAAA,aAAa,EAAEV,CAAC,CAADA,KAAAA,CAXa,eAWbA,CAXa;AAY5BW,EAAAA,SAAS,EAAEX,CAAC,CAADA,KAAAA,CAZiB,WAYjBA,CAZiB;AAa5BY,EAAAA,YAAY,EAAEZ,CAAC,CAADA,KAAAA,CAbc,cAadA,CAbc;AAc5Ba,EAAAA,CAAC,EAAEb,CAAC,CAADA,IAAAA,CAdyB,SAczBA,CAdyB;AAe5Bc,EAAAA,QAAQ,EAfoB,IAAA;AAgB5BC,EAAAA,SAAS,EAhBmB,IAAA;AAiB5BC,EAAAA,SAAS,EAjBmB,IAAA;AAkB5BC,EAAAA,kBAAkB,EAlBU,IAAA;AAmB5BC,EAAAA,mBAAmB,EAnBS,IAAA;AAoB5BC,EAAAA,mBAAmB,EApBS,IAAA;AAqB5BC,EAAAA,OAAO,EArBqB,IAAA;AAsB5BC,EAAAA,aAAa,EAtBe,IAAA;AAuB5BC,EAAAA,SAAS,EAvBmB,IAAA;AAwB5BC,EAAAA,kBAAkB,EAxBU,IAAA;AAyB5BC,EAAAA,KAAK,EAAExB,CAAC,CAADA,KAAAA,CAAAA,OAAAA,EAAiByB,UAAU,CAzBN,KAyBrBzB,CAzBqB;AA0B5B0B,EAAAA,SAAS,EA1BmB,IAAA;AA2B5BC,EAAAA,cAAc,EA3Bc,IAAA;AA4B5BC,EAAAA,UAAU,EA5BkB,IAAA;AA6B5BC,EAAAA,SAAS,EAAE;AA7BiB,CAAvB;AAgCPC,MAAM,CAANA,MAAAA,CAAAA,MAAAA,EAAsB;AACpBC,EAAAA,CAAC,EAAEjC,MAAM,CADW,KAAA;AAEpBkC,EAAAA,CAAC,EAAElC,MAAM,CAFW,MAAA;AAGpBmC,EAAAA,IAAI,EAAEnC,MAAM,CAHQ,QAAA;AAIpBoC,EAAAA,IAAI,EAAEpC,MAAM,CAJQ,QAAA;AAKpBqC,EAAAA,IAAI,EAAErC,MAAM,CALQ,SAAA;AAMpBsC,EAAAA,IAAI,EAAEtC,MAAM,CANQ,SAAA;AAOpBuC,EAAAA,UAAU,EAAEvC,MAAM,CAPE,kBAAA;AAQpBwC,EAAAA,WAAW,EAAExC,MAAM,CARC,mBAAA;AASpByC,EAAAA,WAAW,EAAEzC,MAAM,CAACqB;AATA,CAAtBW;AAYA;AACA;AACA","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config } from \"../utils/prop-config\"\nimport { Length, t, Token, transforms } from \"../utils\"\n\nexport const layout: Config = {\n  width: t.sizesT(\"width\"),\n  inlineSize: t.sizesT(\"inlineSize\"),\n  height: t.sizes(\"height\"),\n  blockSize: t.sizes(\"blockSize\"),\n  boxSize: t.sizes([\"width\", \"height\"]),\n  minWidth: t.sizes(\"minWidth\"),\n  minInlineSize: t.sizes(\"minInlineSize\"),\n  minHeight: t.sizes(\"minHeight\"),\n  minBlockSize: t.sizes(\"minBlockSize\"),\n  maxWidth: t.sizes(\"maxWidth\"),\n  maxInlineSize: t.sizes(\"maxInlineSize\"),\n  maxHeight: t.sizes(\"maxHeight\"),\n  maxBlockSize: t.sizes(\"maxBlockSize\"),\n  d: t.prop(\"display\"),\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  overscrollBehavior: true,\n  overscrollBehaviorX: true,\n  overscrollBehaviorY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true,\n  boxDecorationBreak: true,\n  float: t.propT(\"float\", transforms.float),\n  objectFit: true,\n  objectPosition: true,\n  visibility: true,\n  isolation: true,\n}\n\nObject.assign(layout, {\n  w: layout.width,\n  h: layout.height,\n  minW: layout.minWidth,\n  maxW: layout.maxWidth,\n  minH: layout.minHeight,\n  maxH: layout.maxHeight,\n  overscroll: layout.overscrollBehavior,\n  overscrollX: layout.overscrollBehaviorX,\n  overscrollY: layout.overscrollBehaviorY,\n})\n\n/**\n * Types for layout related CSS properties\n */\nexport interface LayoutProps {\n  /**\n   * The CSS `display` property\n   */\n  display?: Token<CSS.Property.Display>\n  /**\n   * The CSS `display` property\n   * @deprecated - Please use `display` instead\n   */\n  d?: Token<CSS.Property.Display>\n  /**\n   * The CSS `width` property\n   */\n  width?: Token<CSS.Property.Width | number, \"sizes\">\n  /**\n   * The CSS `width` property\n   */\n  w?: Token<CSS.Property.Width | number, \"sizes\">\n  inlineSize?: Token<CSS.Property.InlineSize | number, \"sizes\">\n  /**\n   * The CSS `width` and `height` property\n   */\n  boxSize?: Token<CSS.Property.Width | number, \"sizes\">\n  /**\n   * The CSS `max-width` property\n   */\n  maxWidth?: Token<CSS.Property.MaxWidth | number, \"sizes\">\n  /**\n   * The CSS `max-width` property\n   */\n  maxW?: Token<CSS.Property.MaxWidth | number, \"sizes\">\n  maxInlineSize?: Token<CSS.Property.MaxInlineSize | number, \"sizes\">\n  /**\n   * The CSS `min-width` property\n   */\n  minWidth?: Token<CSS.Property.MinWidth | number, \"sizes\">\n  /**\n   * The CSS `min-width` property\n   */\n  minW?: Token<CSS.Property.MinWidth | number, \"sizes\">\n  minInlineSize?: Token<CSS.Property.MinInlineSize | number, \"sizes\">\n  /**\n   * The CSS `height` property\n   */\n  height?: Token<CSS.Property.Height | number, \"sizes\">\n  /**\n   * The CSS `height` property\n   */\n  h?: Token<CSS.Property.Height | number, \"sizes\">\n  blockSize?: Token<CSS.Property.BlockSize | number, \"sizes\">\n  /**\n   * The CSS `max-height` property\n   */\n  maxHeight?: Token<CSS.Property.MaxHeight | number, \"sizes\">\n  /**\n   * The CSS `max-height` property\n   */\n  maxH?: Token<CSS.Property.MaxHeight | number, \"sizes\">\n  maxBlockSize?: Token<CSS.Property.MaxBlockSize | number, \"sizes\">\n  /**\n   * The CSS `min-height` property\n   */\n  minHeight?: Token<CSS.Property.MinHeight | number, \"sizes\">\n  /**\n   * The CSS `min-height` property\n   */\n  minH?: Token<CSS.Property.MinHeight | number, \"sizes\">\n  minBlockSize?: Token<CSS.Property.MinBlockSize | number, \"sizes\">\n  /**\n   * The CSS `vertical-align` property\n   */\n  verticalAlign?: Token<CSS.Property.VerticalAlign<Length>>\n  /**\n   * The CSS `overflow` property\n   */\n  overflow?: Token<CSS.Property.Overflow>\n  /**\n   * The CSS `overflow-x` property\n   */\n  overflowX?: Token<CSS.Property.OverflowX>\n  /**\n   * The CSS `overflow-y` property\n   */\n  overflowY?: Token<CSS.Property.OverflowY>\n  /**\n   * The CSS `box-sizing` property\n   */\n  boxSizing?: CSS.Property.BoxSizing\n  /**\n   * The CSS `box-decoration` property\n   */\n  boxDecorationBreak?: Token<CSS.Property.BoxDecorationBreak>\n  /**\n   * The CSS `float` property\n   */\n  float?: Token<CSS.Property.Float>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: Token<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: Token<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `overscroll-behavior` property\n   */\n  overscrollBehavior?: Token<CSS.Property.OverscrollBehavior>\n  /**\n   * The CSS `overscroll-behavior` property\n   */\n  overscroll?: Token<CSS.Property.OverscrollBehavior>\n  /**\n   * The CSS `overscroll-behavior-x` property\n   */\n  overscrollBehaviorX?: Token<CSS.Property.OverscrollBehaviorX>\n  /**\n   * The CSS `overscroll-behavior-x` property\n   */\n  overscrollX?: Token<CSS.Property.OverscrollBehaviorX>\n  /**\n   * The CSS `overscroll-behavior-y` property\n   */\n  overscrollBehaviorY?: Token<CSS.Property.OverscrollBehaviorY>\n  /**\n   * The CSS `overscroll-behavior-y` property\n   */\n  overscrollY?: Token<CSS.Property.OverscrollBehaviorY>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: Token<CSS.Property.Visibility>\n  /**\n   * The CSS `isolation` property\n   */\n  isolation?: Token<CSS.Property.Isolation>\n}\n"]},"metadata":{},"sourceType":"module"}