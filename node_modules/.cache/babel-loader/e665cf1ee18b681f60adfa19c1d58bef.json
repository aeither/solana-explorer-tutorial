{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useTheme } from \"./providers\";\nimport { omitThemingProps } from \"./system.utils\";\nexport function useChakra() {\n  var colorModeResult = useColorMode();\n  var theme = useTheme();\n  return _extends({}, colorModeResult, {\n    theme: theme\n  });\n}\nexport function useToken(scale, token, fallback) {\n  var theme = useTheme();\n\n  if (Array.isArray(token)) {\n    var fallbackArr = [];\n\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n\n    return token.map(function (token, index) {\n      var _fallbackArr$index;\n\n      var path = scale + \".\" + token;\n      return get(theme, path, (_fallbackArr$index = fallbackArr[index]) != null ? _fallbackArr$index : token);\n    });\n  }\n\n  var path = scale + \".\" + token;\n  return get(theme, path, fallback != null ? fallback : token);\n}\nexport function useProps(themeKey, props) {\n  var _theme$components, _styleConfig$defaultP;\n\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme,\n      colorMode = _useChakra.colorMode;\n\n  var styleConfig = props.styleConfig || ((_theme$components = theme.components) == null ? void 0 : _theme$components[themeKey]);\n  var defaultProps = (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {};\n\n  var propsWithDefault = _extends({}, defaultProps, filterUndefined(props));\n\n  var stylesRef = useRef({});\n  var mergedProps = mergeWith({}, propsWithDefault, {\n    theme: theme,\n    colorMode: colorMode\n  });\n  var memoizedStyles = useMemo(function () {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes, _styleConfig$sizes2;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes = (_styleConfig$sizes2 = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes2[mergedProps.size]) != null ? _styleConfig$sizes : {}, mergedProps);\n      var styles = mergeWith(baseStyles, sizes, variants);\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach(function (part) {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps]);\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault)\n  };\n}","map":{"version":3,"sources":["../../src/hooks.ts"],"names":["memoizedGet","colorModeResult","useColorMode","theme","useTheme","Array","fallbackArr","path","scale","get","fallback","colorMode","useChakra","styleConfig","props","defaultProps","propsWithDefault","filterUndefined","stylesRef","useRef","mergedProps","mergeWith","memoizedStyles","useMemo","baseStyles","runIfFn","variants","sizes","styles","part","isStyleEqual","isEqual","omitThemingProps"],"mappings":"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","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken<T extends StringOrNumber>(\n  scale: string,\n  token: T | T[],\n  fallback?: T | T[],\n) {\n  const theme = useTheme()\n\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = []\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback]\n    }\n\n    return token.map((token, index) => {\n      const path = `${scale}.${token}`\n      return get(theme, path, fallbackArr[index] ?? token)\n    })\n  }\n\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = mergeWith({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}