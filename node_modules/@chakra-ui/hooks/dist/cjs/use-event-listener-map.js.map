{"version":3,"sources":["../../src/use-event-listener-map.ts"],"names":["useEventListenerMap","listeners","React","useRef","Map","currentListeners","current","add","useCallback","el","type","listener","options","pointerEventListener","set","__listener","addEventListener","remove","get","removeEventListener","useEffect","forEach","value","key"],"mappings":";;;;;AAAA;;AAMA;;;;;;AA6BO,SAASA,mBAAT,GAA+C;AACpD,MAAMC,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAlB;AACA,MAAMC,gBAAgB,GAAGJ,SAAS,CAACK,OAAnC;AAEA,MAAMC,GAAG,GAAGL,KAAK,CAACM,WAAN,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,EAAiC;AAC7D,QAAMC,oBAAoB,GAAG,oCAC3BF,QAD2B,EAE3BD,IAAI,KAAK,aAFkB,CAA7B;AAIAT,IAAAA,SAAS,CAACK,OAAV,CAAkBQ,GAAlB,CAAsBH,QAAtB,EAAgC;AAC9BI,MAAAA,UAAU,EAAEF,oBADkB;AAE9BH,MAAAA,IAAI,EAAE,gCAAoBA,IAApB,CAFwB;AAG9BD,MAAAA,EAAE,EAAFA,EAH8B;AAI9BG,MAAAA,OAAO,EAAPA;AAJ8B,KAAhC;AAMAH,IAAAA,EAAE,CAACO,gBAAH,CAAoBN,IAApB,EAA0BG,oBAA1B,EAAgDD,OAAhD;AACD,GAZW,EAYT,EAZS,CAAZ;AAcA,MAAMK,MAAM,GAAGf,KAAK,CAACM,WAAN,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,EAAiC;AAAA,gCACnBX,SAAS,CAACK,OAAV,CAAkBY,GAAlB,CAAsBP,QAAtB,CADmB;AAAA,QAC5CE,oBAD4C,yBACxDE,UADwD;;AAEhEN,IAAAA,EAAE,CAACU,mBAAH,CAAuBT,IAAvB,EAA6BG,oBAA7B,EAAmDD,OAAnD;AACAX,IAAAA,SAAS,CAACK,OAAV,WAAyBO,oBAAzB;AACD,GAJc,EAIZ,EAJY,CAAf;AAMAX,EAAAA,KAAK,CAACkB,SAAN,CACE;AAAA,WAAM,YAAM;AACVf,MAAAA,gBAAgB,CAACgB,OAAjB,CAAyB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACvCN,QAAAA,MAAM,CAACK,KAAK,CAACb,EAAP,EAAWa,KAAK,CAACZ,IAAjB,EAAuBa,GAAvB,EAA4BD,KAAK,CAACV,OAAlC,CAAN;AACD,OAFD;AAGD,KAJD;AAAA,GADF,EAME,CAACK,MAAD,EAASZ,gBAAT,CANF;AASA,SAAO;AAAEE,IAAAA,GAAG,EAAHA,GAAF;AAAOU,IAAAA,MAAM,EAANA;AAAP,GAAP;AACD","sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    const { __listener: pointerEventListener } = listeners.current.get(listener)\n    el.removeEventListener(type, pointerEventListener, options)\n    listeners.current.delete(pointerEventListener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"file":"use-event-listener-map.js"}