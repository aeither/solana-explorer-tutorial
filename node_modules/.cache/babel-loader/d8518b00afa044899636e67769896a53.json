{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\";\nimport { useFormControlContext } from \"./form-control\";\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\n\nexport function useFormControl(props) {\n  var _useFormControlProps = useFormControlProps(props),\n      isDisabled = _useFormControlProps.isDisabled,\n      isInvalid = _useFormControlProps.isInvalid,\n      isReadOnly = _useFormControlProps.isReadOnly,\n      isRequired = _useFormControlProps.isRequired,\n      rest = _objectWithoutPropertiesLoose(_useFormControlProps, [\"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\"]);\n\n  return _extends({}, rest, {\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  });\n}\nexport function useFormControlProps(props) {\n  var _ref, _ref2, _ref3;\n\n  var field = useFormControlContext();\n\n  var id = props.id,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      required = props.required,\n      isRequired = props.isRequired,\n      isInvalid = props.isInvalid,\n      isReadOnly = props.isReadOnly,\n      isDisabled = props.isDisabled,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      rest = _objectWithoutPropertiesLoose(props, [\"id\", \"disabled\", \"readOnly\", \"required\", \"isRequired\", \"isInvalid\", \"isReadOnly\", \"isDisabled\", \"onFocus\", \"onBlur\"]);\n\n  var labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : []; // Error message must be described first in all scenarios.\n\n  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {\n    labelIds.push(field.feedbackId);\n  }\n\n  if (field != null && field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n\n  return _extends({}, rest, {\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_ref = disabled != null ? disabled : isDisabled) != null ? _ref : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_ref2 = readOnly != null ? readOnly : isReadOnly) != null ? _ref2 : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  });\n}","map":{"version":3,"sources":["../../src/use-form-control.ts"],"names":["isRequired","useFormControlProps","disabled","readOnly","required","ariaAttr","field","useFormControlContext","onBlur","labelIds","props","id","isDisabled","isReadOnly","isInvalid","onFocus","callAllHandlers"],"mappings":"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","sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}