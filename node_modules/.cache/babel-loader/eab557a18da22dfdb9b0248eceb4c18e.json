{"ast":null,"code":"export function isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\n\nfunction replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n\n  return value.replace(/\\s+/g, replaceValue);\n}\n\nfunction escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", \"\\\\.\") : value;\n}\n\nexport function addPrefix(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\nexport function toVarRef(name, fallback) {\n  return \"var(\" + escape(name) + (fallback ? \", \" + fallback : \"\") + \")\";\n}\nexport function toVar(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return \"--\" + addPrefix(value, prefix);\n}\nexport function cssVar(name, options) {\n  var cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\n\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}","map":{"version":3,"sources":["../../src/css-var.ts"],"names":["Number","parseFloat","value","replaceValue","valueStr","replaceWhiteSpace","isDecimal","prefix","escape","fallback","addPrefix","cssVariable","toVar","options","variable","reference","toVarRef","getFallback"],"mappings":"AAAA,OAAO,SAAA,SAAA,CAAA,KAAA,EAA+B;AACpC,SAAO,CAACA,MAAM,CAANA,SAAAA,CAAiBC,UAAU,CAACC,KAAK,CAAzC,QAAoCA,EAAD,CAA3BF,CAAR;AACD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAA,YAAA,EAA8D;AAAA,MAApBG,YAAoB,KAAA,KAAA,CAAA,EAAA;AAApBA,IAAAA,YAAoB,GAAL,GAAfA;AAAoB;;AAC5D,SAAOD,KAAK,CAALA,OAAAA,CAAAA,MAAAA,EAAP,YAAOA,CAAP;AACD;;AAED,SAAA,MAAA,CAAA,KAAA,EAAwC;AACtC,MAAME,QAAQ,GAAGC,iBAAiB,CAACH,KAAK,CAAxC,QAAmCA,EAAD,CAAlC;AACA,MAAIE,QAAQ,CAARA,QAAAA,CAAJ,KAAIA,CAAJ,EAA8B,OAAA,KAAA;AAC9B,SAAOE,SAAS,CAATA,KAAS,CAATA,GAAmBF,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,EAAnBE,KAAmBF,CAAnBE,GAAP,KAAA;AACD;;AAED,OAAO,SAAA,SAAA,CAAA,KAAA,EAAA,MAAA,EAA+C;AAAA,MAAbC,MAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,MAAa,GAAJ,EAATA;AAAa;;AACpD,SAAO,CAAA,MAAA,EAASC,MAAM,CAAf,KAAe,CAAf,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAAP,GAAO,CAAP;AACD;AAED,OAAO,SAAA,QAAA,CAAA,IAAA,EAAA,QAAA,EAAmD;AACxD,SAAA,SAAcA,MAAM,CAApB,IAAoB,CAApB,IAA6BC,QAAQ,GAAA,OAAA,QAAA,GAArC,EAAA,IAAA,GAAA;AACD;AAED,OAAO,SAAA,KAAA,CAAA,KAAA,EAAA,MAAA,EAA2C;AAAA,MAAbF,MAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,MAAa,GAAJ,EAATA;AAAa;;AAChD,SAAA,OAAYG,SAAS,CAAA,KAAA,EAArB,MAAqB,CAArB;AACD;AAYD,OAAO,SAAA,MAAA,CAAA,IAAA,EAAA,OAAA,EAAuD;AAC5D,MAAMC,WAAW,GAAGC,KAAK,CAAA,IAAA,EAAOC,OAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,OAAO,CAAvC,MAAyB,CAAzB;AACA,SAAO;AACLC,IAAAA,QAAQ,EADH,WAAA;AAELC,IAAAA,SAAS,EAAEC,QAAQ,CAAA,WAAA,EAAcC,WAAW,CAACJ,OAAD,IAAA,IAACA,GAAD,KAAA,CAACA,GAAAA,OAAO,CAAjC,QAAyB,CAAzB;AAFd,GAAP;AAID;;AAED,SAAA,WAAA,CAAA,QAAA,EAAiD;AAC/C,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC,OAAA,QAAA;AAClC,SAAOJ,QAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,QAAQ,CAAf,SAAA;AACD","sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"]},"metadata":{},"sourceType":"module"}