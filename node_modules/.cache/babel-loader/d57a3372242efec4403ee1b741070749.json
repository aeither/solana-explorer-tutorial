{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nexport function useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentBreakpoint = _React$useState2[0],\n      setCurrentBreakpoint = _React$useState2[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}","map":{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["breakpoints","useTheme","env","useEnvironment","mediaQueries","createMediaQueries","base","mediaQuery","breakpoint","current","currentBreakpoint","update","query","setCurrentBreakpoint","React","listeners","handleChange"],"mappings":"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","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n  const env = useEnvironment()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = env.window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update, env.window])\n\n  return current\n}\n"]},"metadata":{},"sourceType":"module"}