{"version":3,"sources":["../../src/use-id.ts"],"names":["defaultIdContext","prefix","Math","round","random","current","IdContext","React","createContext","IdProvider","memo","children","currentContext","useContext","isRoot","context","useMemo","createElement","Provider","value","useId","idProp","filter","Boolean","join","useIds","prefixes","id","map","useOptionalPart","partId","useState","setId","ref","useCallback","node","isRendered"],"mappings":";;;;;;;;AAEA;;;;;;AAFA;AASA,IAAMA,gBAAgC,GAAG;AACvCC,EAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAD+B;AAEvCC,EAAAA,OAAO,EAAE;AAF8B,CAAzC;AAKA,IAAMC,SAAS,gBAAGC,KAAK,CAACC,aAAN,CAAoCR,gBAApC,CAAlB;AAEO,IAAMS,UAAoB,gBAAGF,KAAK,CAACG,IAAN,CAAW,gBAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC/D,MAAMC,cAAc,GAAGL,KAAK,CAACM,UAAN,CAAiBP,SAAjB,CAAvB;AACA,MAAMQ,MAAM,GAAGF,cAAc,KAAKZ,gBAAlC;AACA,MAAMe,OAAuB,GAAGR,KAAK,CAACS,OAAN,CAC9B;AAAA,WAAO;AACLf,MAAAA,MAAM,EAAEa,MAAM,GAAG,CAAH,GAAO,EAAEF,cAAc,CAACX,MADjC;AAELI,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAAA,GAD8B,EAK9B,CAACS,MAAD,EAASF,cAAT,CAL8B,CAAhC;AAQA,sBAAOL,KAAK,CAACU,aAAN,CAAoBX,SAAS,CAACY,QAA9B,EAAwC;AAAEC,IAAAA,KAAK,EAAEJ;AAAT,GAAxC,EAA4DJ,QAA5D,CAAP;AACD,CAZmC,CAA7B;;;AAcA,SAASS,KAAT,CAAeC,MAAf,EAAgCpB,MAAhC,EAAyD;AAC9D,MAAMc,OAAO,GAAGR,KAAK,CAACM,UAAN,CAAiBP,SAAjB,CAAhB;AACA,SAAOC,KAAK,CAACS,OAAN,CACL;AAAA,WACEK,MAAM,IACN,CAACpB,MAAD,EAASc,OAAO,CAACd,MAAjB,EAAyB,EAAEc,OAAO,CAACV,OAAnC,EAA4CiB,MAA5C,CAAmDC,OAAnD,EAA4DC,IAA5D,CAAiE,GAAjE,CAFF;AAAA,GADK,EAIL;AACA,GAACH,MAAD,EAASpB,MAAT,CALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASwB,MAAT,CAAgBJ,MAAhB,EAAwD;AAAA,oCAApBK,QAAoB;AAApBA,IAAAA,QAAoB;AAAA;;AAC7D,MAAMC,EAAE,GAAGP,KAAK,CAACC,MAAD,CAAhB;AACA,SAAOd,KAAK,CAACS,OAAN,CAAc,YAAM;AACzB,WAAOU,QAAQ,CAACE,GAAT,CAAa,UAAC3B,MAAD;AAAA,aAAeA,MAAf,SAAyB0B,EAAzB;AAAA,KAAb,CAAP;AACD,GAFM,EAEJ,CAACA,EAAD,EAAKD,QAAL,CAFI,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,eAAT,CAAkCC,MAAlC,EAAkD;AAAA,wBACnCvB,KAAK,CAACwB,QAAN,CAA8B,IAA9B,CADmC;AAAA,MAChDJ,EADgD;AAAA,MAC5CK,KAD4C;;AAEvD,MAAMC,GAAG,GAAG1B,KAAK,CAAC2B,WAAN,CACV,UAACC,IAAD,EAAa;AACXH,IAAAA,KAAK,CAACG,IAAI,GAAGL,MAAH,GAAY,IAAjB,CAAL;AACD,GAHS,EAIV,CAACA,MAAD,CAJU,CAAZ;AAMA,SAAO;AAAEG,IAAAA,GAAG,EAAHA,GAAF;AAAON,IAAAA,EAAE,EAAFA,EAAP;AAAWS,IAAAA,UAAU,EAAEb,OAAO,CAACI,EAAD;AAA9B,GAAP;AACD","sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n\nimport * as React from \"react\"\n\ntype IdContextValue = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n}\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext)\n\nexport const IdProvider: React.FC = React.memo(({ children }) => {\n  const currentContext = React.useContext(IdContext)\n  const isRoot = currentContext === defaultIdContext\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRoot ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRoot, currentContext],\n  )\n\n  return React.createElement(IdContext.Provider, { value: context }, children)\n})\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const context = React.useContext(IdContext)\n  return React.useMemo(\n    () =>\n      idProp ||\n      [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [idProp, prefix],\n  )\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return React.useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = React.useState<string | null>(null)\n  const ref = React.useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"],"file":"use-id.js"}