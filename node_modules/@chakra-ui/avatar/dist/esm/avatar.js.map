{"version":3,"sources":["../../src/avatar.tsx"],"names":["useImage","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","__DEV__","React","AvatarBadge","props","ref","styles","badgeStyles","position","display","alignItems","justifyContent","insetEnd","bottom","badge","className","displayName","initials","name","firstName","lastName","split","charAt","AvatarName","getInitials","rest","label","DefaultIcon","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","src","showBorder","borderRadius","onError","icon","iconLabel","loading","children","borderColor","avatarStyles","borderWidth","undefined","container","AvatarImage","status","hasLoaded","showFallback","cloneElement","role","width","height","objectFit"],"mappings":"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","sourcesContent":["import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    insetEnd: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  iconLabel?: string\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {\n  iconLabel?: string\n}\n\nconst AvatarImage: React.FC<AvatarImageProps> = (props) => {\n  const {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <DefaultIcon />,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n"],"file":"avatar.js"}