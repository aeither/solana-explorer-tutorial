{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createTransform } from \"./create-transform\";\nimport { logical, toConfig } from \"./prop-config\";\nimport { transformFunctions as transforms } from \"./transform-functions\";\nexport { transforms };\nexport * from \"./types\";\nexport var t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", transforms.px),\n  space: toConfig(\"space\", transforms.px),\n  spaceT: toConfig(\"space\", transforms.px),\n  degreeT: function degreeT(property) {\n    return {\n      property: property,\n      transform: transforms.degree\n    };\n  },\n  prop: function prop(property, scale, transform) {\n    return _extends({\n      property: property,\n      scale: scale\n    }, scale && {\n      transform: createTransform({\n        scale: scale,\n        transform: transform\n      })\n    });\n  },\n  propT: function propT(property, transform) {\n    return {\n      property: property,\n      transform: transform\n    };\n  },\n  sizes: toConfig(\"sizes\", transforms.px),\n  sizesT: toConfig(\"sizes\", transforms.fraction),\n  shadows: toConfig(\"shadows\"),\n  logical: logical,\n  blur: toConfig(\"blur\", transforms.blur)\n};","map":{"version":3,"sources":["../../../src/utils/index.ts"],"names":["transformFunctions","t","borderWidths","toConfig","borderStyles","colors","borders","radii","transforms","space","spaceT","degreeT","property","transform","degree","prop","scale","createTransform","propT","sizes","sizesT","shadows","logical","blur"],"mappings":";;;;;;;;;;;;;;;;;;AACA,SAAA,eAAA,QAAA,oBAAA;AACA,SAAA,OAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAASA,kBAAkB,IAA3B,UAAA,QAAA,uBAAA;AAEA,SAAA,UAAA;AAEA,cAAA,SAAA;AAEA,OAAO,IAAMC,CAAC,GAAG;AACfC,EAAAA,YAAY,EAAEC,QAAQ,CADP,cACO,CADP;AAEfC,EAAAA,YAAY,EAAED,QAAQ,CAFP,cAEO,CAFP;AAGfE,EAAAA,MAAM,EAAEF,QAAQ,CAHD,QAGC,CAHD;AAIfG,EAAAA,OAAO,EAAEH,QAAQ,CAJF,SAIE,CAJF;AAKfI,EAAAA,KAAK,EAAEJ,QAAQ,CAAA,OAAA,EAAUK,UAAU,CALpB,EAKA,CALA;AAMfC,EAAAA,KAAK,EAAEN,QAAQ,CAAA,OAAA,EAAUK,UAAU,CANpB,EAMA,CANA;AAOfE,EAAAA,MAAM,EAAEP,QAAQ,CAAA,OAAA,EAAUK,UAAU,CAPrB,EAOC,CAPD;AAQfG,EAAAA,OARe,mBAQR,QARQ,EAQ2B;AACxC,WAAO;AAAEC,MAAAA,QAAF,EAAEA,QAAF;AAAYC,MAAAA,SAAS,EAAEL,UAAU,CAACM;AAAlC,KAAP;AATa,GAAA;AAWfC,EAAAA,IAXe,gBAWX,QAXW,EAWX,KAXW,EAWX,SAXW,EAeb;AACA,WAAA,QAAA,CAAA;AACEH,MAAAA,QADF,EACEA,QADF;AAEEI,MAAAA,KAAAA,EAAAA;AAFF,KAAA,EAGMA,KAAK,IAAI;AACXH,MAAAA,SAAS,EAAEI,eAAe,CAAC;AAAED,QAAAA,KAAF,EAAEA,KAAF;AAASH,QAAAA,SAAAA,EAAAA;AAAT,OAAD;AADf,KAHf,CAAA;AAhBa,GAAA;AAwBfK,EAAAA,KAxBe,iBAwBV,QAxBU,EAwBV,SAxBU,EAwB8D;AAC3E,WAAO;AAAEN,MAAAA,QAAF,EAAEA,QAAF;AAAYC,MAAAA,SAAAA,EAAAA;AAAZ,KAAP;AAzBa,GAAA;AA2BfM,EAAAA,KAAK,EAAEhB,QAAQ,CAAA,OAAA,EAAUK,UAAU,CA3BpB,EA2BA,CA3BA;AA4BfY,EAAAA,MAAM,EAAEjB,QAAQ,CAAA,OAAA,EAAUK,UAAU,CA5BrB,QA4BC,CA5BD;AA6Bfa,EAAAA,OAAO,EAAElB,QAAQ,CA7BF,SA6BE,CA7BF;AA8BfmB,EAAAA,OA9Be,EA8BfA,OA9Be;AA+BfC,EAAAA,IAAI,EAAEpB,QAAQ,CAAA,MAAA,EAASK,UAAU,CAAnB,IAAA;AA/BC,CAAV","sourcesContent":["import type { ThemeScale } from \"../create-theme-vars\"\nimport { createTransform } from \"./create-transform\"\nimport { logical, PropConfig, toConfig } from \"./prop-config\"\nimport { transformFunctions as transforms } from \"./transform-functions\"\n\nexport { transforms }\n\nexport * from \"./types\"\n\nexport const t = {\n  borderWidths: toConfig(\"borderWidths\"),\n  borderStyles: toConfig(\"borderStyles\"),\n  colors: toConfig(\"colors\"),\n  borders: toConfig(\"borders\"),\n  radii: toConfig(\"radii\", transforms.px),\n  space: toConfig(\"space\", transforms.px),\n  spaceT: toConfig(\"space\", transforms.px),\n  degreeT(property: PropConfig[\"property\"]) {\n    return { property, transform: transforms.degree }\n  },\n  prop(\n    property: PropConfig[\"property\"],\n    scale?: ThemeScale,\n    transform?: PropConfig[\"transform\"],\n  ) {\n    return {\n      property,\n      scale,\n      ...(scale && {\n        transform: createTransform({ scale, transform }),\n      }),\n    }\n  },\n  propT(property: PropConfig[\"property\"], transform?: PropConfig[\"transform\"]) {\n    return { property, transform }\n  },\n  sizes: toConfig(\"sizes\", transforms.px),\n  sizesT: toConfig(\"sizes\", transforms.fraction),\n  shadows: toConfig(\"shadows\"),\n  logical,\n  blur: toConfig(\"blur\", transforms.blur),\n}\n"]},"metadata":{},"sourceType":"module"}