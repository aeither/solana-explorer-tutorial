{"version":3,"sources":["../../src/providers.tsx"],"names":["useColorMode","css","toCSSVar","memoizedGet","get","runIfFn","createContext","Global","ThemeContext","ThemeProvider","EmotionThemeProvider","React","props","cssVarsRoot","theme","children","computedTheme","useMemo","__cssVars","useTheme","useContext","Error","StylesProvider","useStyles","name","errorMessage","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SACEC,GADF,EAGEC,QAHF,QAKO,0BALP;AAMA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,MADF,EAGEC,YAHF,EAIEC,aAAa,IAAIC,oBAJnB,QAMO,gBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAUA,OAAO,IAAMF,aAAa,GAAIG,KAAD,IAA+B;AAC1D,MAAM;AAAEC,IAAAA,WAAW,GAAG,cAAhB;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA;AAAvC,MAAoDH,KAA1D;AACA,MAAMI,aAAa,GAAGL,KAAK,CAACM,OAAN,CAAc,MAAMf,QAAQ,CAACY,KAAD,CAA5B,EAAqC,CAACA,KAAD,CAArC,CAAtB;AACA,sBACE,oBAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEE;AAA7B,kBACE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAGF,KAAD,KAAiB;AAAE,OAACD,WAAD,GAAeC,KAAK,CAACI;AAAvB,KAAjB;AAAhB,IADF,EAEGH,QAFH,CADF;AAMD,CATM;AAWP,OAAO,SAASI,QAAT,GAA6C;AAClD,MAAML,KAAK,GAAGH,KAAK,CAACS,UAAN,CACXZ,YADW,CAAd;;AAGA,MAAI,CAACM,KAAL,EAAY;AACV,UAAMO,KAAK,CACT,kHADS,CAAX;AAGD;;AAED,SAAOP,KAAP;AACD;AAED,IAAM,CAACQ,cAAD,EAAiBC,SAAjB,IAA8BjB,aAAa,CAA0B;AACzEkB,EAAAA,IAAI,EAAE,eADmE;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAKA,SAASH,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,WAAW,GAAG,MAAM;AAC/B,MAAM;AAAEC,IAAAA;AAAF,MAAgB3B,YAAY,EAAlC;AACA,sBACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAGc,KAAD,IAAgB;AACtB,UAAMc,eAAe,GAAGxB,GAAG,CAACU,KAAD,EAAQ,eAAR,CAA3B;AACA,UAAMe,YAAY,GAAGxB,OAAO,CAACuB,eAAD,EAAkB;AAAEd,QAAAA,KAAF;AAASa,QAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAMC,MAAM,GAAG9B,GAAG,CAAC4B,YAAD,CAAH,CAAkBf,KAAlB,CAAf;AACA,aAAOiB,MAAP;AACD;AAPH,IADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"],"file":"providers.js"}