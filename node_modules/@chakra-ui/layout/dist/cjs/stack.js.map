{"version":3,"sources":["../../src/stack.tsx"],"names":["StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","ref","isInline","directionProp","direction","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","styles","React","useMemo","dividerStyle","hasDivider","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","_child","clonedDivider","cloneElement","__css","_divider","_className","flexDirection","selector","__DEV__","displayName","HStack","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        // Prefer provided child key, fallback to index\n        const key = typeof child.key !== \"undefined\" ? child.key : index\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={key}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"],"file":"stack.js"}