{"version":3,"sources":["../../src/radio.tsx"],"names":["chakra","forwardRef","layoutPropNames","omitThemingProps","useMultiStyleConfig","callAll","split","__DEV__","React","useRadioGroupContext","useRadio","Radio","props","ref","group","onChange","onChangeProp","value","valueProp","styles","ownProps","spacing","children","isFullWidth","isDisabled","isFocusable","rest","isChecked","name","getInputProps","getCheckboxProps","getLabelProps","htmlProps","layoutProps","otherProps","checkboxProps","inputProps","labelProps","rootStyles","width","undefined","display","alignItems","verticalAlign","container","checkboxStyles","justifyContent","flexShrink","control","labelStyles","userSelect","marginStart","label","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\nimport { useRadio, UseRadioProps } from \"./use-radio\"\n\ntype Omitted = \"onChange\" | \"defaultChecked\" | \"checked\"\ninterface BaseControlProps extends Omit<HTMLChakraProps<\"div\">, Omitted> {}\n\nexport interface RadioProps\n  extends UseRadioProps,\n    ThemingProps<\"Radio\">,\n    BaseControlProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * If `true`, the radio will occupy the full width of its parent container\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/radio\n */\nexport const Radio = forwardRef<RadioProps, \"input\">((props, ref) => {\n  const group = useRadioGroupContext()\n  const { onChange: onChangeProp, value: valueProp } = props\n\n  const styles = useMultiStyleConfig(\"Radio\", { ...group, ...props })\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    children,\n    isFullWidth,\n    isDisabled = group?.isDisabled,\n    isFocusable = group?.isFocusable,\n    ...rest\n  } = ownProps\n\n  let isChecked = props.isChecked\n  if (group?.value != null && valueProp != null) {\n    isChecked = group.value === valueProp\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && valueProp != null) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const name = props?.name ?? group?.name\n\n  const {\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useRadio({\n    ...rest,\n    isChecked,\n    isFocusable,\n    isDisabled,\n    onChange,\n    name,\n  })\n\n  const [layoutProps, otherProps] = split(htmlProps, layoutPropNames as any)\n\n  const checkboxProps = getCheckboxProps(otherProps)\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n\n  const rootStyles = {\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    ...styles.container,\n  }\n\n  const checkboxStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0,\n    ...styles.control,\n  }\n\n  const labelStyles: SystemStyleObject = {\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label,\n  }\n\n  return (\n    <chakra.label className=\"chakra-radio\" {...layoutProps} __css={rootStyles}>\n      <input className=\"chakra-radio__input\" {...inputProps} />\n      <chakra.span\n        className=\"chakra-radio__control\"\n        {...checkboxProps}\n        __css={checkboxStyles}\n      />\n      {children && (\n        <chakra.span\n          className=\"chakra-radio__label\"\n          {...labelProps}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\"\n}\n"],"file":"radio.js"}