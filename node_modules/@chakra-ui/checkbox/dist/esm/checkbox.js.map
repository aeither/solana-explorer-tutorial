{"version":3,"sources":["../../src/checkbox.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","useMemo","opacity","isIndeterminate","transform","fontSize","color","clonedIcon","cloneElement","__css","container","control","marginStart","label","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"file":"checkbox.js"}