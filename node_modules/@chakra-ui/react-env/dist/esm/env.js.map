{"version":3,"sources":["../../src/env.tsx"],"names":["isBrowser","__DEV__","React","createContext","useContext","useMemo","useState","ssrDocument","ssrWindow","mockEnv","window","document","defaultEnv","EnvironmentContext","displayName","useEnvironment","EnvironmentProvider","props","children","environment","environmentProp","node","setNode","context","doc","ownerDocument","win","defaultView","nodeEnv","undefined","env","showEnvGetter","el"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,kBAAnC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoDC,QAApD,QAAoE,OAApE;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,SAAT,QAA0B,eAA1B;AAOA,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEF,SADM;AAEdG,EAAAA,QAAQ,EAAEJ;AAFI,CAAhB;AAKA,IAAMK,UAAuB,GAAGZ,SAAS,GAAG;AAAEU,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAH,GAA0BF,OAAnE;AAEA,IAAMI,kBAAkB,gBAAGV,aAAa,CAACS,UAAD,CAAxC;;AAEA,IAAIX,OAAJ,EAAa;AACXY,EAAAA,kBAAkB,CAACC,WAAnB,GAAiC,oBAAjC;AACD;;AAED,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOX,UAAU,CAACS,kBAAD,CAAjB;AACD;AAOD,OAAO,SAASG,mBAAT,CAA6BC,KAA7B,EAA8D;AACnE,MAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAW,EAAEC;AAAzB,MAA6CH,KAAnD;AACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAqB,IAArB,CAAhC;AAEA,MAAMiB,OAAO,GAAGlB,OAAO,CAAC,MAAM;AAAA;;AAC5B,QAAMmB,GAAG,GAAGH,IAAH,oBAAGA,IAAI,CAAEI,aAAlB;AACA,QAAMC,GAAG,GAAGL,IAAH,oBAAGA,IAAI,CAAEI,aAAN,CAAoBE,WAAhC;AACA,QAAMC,OAAO,GAAGJ,GAAG,GAAG;AAAEb,MAAAA,QAAQ,EAAEa,GAAZ;AAAiBd,MAAAA,MAAM,EAAEgB;AAAzB,KAAH,GAAoCG,SAAvD;AACA,QAAMC,GAAG,WAAGV,eAAH,WAAGA,eAAH,GAAsBQ,OAAtB,mBAAiChB,UAA1C;AACA,WAAOkB,GAAP;AACD,GANsB,EAMpB,CAACT,IAAD,EAAOD,eAAP,CANoB,CAAvB;AAQA,MAAMW,aAAa,GAAG,CAACV,IAAD,IAAS,CAACD,eAAhC;AAEA,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEG;AAApC,KACGL,QADH,EAEGa,aAAa,iBACZ;AACE,IAAA,GAAG,EAAGC,EAAD,IAAQ;AACX,UAAIA,EAAJ,EAAQV,OAAO,CAACU,EAAD,CAAP;AACT;AAHH,IAHJ,CADF;AAYD;;AAED,IAAI/B,OAAJ,EAAa;AACXe,EAAAA,mBAAmB,CAACF,WAApB,GAAkC,qBAAlC;AACD","sourcesContent":["import { isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { createContext, useContext, useMemo, useState } from \"react\"\nimport { ssrDocument } from \"./mock-document\"\nimport { ssrWindow } from \"./mock-window\"\n\ninterface Environment {\n  window: Window\n  document: Document\n}\n\nconst mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument,\n}\n\nconst defaultEnv: Environment = isBrowser ? { window, document } : mockEnv\n\nconst EnvironmentContext = createContext(defaultEnv)\n\nif (__DEV__) {\n  EnvironmentContext.displayName = \"EnvironmentContext\"\n}\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp } = props\n  const [node, setNode] = useState<HTMLElement | null>(null)\n\n  const context = useMemo(() => {\n    const doc = node?.ownerDocument\n    const win = node?.ownerDocument.defaultView\n    const nodeEnv = doc ? { document: doc, window: win } : undefined\n    const env = environmentProp ?? nodeEnv ?? defaultEnv\n    return env as Environment\n  }, [node, environmentProp])\n\n  const showEnvGetter = !node && !environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n      {showEnvGetter && (\n        <span\n          ref={(el) => {\n            if (el) setNode(el)\n          }}\n        />\n      )}\n    </EnvironmentContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  EnvironmentProvider.displayName = \"EnvironmentProvider\"\n}\n"],"file":"env.js"}