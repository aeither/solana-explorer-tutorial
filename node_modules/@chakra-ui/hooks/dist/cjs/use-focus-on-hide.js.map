{"version":3,"sources":["../../src/use-focus-on-hide.ts"],"names":["preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocusProp","shouldFocus","visible","focusRef","nextTick"],"mappings":";;;;;AAAA;;AAQA;;AAQA,SAASA,kBAAT,CAA4BC,YAA5B,EAAwE;AACtE,MAAMC,EAAE,GAAGD,YAAY,CAACE,OAAxB;AACA,MAAI,CAACD,EAAL,EAAS,OAAO,KAAP;AAET,MAAME,aAAa,GAAG,6BAAiBF,EAAjB,CAAtB;AAEA,MAAI,CAACE,aAAL,EAAoB,OAAO,KAAP;AACpB,MAAI,qBAASF,EAAT,EAAaE,aAAb,CAAJ,EAAiC,OAAO,KAAP;AACjC,MAAI,uBAAWA,aAAX,CAAJ,EAA+B,OAAO,IAAP;AAE/B,SAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,cAAT,CACLJ,YADK,EAELK,OAFK,EAGL;AAAA,MACqBC,eADrB,GAC4DD,OAD5D,CACQE,WADR;AAAA,MACsCC,OADtC,GAC4DH,OAD5D,CACsCG,OADtC;AAAA,MAC+CC,QAD/C,GAC4DJ,OAD5D,CAC+CI,QAD/C;AAGA,MAAMF,WAAW,GAAGD,eAAe,IAAI,CAACE,OAAxC;AAEA,wCAAgB,YAAM;AACpB,QAAI,CAACD,WAAL,EAAkB;;AAElB,QAAIR,kBAAkB,CAACC,YAAD,CAAtB,EAAsC;AACpC;AACD;;AAED,QAAMC,EAAE,GAAG,CAAAQ,QAAQ,QAAR,YAAAA,QAAQ,CAAEP,OAAV,KAAqBF,YAAY,CAACE,OAA7C;;AAEA,QAAID,EAAJ,EAAQ;AACN,wBAAMA,EAAN,EAAU;AAAES,QAAAA,QAAQ,EAAE;AAAZ,OAAV;AACD;AACF,GAZD,EAYG,CAACH,WAAD,EAAcP,YAAd,EAA4BS,QAA5B,CAZH;AAaD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"],"file":"use-focus-on-hide.js"}