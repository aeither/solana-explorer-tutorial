{"ast":null,"code":"var snap = function snap(points) {\n  if (typeof points === 'number') {\n    return function (v) {\n      return Math.round(v / points) * points;\n    };\n  } else {\n    var i_1 = 0;\n    var numPoints_1 = points.length;\n    return function (v) {\n      var lastDistance = Math.abs(points[0] - v);\n\n      for (i_1 = 1; i_1 < numPoints_1; i_1++) {\n        var point = points[i_1];\n        var distance = Math.abs(point - v);\n        if (distance === 0) return point;\n        if (distance > lastDistance) return points[i_1 - 1];\n        if (i_1 === numPoints_1 - 1) return point;\n        lastDistance = distance;\n      }\n    };\n  }\n};\n\nexport { snap };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/popmotion/dist/es/utils/snap.js"],"names":["snap","points","v","Math","round","i_1","numPoints_1","length","lastDistance","abs","point","distance"],"mappings":"AAAA,IAAIA,IAAI,GAAG,SAAPA,IAAO,CAAUC,MAAV,EAAkB;AACzB,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,WAAO,UAAUC,CAAV,EAAa;AAAE,aAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAGD,MAAf,IAAyBA,MAAhC;AAAyC,KAA/D;AACH,GAFD,MAGK;AACD,QAAII,GAAG,GAAG,CAAV;AACA,QAAIC,WAAW,GAAGL,MAAM,CAACM,MAAzB;AACA,WAAO,UAAUL,CAAV,EAAa;AAChB,UAAIM,YAAY,GAAGL,IAAI,CAACM,GAAL,CAASR,MAAM,CAAC,CAAD,CAAN,GAAYC,CAArB,CAAnB;;AACA,WAAKG,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAGC,WAApB,EAAiCD,GAAG,EAApC,EAAwC;AACpC,YAAIK,KAAK,GAAGT,MAAM,CAACI,GAAD,CAAlB;AACA,YAAIM,QAAQ,GAAGR,IAAI,CAACM,GAAL,CAASC,KAAK,GAAGR,CAAjB,CAAf;AACA,YAAIS,QAAQ,KAAK,CAAjB,EACI,OAAOD,KAAP;AACJ,YAAIC,QAAQ,GAAGH,YAAf,EACI,OAAOP,MAAM,CAACI,GAAG,GAAG,CAAP,CAAb;AACJ,YAAIA,GAAG,KAAKC,WAAW,GAAG,CAA1B,EACI,OAAOI,KAAP;AACJF,QAAAA,YAAY,GAAGG,QAAf;AACH;AACJ,KAbD;AAcH;AACJ,CAtBD;;AAwBA,SAASX,IAAT","sourcesContent":["var snap = function (points) {\n    if (typeof points === 'number') {\n        return function (v) { return Math.round(v / points) * points; };\n    }\n    else {\n        var i_1 = 0;\n        var numPoints_1 = points.length;\n        return function (v) {\n            var lastDistance = Math.abs(points[0] - v);\n            for (i_1 = 1; i_1 < numPoints_1; i_1++) {\n                var point = points[i_1];\n                var distance = Math.abs(point - v);\n                if (distance === 0)\n                    return point;\n                if (distance > lastDistance)\n                    return points[i_1 - 1];\n                if (i_1 === numPoints_1 - 1)\n                    return point;\n                lastDistance = distance;\n            }\n        };\n    }\n};\n\nexport { snap };\n"]},"metadata":{},"sourceType":"module"}