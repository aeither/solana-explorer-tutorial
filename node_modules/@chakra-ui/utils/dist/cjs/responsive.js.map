{"version":3,"sources":["../../src/responsive.ts"],"names":["breakpoints","Object","freeze","mapResponsive","prop","mapper","map","item","reduce","result","key","objectToArrayNotation","obj","bps","br","pop","arrayToObjectNotation","values","forEach","value","index","isResponsiveObjectLike","keys","length","every","includes","isCustomBreakpoint","maybeBreakpoint","Number","isNaN"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGO,IAAMA,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,CACvC,MADuC,EAEvC,IAFuC,EAGvC,IAHuC,EAIvC,IAJuC,EAKvC,IALuC,EAMvC,KANuC,CAAd,CAApB;;;AASA,SAASC,aAAT,CAAuBC,IAAvB,EAAkCC,MAAlC,EAA6D;AAClE,MAAI,wBAAQD,IAAR,CAAJ,EAAmB;AACjB,WAAOA,IAAI,CAACE,GAAL,CAAS,UAACC,IAAD,EAAU;AACxB,UAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD;;AACD,aAAOF,MAAM,CAACE,IAAD,CAAb;AACD,KALM,CAAP;AAMD;;AAED,MAAI,yBAASH,IAAT,CAAJ,EAAoB;AAClB,WAAO,wBAAWA,IAAX,EAAiBI,MAAjB,CAAwB,UAACC,MAAD,EAAeC,GAAf,EAAuB;AACpDD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcL,MAAM,CAACD,IAAI,CAACM,GAAD,CAAL,CAApB;AACA,aAAOD,MAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAED,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAOC,MAAM,CAACD,IAAD,CAAb;AACD;;AAED,SAAO,IAAP;AACD;;AAEM,SAASO,qBAAT,CAA+BC,GAA/B,EAA0CC,GAA1C,EAA6D;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AAClE,MAAMS,MAAM,GAAGI,GAAG,CAACP,GAAJ,CAAQ,UAACQ,EAAD;AAAA;;AAAA,sBAAQF,GAAG,CAACE,EAAD,CAAX,sBAAmB,IAAnB;AAAA,GAAR,CAAf;;AACA,SAAO,wBAAYL,MAAZ,MAAwB,IAA/B,EAAqC;AACnCA,IAAAA,MAAM,CAACM,GAAP;AACD;;AACD,SAAON,MAAP;AACD;;AAEM,SAASO,qBAAT,CAA+BC,MAA/B,EAA8CJ,GAA9C,EAAiE;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AACtE,MAAMS,MAAM,GAAG,EAAf;AACAQ,EAAAA,MAAM,CAACC,OAAP,CAAe,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC/B,QAAMV,GAAG,GAAGG,GAAG,CAACO,KAAD,CAAf;AACA,QAAID,KAAK,IAAI,IAAb,EAAmB;AACnBV,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcS,KAAd;AACD,GAJD;AAKA,SAAOV,MAAP;AACD;;AAEM,SAASY,sBAAT,CAAgCT,GAAhC,EAA2CC,GAA3C,EAA8D;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AACnE,MAAMsB,IAAI,GAAGrB,MAAM,CAACqB,IAAP,CAAYV,GAAZ,CAAb;AACA,SAAOU,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAACE,KAAL,CAAW,UAACd,GAAD;AAAA,WAASG,GAAG,CAACY,QAAJ,CAAaf,GAAb,CAAT;AAAA,GAAX,CAA1B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMgB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,eAAD;AAAA,SAChCC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACD,eAAD,CAAnB,CADgC;AAAA,CAA3B","sourcesContent":["import { getLastItem } from \"./array\"\nimport { isArray, isObject } from \"./assertion\"\nimport { objectKeys } from \"./object\"\nimport { Dict } from \"./types\"\n\nexport const breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\",\n])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\nexport const isCustomBreakpoint = (maybeBreakpoint: string) =>\n  Number.isNaN(Number(maybeBreakpoint))\n"],"file":"responsive.js"}