{"version":3,"sources":["../../../src/utils/prop-config.ts"],"names":["toConfig","scale","transform","property","result","getRtl","rtl","ltr","theme","direction","logical","options","compose"],"mappings":";;;;;;AAEA;;AAsCO,SAASA,QAAT,CAAkBC,KAAlB,EAAqCC,SAArC,EAA4D;AACjE,SAAO,UAAoBC,QAApB,EAA0C;AAC/C,QAAMC,MAAkB,GAAG;AAAED,MAAAA,QAAQ,EAARA,QAAF;AAAYF,MAAAA,KAAK,EAALA;AAAZ,KAA3B;AACAG,IAAAA,MAAM,CAACF,SAAP,GAAmB,sCAAgB;AACjCD,MAAAA,KAAK,EAALA,KADiC;AAEjCC,MAAAA,SAAS,EAATA;AAFiC,KAAhB,CAAnB;AAIA,WAAOE,MAAP;AACD,GAPD;AAQD;;AAQD,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGC,GAAH,QAAGA,GAAH;AAAA,MAAQC,GAAR,QAAQA,GAAR;AAAA,SAAoC,UAACC,KAAD;AAAA,WACjDA,KAAK,CAACC,SAAN,KAAoB,KAApB,GAA4BH,GAA5B,GAAkCC,GADe;AAAA,GAApC;AAAA,CAAf;;AAGO,SAASG,OAAT,CAAiBC,OAAjB,EAA4C;AAAA,MACzCR,QADyC,GACVQ,OADU,CACzCR,QADyC;AAAA,MAC/BF,KAD+B,GACVU,OADU,CAC/BV,KAD+B;AAAA,MACxBC,SADwB,GACVS,OADU,CACxBT,SADwB;AAEjD,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,QAAQ,EAAEE,MAAM,CAACF,QAAD,CAFX;AAGLD,IAAAA,SAAS,EAAED,KAAK,GACZ,sCAAgB;AACdA,MAAAA,KAAK,EAALA,KADc;AAEdW,MAAAA,OAAO,EAAEV;AAFK,KAAhB,CADY,GAKZA;AARC,GAAP;AAUD","sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { createTransform } from \"./create-transform\"\nimport { ThemeScale } from \"../create-theme-vars\"\nimport type { CssTheme, Transform } from \"./types\"\n\ntype CSSProp = keyof CSS.Properties | (string & {})\ntype MaybeArray<T> = T | T[]\ntype MaybeThemeFunction<T> = T | ((theme: CssTheme) => T)\ntype StringUnion<T> = T | (string & {})\n\nexport interface PropConfig {\n  /**\n   * This is useful for props that need to leverage CSS variables\n   * Static styles to append to the computed styles.\n   *\n   * It does not get replicated if value is responsive or styles are nested.\n   */\n  static?: Dict\n  /**\n   * The theme scale this maps to\n   */\n  scale?: ThemeScale\n  /**\n   * Css property or Css variable the prop maps to\n   */\n  property?: MaybeThemeFunction<MaybeArray<StringUnion<CSSProp>>>\n  /**\n   * Function to transform the value passed\n   */\n  transform?: Transform\n  /**\n   * Useful for `layerStyle`, tex`tStyles and `apply` where their\n   * transform function returns theme aware styles\n   */\n  processResult?: boolean\n}\n\nexport type Config = Record<string, PropConfig | true>\n\nexport function toConfig(scale: ThemeScale, transform?: Transform) {\n  return <T extends CSSProp>(property: T | T[]) => {\n    const result: PropConfig = { property, scale }\n    result.transform = createTransform({\n      scale,\n      transform,\n    })\n    return result\n  }\n}\n\ninterface Opts {\n  scale?: ThemeScale\n  property: { ltr: MaybeArray<CSSProp>; rtl: MaybeArray<CSSProp> }\n  transform?: Transform\n}\n\nconst getRtl = ({ rtl, ltr }: Opts[\"property\"]) => (theme: Dict) =>\n  theme.direction === \"rtl\" ? rtl : ltr\n\nexport function logical(options: Opts): PropConfig {\n  const { property, scale, transform } = options\n  return {\n    scale,\n    property: getRtl(property),\n    transform: scale\n      ? createTransform({\n          scale,\n          compose: transform,\n        })\n      : transform,\n  }\n}\n"],"file":"prop-config.js"}