{"version":3,"sources":["../../src/context.ts"],"names":["React","createContext","options","strict","errorMessage","name","Context","undefined","displayName","useContext","context","error","Error","captureStackTrace","Provider"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAoBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAoCC,OAApC,EAAwE;AAAA,MAApCA,OAAoC;AAApCA,IAAAA,OAAoC,GAAJ,EAAI;AAAA;;AAC7E,MAAM;AACJC,IAAAA,MAAM,GAAG,IADL;AAEJC,IAAAA,YAAY,GAAG,4FAFX;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;AAMA,MAAMI,OAAO,gBAAGN,KAAK,CAACC,aAAN,CAA6CM,SAA7C,CAAhB;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsBH,IAAtB;;AAEA,WAASI,UAAT,GAAsB;AACpB,QAAMC,OAAO,GAAGV,KAAK,CAACS,UAAN,CAAiBH,OAAjB,CAAhB;;AAEA,QAAI,CAACI,OAAD,IAAYP,MAAhB,EAAwB;AACtB,UAAMQ,KAAK,GAAG,IAAIC,KAAJ,CAAUR,YAAV,CAAd;AACAO,MAAAA,KAAK,CAACN,IAAN,GAAa,cAAb;AACAO,MAAAA,KAAK,CAACC,iBAAN,oBAAAD,KAAK,CAACC,iBAAN,CAA0BF,KAA1B,EAAiCF,UAAjC;AACA,YAAME,KAAN;AACD;;AAED,WAAOD,OAAP;AACD;;AAED,SAAO,CACLJ,OAAO,CAACQ,QADH,EAELL,UAFK,EAGLH,OAHK,CAAP;AAKD","sourcesContent":["import * as React from \"react\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(errorMessage)\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n"],"file":"context.js"}