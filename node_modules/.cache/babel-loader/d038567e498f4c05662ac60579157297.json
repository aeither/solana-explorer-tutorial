{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, filterUndefined, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { baseStyle } from \"./avatar\";\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\n\nexport var AvatarGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      borderColor = _omitThemingProps.borderColor,\n      max = _omitThemingProps.max,\n      _omitThemingProps$spa = _omitThemingProps.spacing,\n      spacing = _omitThemingProps$spa === void 0 ? \"-0.75rem\" : _omitThemingProps$spa,\n      _omitThemingProps$bor = _omitThemingProps.borderRadius,\n      borderRadius = _omitThemingProps$bor === void 0 ? \"full\" : _omitThemingProps$bor,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"borderColor\", \"max\", \"spacing\", \"borderRadius\"]);\n\n  var validChildren = getValidChildren(children);\n  /**\n   * get the avatars within the max\n   */\n\n  var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  /**\n   * get the remaining avatar count\n   */\n\n  var excess = max != null && validChildren.length - max;\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n\n  var reversedChildren = childrenWithinMax.reverse();\n  var clones = reversedChildren.map(function (child, index) {\n    var _child$props$borderCo;\n\n    var isFirstAvatar = index === 0;\n    var childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: (_child$props$borderCo = child.props.borderColor) != null ? _child$props$borderCo : borderColor,\n      showBorder: true\n    };\n    return /*#__PURE__*/React.cloneElement(child, filterUndefined(childProps));\n  });\n  var groupStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\"\n  };\n\n  var excessStyles = _extends({\n    borderRadius: borderRadius,\n    marginStart: spacing\n  }, baseStyle, styles.excessLabel);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles\n  }, rest, {\n    className: cx(\"chakra-avatar__group\", props.className)\n  }), excess > 0 && /*#__PURE__*/React.createElement(chakra.span, {\n    className: \"chakra-avatar__excess\",\n    __css: excessStyles\n  }, \"+\" + excess), clones);\n});\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\";\n}","map":{"version":3,"sources":["../../src/avatar-group.tsx"],"names":["AvatarGroup","forwardRef","styles","useMultiStyleConfig","spacing","borderRadius","omitThemingProps","validChildren","getValidChildren","childrenWithinMax","max","excess","reversedChildren","clones","isFirstAvatar","index","childProps","marginEnd","size","props","borderColor","child","showBorder","React","filterUndefined","groupStyles","display","alignItems","justifyContent","flexDirection","excessStyles","marginStart","cx"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, filterUndefined, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { baseStyle } from \"./avatar\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  /**\n   * get the avatars within the max\n   */\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren\n\n  /**\n   * get the remaining avatar count\n   */\n  const excess = max != null && validChildren.length - max\n\n  /**\n   * Reversing the children is a great way to avoid using zIndex\n   * to overlap the avatars\n   */\n  const reversedChildren = childrenWithinMax.reverse()\n\n  const clones = reversedChildren.map((child, index) => {\n    const isFirstAvatar = index === 0\n\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: child.props.borderColor ?? borderColor,\n      showBorder: true,\n    }\n\n    return React.cloneElement(child, filterUndefined(childProps))\n  })\n\n  const groupStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n  }\n\n  const excessStyles: SystemStyleObject = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      role=\"group\"\n      __css={groupStyles}\n      {...rest}\n      className={cx(\"chakra-avatar__group\", props.className)}\n    >\n      {excess > 0 && (\n        <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n          {`+${excess}`}\n        </chakra.span>\n      )}\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  AvatarGroup.displayName = \"AvatarGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}