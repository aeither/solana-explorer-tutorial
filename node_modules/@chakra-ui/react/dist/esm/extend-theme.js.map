{"version":3,"sources":["../../src/extend-theme.ts"],"names":["defaultTheme","isChakraTheme","isFunction","mergeWith","pipe","extendTheme","extensions","overrides","baseTheme","length","slice","map","extension","prevTheme","mergeThemeOverride","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"mappings":"AAAA,OAAOA,YAAP,IAEEC,aAFF,QAIO,kBAJP;AAKA,SAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,QAMO,kBANP;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASC,WAAT,GAEC;AAAA,oCADHC,UACG;AADHA,IAAAA,UACG;AAAA;;AACN,MAAIC,SAAS,GAAG,CAAC,GAAGD,UAAJ,CAAhB;AACA,MAAIE,SAAS,GAAGF,UAAU,CAACA,UAAU,CAACG,MAAX,GAAoB,CAArB,CAA1B;;AAEA,MACER,aAAa,CAACO,SAAD,CAAb,IACA;AACA;AACAD,EAAAA,SAAS,CAACE,MAAV,GAAmB,CAJrB,EAKE;AACAF,IAAAA,SAAS,GAAGA,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmBH,SAAS,CAACE,MAAV,GAAmB,CAAtC,CAAZ;AACD,GAPD,MAOO;AACLD,IAAAA,SAAS,GAAGR,YAAZ;AACD;;AAED,SAAOI,IAAI,CACT,GAAGG,SAAS,CAACI,GAAV,CAAeC,SAAD,IAAgBC,SAAD,IAC9BX,UAAU,CAACU,SAAD,CAAV,GACKA,SAAD,CAAmBC,SAAnB,CADJ,GAEIC,kBAAkB,CAACD,SAAD,EAAYD,SAAZ,CAHrB,CADM,CAAJ,CAMLJ,SANK,CAAP;AAOD;AAED,OAAO,SAASM,kBAAT,GAAsD;AAAA,qCAAvBP,SAAuB;AAAvBA,IAAAA,SAAuB;AAAA;;AAC3D,SAAOJ,SAAS,CAAC,EAAD,EAAK,GAAGI,SAAR,EAAmBQ,oBAAnB,CAAhB;AACD;;AAED,SAASA,oBAAT,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;AACA,MACE,CAACjB,UAAU,CAACc,MAAD,CAAV,IAAsBd,UAAU,CAACe,QAAD,CAAjC,KACAG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;AACA,WAAO,YAAwB;AAC7B,UAAMM,WAAW,GAAGtB,UAAU,CAACc,MAAD,CAAV,GAAqBA,MAAM,CAAC,YAAD,CAA3B,GAAuCA,MAA3D;AAEA,UAAMS,aAAa,GAAGvB,UAAU,CAACe,QAAD,CAAV,GAAuBA,QAAQ,CAAC,YAAD,CAA/B,GAA2CA,QAAjE;AAEA,aAAOd,SAAS,CAAC,EAAD,EAAKqB,WAAL,EAAkBC,aAAlB,EAAiCV,oBAAjC,CAAhB;AACD,KAND;AAOD,GAZD,CAcA;;;AACA,SAAOW,SAAP;AACD","sourcesContent":["import defaultTheme, {\n  ChakraTheme,\n  isChakraTheme,\n  Theme,\n} from \"@chakra-ui/theme\"\nimport {\n  AnyFunction,\n  Dict,\n  isFunction,\n  mergeWith,\n  pipe,\n} from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        DeepPartial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport declare type ThemeOverride<\n  BaseTheme = Theme\n> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict\n\nexport type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (\n  themeOverride: Override,\n) => Override\n\nexport type BaseThemeWithExtensions<\n  BaseTheme extends ChakraTheme,\n  Extensions extends readonly [...any]\n> = BaseTheme &\n  (Extensions extends [infer L, ...infer R]\n    ? L extends AnyFunction\n      ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R>\n      : L & BaseThemeWithExtensions<BaseTheme, R>\n    : Extensions)\n\n/**\n * NOTE: This got too complex to manage and it's not worth the extra complexity.\n * We'll re-evaluate this API in the future releases.\n *\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\n\nexport function extendTheme(\n  ...extensions: Array<Dict | ((theme: Dict) => Dict)>\n): Dict {\n  let overrides = [...extensions]\n  let baseTheme = extensions[extensions.length - 1]\n\n  if (\n    isChakraTheme(baseTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, baseTheme?)` was allowed\n    overrides.length > 1\n  ) {\n    overrides = overrides.slice(0, overrides.length - 1)\n  } else {\n    baseTheme = defaultTheme\n  }\n\n  return pipe(\n    ...overrides.map((extension) => (prevTheme: any) =>\n      isFunction(extension)\n        ? (extension as any)(prevTheme)\n        : mergeThemeOverride(prevTheme, extension),\n    ),\n  )(baseTheme)\n}\n\nexport function mergeThemeOverride(...overrides: any[]): any {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer)\n}\n\nfunction mergeThemeCustomizer(\n  source: unknown,\n  override: unknown,\n  key: string,\n  object: any,\n) {\n  if (\n    (isFunction(source) || isFunction(override)) &&\n    Object.prototype.hasOwnProperty.call(object, key)\n  ) {\n    return (...args: unknown[]) => {\n      const sourceValue = isFunction(source) ? source(...args) : source\n\n      const overrideValue = isFunction(override) ? override(...args) : override\n\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer)\n    }\n  }\n\n  // fallback to default behaviour\n  return undefined\n}\n"],"file":"extend-theme.js"}