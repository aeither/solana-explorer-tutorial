{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport * as React from \"react\";\nvar spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\n/**\n * Spinner is used to indicate the loading state of a page or a component,\n * It renders a `div` by default.\n *\n * @see Docs https://chakra-ui.com/spinner\n */\n\nexport var Spinner = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Spinner\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$lab = _omitThemingProps.label,\n      label = _omitThemingProps$lab === void 0 ? \"Loading...\" : _omitThemingProps$lab,\n      _omitThemingProps$thi = _omitThemingProps.thickness,\n      thickness = _omitThemingProps$thi === void 0 ? \"2px\" : _omitThemingProps$thi,\n      _omitThemingProps$spe = _omitThemingProps.speed,\n      speed = _omitThemingProps$spe === void 0 ? \"0.45s\" : _omitThemingProps$spe,\n      _omitThemingProps$emp = _omitThemingProps.emptyColor,\n      emptyColor = _omitThemingProps$emp === void 0 ? \"transparent\" : _omitThemingProps$emp,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"label\", \"thickness\", \"speed\", \"emptyColor\", \"className\"]);\n\n  var _className = cx(\"chakra-spinner\", className);\n\n  var spinnerStyles = _extends({\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: spin + \" \" + speed + \" linear infinite\"\n  }, styles);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: spinnerStyles,\n    className: _className\n  }, rest), label && /*#__PURE__*/React.createElement(VisuallyHidden, null, label));\n});\n\nif (__DEV__) {\n  Spinner.displayName = \"Spinner\";\n}","map":{"version":3,"sources":["../../src/spinner.tsx"],"names":["spin","keyframes","transform","Spinner","forwardRef","styles","useStyleConfig","label","thickness","speed","emptyColor","className","omitThemingProps","_className","cx","spinnerStyles","display","borderColor","borderStyle","borderRadius","borderWidth","borderBottomColor","borderLeftColor","animation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AASA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,SAAA,cAAA,QAAA,4BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAMA,IAAI,GAAGC,SAAS,CAAC;AACrB,QAAM;AACJC,IAAAA,SAAS,EAAE;AADP,GADe;AAIrB,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJa,CAAD,CAAtB;AA8CA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAA,aAAGC,UAAU,CAAsB,UAAA,KAAA,EAAA,GAAA,EAAgB;AACrE,MAAMC,MAAM,GAAGC,cAAc,CAAA,SAAA,EAA7B,KAA6B,CAA7B;;AAEA,MAAA,iBAAA,GAOIM,gBAAgB,CAPpB,KAOoB,CAPpB;AAAA,8BAAA,iBAAA,CACEL,KADF;AAAA,MACEA,KADF,sCAAM,YAAN;AAAA,8BAAA,iBAAA,CAEEC,SAFF;AAAA,MAEEA,SAFF,sCAAM,KAAN;AAAA,8BAAA,iBAAA,CAGEC,KAHF;AAAA,MAGEA,KAHF,sCAAM,OAAN;AAAA,8BAAA,iBAAA,CAIEC,UAJF;AAAA,MAIEA,UAJF,sCAAM,aAAN;AAAA,MAKEC,SALF,GAAA,iBAAA,CAKEA,SALF;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,CAAA,CAAA;;AASA,MAAME,UAAU,GAAGC,EAAE,CAAA,gBAAA,EAArB,SAAqB,CAArB;;AAEA,MAAMC,aAAa,GAAA,QAAA,CAAA;AACjBC,IAAAA,OAAO,EADU,cAAA;AAEjBC,IAAAA,WAAW,EAFM,cAAA;AAGjBC,IAAAA,WAAW,EAHM,OAAA;AAIjBC,IAAAA,YAAY,EAJK,SAAA;AAKjBC,IAAAA,WAAW,EALM,SAAA;AAMjBC,IAAAA,iBAAiB,EANA,UAAA;AAOjBC,IAAAA,eAAe,EAPE,UAAA;AAQjBC,IAAAA,SAAS,EAAKvB,IAAL,GAAA,GAAKA,GAAL,KAAKA,GAAL;AARQ,GAAA,EAAnB,MAAmB,CAAnB;;AAYA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,KAAK,EAFP,aAAA;AAGE,IAAA,SAAS,EAAEa;AAHb,GAAA,EAAA,IAAA,CAAA,EAMGN,KAAK,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,IAAA,EAPd,KAOc,CANZ,CADF;AA1BK,CAA0B,CAA1B;;AAsCP,IAAA,OAAA,EAAa;AACXJ,EAAAA,OAAO,CAAPA,WAAAA,GAAAA,SAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport * as React from \"react\"\n\nconst spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\ninterface SpinnerOptions {\n  /**\n   * The color of the empty area in the spinner\n   */\n  emptyColor?: string\n  /**\n   * The color of the spinner\n   */\n  color?: string\n  /**\n   * The thickness of the spinner\n   * @example\n   * ```jsx\n   * <Spinner thickness=\"4px\"/>\n   * ```\n   */\n  thickness?: string\n  /**\n   * The speed of the spinner.\n   * @example\n   * ```jsx\n   * <Spinner speed=\"0.2s\"/>\n   * ```\n   */\n  speed?: string\n  /**\n   * For accessibility, it is important to add a fallback loading text.\n   * This text will be visible to screen readers.\n   */\n  label?: string\n}\n\nexport interface SpinnerProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof SpinnerOptions>,\n    SpinnerOptions,\n    ThemingProps<\"Spinner\"> {}\n\n/**\n * Spinner is used to indicate the loading state of a page or a component,\n * It renders a `div` by default.\n *\n * @see Docs https://chakra-ui.com/spinner\n */\nexport const Spinner = forwardRef<SpinnerProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props)\n\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-spinner\", className)\n\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={spinnerStyles}\n      className={_className}\n      {...rest}\n    >\n      {label && <VisuallyHidden>{label}</VisuallyHidden>}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Spinner.displayName = \"Spinner\"\n}\n"]},"metadata":{},"sourceType":"module"}