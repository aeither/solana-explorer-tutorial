{"version":3,"sources":["../../src/env.tsx"],"names":["mockEnv","window","ssrWindow","document","ssrDocument","defaultEnv","isBrowser","EnvironmentContext","__DEV__","displayName","useEnvironment","EnvironmentProvider","props","children","environmentProp","environment","node","setNode","context","doc","ownerDocument","win","defaultView","nodeEnv","undefined","env","showEnvGetter","el"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAOA,IAAMA,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEC,qBADM;AAEdC,EAAAA,QAAQ,EAAEC;AAFI,CAAhB;AAKA,IAAMC,UAAuB,GAAGC,mBAAY;AAAEL,EAAAA,MAAM,EAANA,MAAF;AAAUE,EAAAA,QAAQ,EAARA;AAAV,CAAZ,GAAmCH,OAAnE;AAEA,IAAMO,kBAAkB,gBAAG,0BAAcF,UAAd,CAA3B;;AAEA,IAAIG,cAAJ,EAAa;AACXD,EAAAA,kBAAkB,CAACE,WAAnB,GAAiC,oBAAjC;AACD;;AAEM,SAASC,cAAT,GAA0B;AAC/B,SAAO,uBAAWH,kBAAX,CAAP;AACD;;AAOM,SAASI,mBAAT,CAA6BC,KAA7B,EAA8D;AAAA,MAC3DC,QAD2D,GAChBD,KADgB,CAC3DC,QAD2D;AAAA,MACpCC,eADoC,GAChBF,KADgB,CACjDG,WADiD;;AAAA,kBAE3C,qBAA6B,IAA7B,CAF2C;AAAA,MAE5DC,IAF4D;AAAA,MAEtDC,OAFsD;;AAInE,MAAMC,OAAO,GAAG,oBAAQ,YAAM;AAAA;;AAC5B,QAAMC,GAAG,GAAGH,IAAH,oBAAGA,IAAI,CAAEI,aAAlB;AACA,QAAMC,GAAG,GAAGL,IAAH,oBAAGA,IAAI,CAAEI,aAAN,CAAoBE,WAAhC;AACA,QAAMC,OAAO,GAAGJ,GAAG,GAAG;AAAEhB,MAAAA,QAAQ,EAAEgB,GAAZ;AAAiBlB,MAAAA,MAAM,EAAEoB;AAAzB,KAAH,GAAoCG,SAAvD;AACA,QAAMC,GAAG,WAAGX,eAAH,WAAGA,eAAH,GAAsBS,OAAtB,mBAAiClB,UAA1C;AACA,WAAOoB,GAAP;AACD,GANe,EAMb,CAACT,IAAD,EAAOF,eAAP,CANa,CAAhB;AAQA,MAAMY,aAAa,GAAG,CAACV,IAAD,IAAS,CAACF,eAAhC;AAEA,sBACE,gCAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEI;AAApC,KACGL,QADH,EAEGa,aAAa,iBACZ;AACE,IAAA,GAAG,EAAE,aAACC,EAAD,EAAQ;AACX,UAAIA,EAAJ,EAAQV,OAAO,CAACU,EAAD,CAAP;AACT;AAHH,IAHJ,CADF;AAYD;;AAED,IAAInB,cAAJ,EAAa;AACXG,EAAAA,mBAAmB,CAACF,WAApB,GAAkC,qBAAlC;AACD","sourcesContent":["import { isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { createContext, useContext, useMemo, useState } from \"react\"\nimport { ssrDocument } from \"./mock-document\"\nimport { ssrWindow } from \"./mock-window\"\n\ninterface Environment {\n  window: Window\n  document: Document\n}\n\nconst mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument,\n}\n\nconst defaultEnv: Environment = isBrowser ? { window, document } : mockEnv\n\nconst EnvironmentContext = createContext(defaultEnv)\n\nif (__DEV__) {\n  EnvironmentContext.displayName = \"EnvironmentContext\"\n}\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp } = props\n  const [node, setNode] = useState<HTMLElement | null>(null)\n\n  const context = useMemo(() => {\n    const doc = node?.ownerDocument\n    const win = node?.ownerDocument.defaultView\n    const nodeEnv = doc ? { document: doc, window: win } : undefined\n    const env = environmentProp ?? nodeEnv ?? defaultEnv\n    return env as Environment\n  }, [node, environmentProp])\n\n  const showEnvGetter = !node && !environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n      {showEnvGetter && (\n        <span\n          ref={(el) => {\n            if (el) setNode(el)\n          }}\n        />\n      )}\n    </EnvironmentContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  EnvironmentProvider.displayName = \"EnvironmentProvider\"\n}\n"],"file":"env.js"}