{"version":3,"sources":["../../src/use-modal.ts"],"names":["useIds","callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useRef","useState","manager","useModalManager","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","ref","role","tabIndex","undefined","onClick","isTopModal","getDialogContainerProps","shouldHide","undo"],"mappings":"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","sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { hideOthers, Undo } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!manager.isTopModal(dialogRef)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"],"file":"use-modal.js"}