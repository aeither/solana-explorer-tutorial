{"ast":null,"code":"import * as React from \"react\";\nimport ReactFocusLock from \"react-focus-lock\";\nimport { __DEV__, getAllFocusable, focus } from \"@chakra-ui/utils\";\nexport var FocusLock = function FocusLock(props) {\n  var initialFocusRef = props.initialFocusRef,\n      finalFocusRef = props.finalFocusRef,\n      contentRef = props.contentRef,\n      restoreFocus = props.restoreFocus,\n      children = props.children,\n      isDisabled = props.isDisabled,\n      autoFocus = props.autoFocus,\n      persistentFocus = props.persistentFocus,\n      lockFocusAcrossFrames = props.lockFocusAcrossFrames;\n  var onActivation = React.useCallback(function () {\n    if (initialFocusRef != null && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef != null && contentRef.current) {\n      var focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        focus(contentRef.current, {\n          nextTick: true\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  var onDeactivation = React.useCallback(function () {\n    var _finalFocusRef$curren;\n\n    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();\n  }, [finalFocusRef]);\n  var returnFocus = restoreFocus && !finalFocusRef;\n  return /*#__PURE__*/React.createElement(ReactFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus: persistentFocus,\n    autoFocus: autoFocus,\n    disabled: isDisabled,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    returnFocus: returnFocus\n  }, children);\n};\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\";\n}\n\nexport default FocusLock;","map":{"version":3,"sources":["../../src/index.tsx"],"names":["FocusLock","props","lockFocusAcrossFrames","onActivation","initialFocusRef","contentRef","focusables","getAllFocusable","focus","nextTick","onDeactivation","finalFocusRef","returnFocus","restoreFocus"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,SAAA,OAAA,EAAA,eAAA,EAAA,KAAA,QAAA,kBAAA;AAoDA,OAAO,IAAMA,SAAmC,GAAIC,SAAvCD,SAAuCC,CAAAA,KAAD,EAAW;AAC5D,MAAM,eAAN,GAAA,KAAA,CAAM,eAAN;AAAA,MAAM,aAAN,GAAA,KAAA,CAAM,aAAN;AAAA,MAAM,UAAN,GAAA,KAAA,CAAM,UAAN;AAAA,MAAM,YAAN,GAAA,KAAA,CAAM,YAAN;AAAA,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAM,UAAN,GAAA,KAAA,CAAM,UAAN;AAAA,MAAM,SAAN,GAAA,KAAA,CAAM,SAAN;AAAA,MAAM,eAAN,GAAA,KAAA,CAAM,eAAN;AAAA,MASEC,qBATF,GAAA,KAAA,CASEA,qBATF;AAYA,MAAMC,YAAY,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC3C,QAAIC,eAAJ,IAAA,IAAIA,IAAAA,eAAe,CAAnB,OAAA,EAA8B;AAC5BA,MAAAA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA;AADF,KAAA,MAEO,IAAIC,UAAJ,IAAA,IAAIA,IAAAA,UAAU,CAAd,OAAA,EAAyB;AAC9B,UAAMC,UAAU,GAAGC,eAAe,CAACF,UAAU,CAA7C,OAAkC,CAAlC;;AACA,UAAIC,UAAU,CAAVA,MAAAA,KAAJ,CAAA,EAA6B;AAC3BE,QAAAA,KAAK,CAACH,UAAU,CAAX,OAAA,EAAqB;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAArB,CAALD;AACD;AACF;AARkB,GAAA,EASlB,CAAA,eAAA,EATH,UASG,CATkB,CAArB;AAWA,MAAME,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAAA,QAAA,qBAAA;;AAC7CC,IAAAA,aAAa,IAAbA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,qBAAAA,GAAAA,aAAa,CAAbA,OAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAAA,CAAAA,KAAAA,EAAAA;AADqB,GAAA,EAEpB,CAFH,aAEG,CAFoB,CAAvB;AAIA,MAAMC,WAAW,GAAGC,YAAY,IAAI,CAApC,aAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACE,IAAA,UAAU,EADZ,qBAAA;AAEE,IAAA,eAAe,EAFjB,eAAA;AAGE,IAAA,SAAS,EAHX,SAAA;AAIE,IAAA,QAAQ,EAJV,UAAA;AAKE,IAAA,YAAY,EALd,YAAA;AAME,IAAA,cAAc,EANhB,cAAA;AAOE,IAAA,WAAW,EAAED;AAPf,GAAA,EADF,QACE,CADF;AA9BK,CAAA;;AA6CP,IAAA,OAAA,EAAa;AACXZ,EAAAA,SAAS,CAATA,WAAAA,GAAAA,WAAAA;AACD;;AAED,eAAA,SAAA","sourcesContent":["import * as React from \"react\"\nimport ReactFocusLock from \"react-focus-lock\"\nimport {\n  __DEV__,\n  getAllFocusable,\n  focus,\n  FocusableElement,\n} from \"@chakra-ui/utils\"\n\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focuable element within the `children`\n   * will ne auto-focused once `FocusLock` mounts\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock.\n   * @default `false`\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = React.useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        focus(contentRef.current, { nextTick: true })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = React.useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <ReactFocusLock\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </ReactFocusLock>\n  )\n}\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\"\n}\n\nexport default FocusLock\n"]},"metadata":{},"sourceType":"module"}