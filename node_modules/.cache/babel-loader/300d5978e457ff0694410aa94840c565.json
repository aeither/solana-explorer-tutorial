{"ast":null,"code":"import { __read } from 'tslib';\nimport { useState } from 'react';\nimport { motionValue } from '../value/index.js';\nimport { useOnChange } from '../value/use-on-change.js'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nvar prefersReducedMotion;\n\nfunction initPrefersReducedMotion() {\n  prefersReducedMotion = motionValue(null);\n  if (typeof window === \"undefined\") return;\n\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    var setReducedMotionPreferences = function setReducedMotionPreferences() {\n      return prefersReducedMotion.set(motionMediaQuery_1.matches);\n    };\n\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.set(false);\n  }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\n\n\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !prefersReducedMotion && initPrefersReducedMotion();\n\n  var _a = __read(useState(prefersReducedMotion.get()), 2),\n      shouldReduceMotion = _a[0],\n      setShouldReduceMotion = _a[1];\n\n  useOnChange(prefersReducedMotion, setShouldReduceMotion);\n  return shouldReduceMotion;\n}\n\nexport { useReducedMotion };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/utils/use-reduced-motion.js"],"names":["__read","useState","motionValue","useOnChange","prefersReducedMotion","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","set","matches","addListener","useReducedMotion","_a","get","shouldReduceMotion","setShouldReduceMotion"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B,C,CAEA;;AACA,IAAIC,oBAAJ;;AACA,SAASC,wBAAT,GAAoC;AAChCD,EAAAA,oBAAoB,GAAGF,WAAW,CAAC,IAAD,CAAlC;AACA,MAAI,OAAOI,MAAP,KAAkB,WAAtB,EACI;;AACJ,MAAIA,MAAM,CAACC,UAAX,EAAuB;AACnB,QAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;AACA,QAAIE,2BAA2B,GAAG,SAA9BA,2BAA8B,GAAY;AAC1C,aAAOL,oBAAoB,CAACM,GAArB,CAAyBF,kBAAkB,CAACG,OAA5C,CAAP;AACH,KAFD;;AAGAH,IAAAA,kBAAkB,CAACI,WAAnB,CAA+BH,2BAA/B;AACAA,IAAAA,2BAA2B;AAC9B,GAPD,MAQK;AACDL,IAAAA,oBAAoB,CAACM,GAArB,CAAyB,KAAzB;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,gBAAT,GAA4B;AACxB;AACJ;AACA;AACI,GAACT,oBAAD,IAAyBC,wBAAwB,EAAjD;;AACA,MAAIS,EAAE,GAAGd,MAAM,CAACC,QAAQ,CAACG,oBAAoB,CAACW,GAArB,EAAD,CAAT,EAAuC,CAAvC,CAAf;AAAA,MAA0DC,kBAAkB,GAAGF,EAAE,CAAC,CAAD,CAAjF;AAAA,MAAsFG,qBAAqB,GAAGH,EAAE,CAAC,CAAD,CAAhH;;AACAX,EAAAA,WAAW,CAACC,oBAAD,EAAuBa,qBAAvB,CAAX;AACA,SAAOD,kBAAP;AACH;;AAED,SAASH,gBAAT","sourcesContent":["import { __read } from 'tslib';\nimport { useState } from 'react';\nimport { motionValue } from '../value/index.js';\nimport { useOnChange } from '../value/use-on-change.js';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion;\nfunction initPrefersReducedMotion() {\n    prefersReducedMotion = motionValue(null);\n    if (typeof window === \"undefined\")\n        return;\n    if (window.matchMedia) {\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n        var setReducedMotionPreferences = function () {\n            return prefersReducedMotion.set(motionMediaQuery_1.matches);\n        };\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.set(false);\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !prefersReducedMotion && initPrefersReducedMotion();\n    var _a = __read(useState(prefersReducedMotion.get()), 2), shouldReduceMotion = _a[0], setShouldReduceMotion = _a[1];\n    useOnChange(prefersReducedMotion, setShouldReduceMotion);\n    return shouldReduceMotion;\n}\n\nexport { useReducedMotion };\n"]},"metadata":{},"sourceType":"module"}