{"ast":null,"code":"import { getLastItem } from \"./array\";\nimport { isArray, isObject } from \"./assertion\";\nimport { objectKeys } from \"./object\";\nexport var breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]);\nexport function mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      return mapper(item);\n    });\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce(function (result, key) {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\nexport function objectToArrayNotation(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = bps.map(function (br) {\n    var _obj$br;\n\n    return (_obj$br = obj[br]) != null ? _obj$br : null;\n  });\n\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n\n  return result;\n}\nexport function arrayToObjectNotation(values, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = {};\n  values.forEach(function (value, index) {\n    var key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nexport function isResponsiveObjectLike(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(function (key) {\n    return bps.includes(key);\n  });\n}\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\n\nexport var isCustomBreakpoint = function isCustomBreakpoint(maybeBreakpoint) {\n  return Number.isNaN(Number(maybeBreakpoint));\n};","map":{"version":3,"sources":["../../src/responsive.ts"],"names":["breakpoints","Object","isArray","item","mapper","isObject","result","prop","bps","br","obj","getLastItem","values","key","value","keys","isCustomBreakpoint","maybeBreakpoint","Number"],"mappings":"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","sourcesContent":["import { getLastItem } from \"./array\"\nimport { isArray, isObject } from \"./assertion\"\nimport { objectKeys } from \"./object\"\nimport { Dict } from \"./types\"\n\nexport const breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\",\n])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n\n/**\n * since breakpoints are defined as custom properties on an array, you may\n * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices\n * and custom breakpoints as string.\n *\n * This function returns true given a custom array property.\n */\nexport const isCustomBreakpoint = (maybeBreakpoint: string) =>\n  Number.isNaN(Number(maybeBreakpoint))\n"]},"metadata":{},"sourceType":"module"}