{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isBrowser, __DEV__ } from \"@chakra-ui/utils\";\nimport React, { createContext, useContext, useMemo, useState } from \"react\";\nimport { ssrDocument } from \"./mock-document\";\nimport { ssrWindow } from \"./mock-window\";\nvar mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument\n};\nvar defaultEnv = isBrowser ? {\n  window: window,\n  document: document\n} : mockEnv;\nvar EnvironmentContext = /*#__PURE__*/createContext(defaultEnv);\n\nif (__DEV__) {\n  EnvironmentContext.displayName = \"EnvironmentContext\";\n}\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext);\n}\nexport function EnvironmentProvider(props) {\n  var children = props.children,\n      environmentProp = props.environment;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var context = useMemo(function () {\n    var _ref;\n\n    var doc = node == null ? void 0 : node.ownerDocument;\n    var win = node == null ? void 0 : node.ownerDocument.defaultView;\n    var nodeEnv = doc ? {\n      document: doc,\n      window: win\n    } : undefined;\n    var env = (_ref = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref : defaultEnv;\n    return env;\n  }, [node, environmentProp]);\n  var showEnvGetter = !node && !environmentProp;\n  return /*#__PURE__*/React.createElement(EnvironmentContext.Provider, {\n    value: context\n  }, children, showEnvGetter && /*#__PURE__*/React.createElement(\"span\", {\n    ref: function ref(el) {\n      if (el) setNode(el);\n    }\n  }));\n}\n\nif (__DEV__) {\n  EnvironmentProvider.displayName = \"EnvironmentProvider\";\n}","map":{"version":3,"sources":["../../src/env.tsx"],"names":["mockEnv","window","document","ssrDocument","defaultEnv","isBrowser","EnvironmentContext","createContext","useContext","environment","environmentProp","useState","context","useMemo","doc","node","win","nodeEnv","env","showEnvGetter","el","setNode","EnvironmentProvider"],"mappings":";AAAA,SAAA,SAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAA,KAAA,IAAA,aAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,WAAA,QAAA,iBAAA;AACA,SAAA,SAAA,QAAA,eAAA;AAOA,IAAMA,OAAO,GAAG;AACdC,EAAAA,MAAM,EADQ,SAAA;AAEdC,EAAAA,QAAQ,EAAEC;AAFI,CAAhB;AAKA,IAAMC,UAAuB,GAAGC,SAAS,GAAG;AAAEJ,EAAAA,MAAF,EAAEA,MAAF;AAAUC,EAAAA,QAAAA,EAAAA;AAAV,CAAH,GAAzC,OAAA;AAEA,IAAMI,kBAAkB,GAAA,aAAGC,aAAa,CAAxC,UAAwC,CAAxC;;AAEA,IAAA,OAAA,EAAa;AACXD,EAAAA,kBAAkB,CAAlBA,WAAAA,GAAAA,oBAAAA;AACD;;AAED,OAAO,SAAA,cAAA,GAA0B;AAC/B,SAAOE,UAAU,CAAjB,kBAAiB,CAAjB;AACD;AAOD,OAAO,SAAA,mBAAA,CAAA,KAAA,EAA8D;AACnE,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAA+BE,eAA/B,GAAA,KAAA,CAAkBD,WAAlB;;AACA,kBAAwBE,QAAQ,CAAhC,IAAgC,CAAhC;AAAA;AAAA,MAAM,IAAN;AAAA,MAAM,OAAN;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,YAAM;AAAA,QAAA,IAAA;;AAC5B,QAAMC,GAAG,GAAGC,IAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAhB,aAAA;AACA,QAAMC,GAAG,GAAGD,IAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAJA,aAAAA,CAAZ,WAAA;AACA,QAAME,OAAO,GAAGH,GAAG,GAAG;AAAEZ,MAAAA,QAAQ,EAAV,GAAA;AAAiBD,MAAAA,MAAM,EAAEe;AAAzB,KAAH,GAAnB,SAAA;AACA,QAAME,GAAG,GAAA,CAAA,IAAA,GAAGR,eAAH,IAAA,IAAGA,GAAH,eAAGA,GAAH,OAAA,KAAA,IAAA,GAAA,IAAA,GAAT,UAAA;AACA,WAAA,GAAA;AALqB,GAAA,EAMpB,CAAA,IAAA,EANH,eAMG,CANoB,CAAvB;AAQA,MAAMS,aAAa,GAAG,CAAA,IAAA,IAAS,CAA/B,eAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAEP;AAApC,GAAA,EAAA,QAAA,EAEGO,aAAa,IAAA,aACZ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,GAAG,EAAGC,aAAAA,EAAD,EAAQ;AACX,UAAA,EAAA,EAAQC,OAAO,CAAPA,EAAO,CAAPA;AACT;AAHH,GAAA,CAHJ,CADF;AAYD;;AAED,IAAA,OAAA,EAAa;AACXC,EAAAA,mBAAmB,CAAnBA,WAAAA,GAAAA,qBAAAA;AACD","sourcesContent":["import { isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport React, { createContext, useContext, useMemo, useState } from \"react\"\nimport { ssrDocument } from \"./mock-document\"\nimport { ssrWindow } from \"./mock-window\"\n\ninterface Environment {\n  window: Window\n  document: Document\n}\n\nconst mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument,\n}\n\nconst defaultEnv: Environment = isBrowser ? { window, document } : mockEnv\n\nconst EnvironmentContext = createContext(defaultEnv)\n\nif (__DEV__) {\n  EnvironmentContext.displayName = \"EnvironmentContext\"\n}\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp } = props\n  const [node, setNode] = useState<HTMLElement | null>(null)\n\n  const context = useMemo(() => {\n    const doc = node?.ownerDocument\n    const win = node?.ownerDocument.defaultView\n    const nodeEnv = doc ? { document: doc, window: win } : undefined\n    const env = environmentProp ?? nodeEnv ?? defaultEnv\n    return env as Environment\n  }, [node, environmentProp])\n\n  const showEnvGetter = !node && !environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n      {showEnvGetter && (\n        <span\n          ref={(el) => {\n            if (el) setNode(el)\n          }}\n        />\n      )}\n    </EnvironmentContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  EnvironmentProvider.displayName = \"EnvironmentProvider\"\n}\n"]},"metadata":{},"sourceType":"module"}