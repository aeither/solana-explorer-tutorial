{"version":3,"sources":["../../src/alert.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","createContext","React","CheckIcon","InfoIcon","WarningIcon","STATUSES","info","icon","colorScheme","warning","success","error","AlertProvider","useAlertContext","name","errorMessage","Alert","props","ref","status","rest","styles","alertStyles","width","display","alignItems","position","overflow","container","className","AlertTitle","title","AlertDescription","descriptionStyles","description","AlertIcon","BaseIcon"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\"\n\nconst STATUSES = {\n  info: { icon: InfoIcon, colorScheme: \"blue\" },\n  warning: { icon: WarningIcon, colorScheme: \"orange\" },\n  success: { icon: CheckIcon, colorScheme: \"green\" },\n  error: { icon: WarningIcon, colorScheme: \"red\" },\n}\n\nexport type AlertStatus = keyof typeof STATUSES\n\ninterface AlertContext {\n  status: AlertStatus\n}\n\nconst [AlertProvider, useAlertContext] = createContext<AlertContext>({\n  name: \"AlertContext\",\n  errorMessage:\n    \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\",\n})\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps<\"Alert\"> {}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport const Alert = forwardRef<AlertProps, \"div\">((props, ref) => {\n  const { status = \"info\", ...rest } = omitThemingProps(props)\n  const colorScheme = props.colorScheme ?? STATUSES[status].colorScheme\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"alert\"\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </StylesProvider>\n    </AlertProvider>\n  )\n})\n\nexport interface AlertTitleProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertTitle = forwardRef<AlertTitleProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-alert__title\", props.className)}\n      __css={styles.title}\n    />\n  )\n})\n\nexport interface AlertDescriptionProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertDescription = forwardRef<AlertDescriptionProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    const descriptionStyles: SystemStyleObject = {\n      display: \"inline\",\n      ...styles.description,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__desc\", props.className)}\n        __css={descriptionStyles}\n      />\n    )\n  },\n)\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport const AlertIcon: React.FC<AlertIconProps> = (props) => {\n  const { status } = useAlertContext()\n  const { icon: BaseIcon } = STATUSES[status]\n  const styles = useStyles()\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={styles.icon}\n    >\n      <BaseIcon w=\"100%\" h=\"100%\" />\n    </chakra.span>\n  )\n}\n"],"file":"alert.js"}