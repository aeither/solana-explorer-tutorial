{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useImage } from \"./use-image\";\nvar NativeImage = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var htmlWidth = props.htmlWidth,\n      htmlHeight = props.htmlHeight,\n      alt = props.alt,\n      rest = _objectWithoutPropertiesLoose(props, [\"htmlWidth\", \"htmlHeight\", \"alt\"]);\n\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    width: htmlWidth,\n    height: htmlHeight,\n    ref: ref,\n    alt: alt\n  }, rest));\n});\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\n\nexport var Image = /*#__PURE__*/forwardRef(function (props, ref) {\n  var fallbackSrc = props.fallbackSrc,\n      fallback = props.fallback,\n      src = props.src,\n      align = props.align,\n      fit = props.fit,\n      loading = props.loading,\n      ignoreFallback = props.ignoreFallback,\n      crossOrigin = props.crossOrigin,\n      rest = _objectWithoutPropertiesLoose(props, [\"fallbackSrc\", \"fallback\", \"src\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\"]);\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n\n\n  var shouldIgnore = loading != null || ignoreFallback;\n  var status = useImage(_extends({}, props, {\n    ignoreFallback: shouldIgnore\n  }));\n\n  var shared = _extends({\n    ref: ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback;\n    return /*#__PURE__*/React.createElement(chakra.img, _extends({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    as: NativeImage,\n    src: src,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    className: \"chakra-image\"\n  }, shared));\n});\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\n\nexport var Img = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    ref: ref,\n    as: NativeImage,\n    className: \"chakra-image\"\n  }, props));\n});\n\nif (__DEV__) {\n  Image.displayName = \"Image\";\n}","map":{"version":3,"sources":["../../src/image.tsx"],"names":["NativeImage","alt","Image","forwardRef","crossOrigin","shouldIgnore","loading","status","useImage","ignoreFallback","shared","ref","objectFit","objectPosition","align","omit","fallbackSrc","Img"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useImage, UseImageProps } from \"./use-image\"\n\ninterface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nconst NativeImage = React.forwardRef(\n  (props: NativeImageProps, ref: React.Ref<any>) => {\n    const { htmlWidth, htmlHeight, alt, ...rest } = props\n    return (\n      <img\n        width={htmlWidth}\n        height={htmlHeight}\n        ref={ref}\n        alt={alt}\n        {...rest}\n      />\n    )\n  },\n)\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    ...rest\n  } = props\n\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n  const shouldIgnore = loading != null || ignoreFallback\n\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnore,\n  })\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n\nif (__DEV__) {\n  Image.displayName = \"Image\"\n}\n"]},"metadata":{},"sourceType":"module"}