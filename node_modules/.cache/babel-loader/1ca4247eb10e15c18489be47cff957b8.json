{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isNumber } from \"@chakra-ui/utils\";\nexport default function createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        breakpoint = _ref2[0],\n        minWidth = _ref2[1]; // given a following breakpoint\n\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}","map":{"version":3,"sources":["../../src/create-media-query.ts"],"names":["Number","a","b","next","arr","index","maxWidth","query","createMediaQueryString","minWidth","breakpoint","hasMinWidth","parseInt","toMediaString","subtract","measurementRegex","calculateMeasurement","value","match","parseFloat","isNumber"],"mappings":";AAAA,SAAA,QAAA,QAAA,kBAAA;AAEA,eAAe,SAAA,kBAAA,CAAA,WAAA,EAA6D;AAC1E,SACE,MAAM,CAAN,OAAA,CAAA,WAAA,EACE;AACA;AAFF,GAAA,IAAA,CAGQ,UAAA,CAAA,EAAA,CAAA;AAAA,WACJA,MAAM,CAANA,QAAAA,CAAgBC,CAAC,CAAjBD,CAAiB,CAAjBA,EAAAA,EAAAA,IAA4BA,MAAM,CAANA,QAAAA,CAAgBE,CAAC,CAAjBF,CAAiB,CAAjBA,EAA5BA,EAA4BA,CAA5BA,GAAAA,CAAAA,GAA4D,CAJhE,CAGQ;AAAA,GAHR,EAAA,GAAA,CAMO,UAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAwC;AAAvC,+BAAuC,IAAvC;AAAA,QAAA,UAAA;AAAA,QAAA,QAAA,YAAuC,CAC3C;;;AACA,QAAMG,IAAI,GAAGC,GAAG,CAACC,KAAK,GAFqB,CAE3B,CAAhB,CAF2C,CAG3C;;AACA,QAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI,CAAP,CAAO,CAAP,GAArB,SAAA;AACA,QAAMI,KAAK,GAAGC,sBAAsB,CAAA,QAAA,EAApC,QAAoC,CAApC;AAEA,WAAO;AACLC,MAAAA,QADK,EACLA,QADK;AAELH,MAAAA,QAFK,EAELA,QAFK;AAGLI,MAAAA,UAHK,EAGLA,UAHK;AAILH,MAAAA,KAAAA,EAAAA;AAJK,KAAP;AAdN,GACE,CADF;AAsBD;AAED;AACA;AACA;AACA;;AACA,SAAA,sBAAA,CAAA,QAAA,EAAA,QAAA,EAAqE;AACnE,MAAMI,WAAW,GAAGC,QAAQ,CAAA,QAAA,EAARA,EAAQ,CAARA,IAApB,CAAA;;AAEA,MAAI,CAAA,WAAA,IAAgB,CAApB,QAAA,EAA+B;AAC7B,WAAA,EAAA;AACD;;AAED,MAAIL,KAAK,GAAA,iBAAkBM,aAAa,CAA/B,QAA+B,CAA/B,GAAT,GAAA;;AAEA,MAAI,CAAJ,QAAA,EAAe;AACb,WAAA,KAAA;AACD;;AAED,MAAA,KAAA,EAAW;AACTN,IAAAA,KAAK,IAALA,OAAAA;AACD;;AAEDA,EAAAA,KAAK,IAAA,iBAAmBM,aAAa,CAACC,QAAQ,CAAzC,QAAyC,CAAT,CAAhC,GAALP,GAAAA;AAEA,SAAA,KAAA;AACD;;AASD,IAAMQ,gBAAgB,GAAtB,mBAAA;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,KAAA,EAAA,QAAA,EAGhB;AACX,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAA,MAAUC,KAAK,GAAf,QAAA,CAAA;AACD;;AAED,SAAOA,KAAK,CAALA,OAAAA,CAAAA,gBAAAA,EAEJC,UAAAA,KAAD;AAAA,WAAA,MAAcC,UAAU,CAAVA,KAAU,CAAVA,GAFhB,QAEE,CAAA;AAAA,GAFKF,CAAP;AARF,CAAA;AAcA;AACA;AACA;AACA;AACA;;;AACA,SAAA,QAAA,CAAA,KAAA,EAAiC;AAC/B,SAAOD,oBAAoB,CAAA,KAAA,EAAQC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,IAAuB,CAAvBA,CAAAA,GAA4B,CAA/D,IAA2B,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAAA,aAAA,CAAA,KAAA,EAA8C;AAC5C,SAAOG,QAAQ,CAARA,KAAQ,CAARA,GAAqBH,KAArBG,GAAAA,IAAAA,GAAP,KAAA;AACD","sourcesContent":["import { Dict, isNumber, StringOrNumber } from \"@chakra-ui/utils\"\n\nexport default function createMediaQueries(breakpoints: Dict): MediaQuery[] {\n  return (\n    Object.entries(breakpoints)\n      // sort css units in ascending order to ensure media queries are generated\n      // in the correct order and reference to each other correctly aswell\n      .sort((a, b) =>\n        Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1,\n      )\n      .map(([breakpoint, minWidth], index, arr) => {\n        // given a following breakpoint\n        const next = arr[index + 1]\n        // this breakpoint must end prior the threshold of the next\n        const maxWidth = next ? next[1] : undefined\n        const query = createMediaQueryString(minWidth, maxWidth)\n\n        return {\n          minWidth,\n          maxWidth,\n          breakpoint,\n          query,\n        }\n      })\n  )\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n"]},"metadata":{},"sourceType":"module"}