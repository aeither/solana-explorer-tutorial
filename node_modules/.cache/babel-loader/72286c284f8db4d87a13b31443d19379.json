{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\";\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It us useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport var matchWidth = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: function fn(_ref) {\n    var state = _ref.state;\n    state.styles.popper.width = state.rects.reference.width + \"px\";\n  },\n  effect: function effect(_ref2) {\n    var state = _ref2.state;\n    return function () {\n      var reference = state.elements.reference;\n      state.elements.popper.style.width = reference.offsetWidth + \"px\";\n    };\n  }\n};\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport var transformOrigin = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: function fn(_ref3) {\n    var state = _ref3.state;\n    setTransformOrigin(state);\n  },\n  effect: function effect(_ref4) {\n    var state = _ref4.state;\n    return function () {\n      setTransformOrigin(state);\n    };\n  }\n};\n\nvar setTransformOrigin = function setTransformOrigin(state) {\n  state.elements.popper.style.setProperty(cssVars.transformOrigin.var, toTransformOrigin(state.placement));\n};\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\n\nexport var positionArrow = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: function fn(_ref5) {\n    var state = _ref5.state;\n    setArrowStyles(state);\n  }\n};\n\nvar setArrowStyles = function setArrowStyles(state) {\n  var _state$elements;\n\n  if (!state.placement) return;\n  var overrides = getArrowStyle(state.placement);\n\n  if ((_state$elements = state.elements) != null && _state$elements.arrow && overrides) {\n    var _Object$assign, _vars;\n\n    Object.assign(state.elements.arrow.style, (_Object$assign = {}, _defineProperty(_Object$assign, overrides.property, overrides.value), _defineProperty(_Object$assign, \"width\", cssVars.arrowSize.varRef), _defineProperty(_Object$assign, \"height\", cssVars.arrowSize.varRef), _defineProperty(_Object$assign, \"zIndex\", -1), _Object$assign));\n    var vars = (_vars = {}, _defineProperty(_vars, cssVars.arrowSizeHalf.var, \"calc(\" + cssVars.arrowSize.varRef + \" / 2)\"), _defineProperty(_vars, cssVars.arrowOffset.var, \"calc(\" + cssVars.arrowSizeHalf.varRef + \" * -1)\"), _vars);\n\n    for (var property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property]);\n    }\n  }\n};\n\nvar getArrowStyle = function getArrowStyle(placement) {\n  if (placement.startsWith(\"top\")) {\n    return {\n      property: \"bottom\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n\n  if (placement.startsWith(\"bottom\")) {\n    return {\n      property: \"top\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n\n  if (placement.startsWith(\"left\")) {\n    return {\n      property: \"right\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n\n  if (placement.startsWith(\"right\")) {\n    return {\n      property: \"left\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n};\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\n\nexport var innerArrow = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: function fn(_ref6) {\n    var state = _ref6.state;\n    setInnerArrowStyles(state);\n  },\n  effect: function effect(_ref7) {\n    var state = _ref7.state;\n    return function () {\n      setInnerArrowStyles(state);\n    };\n  }\n};\n\nvar setInnerArrowStyles = function setInnerArrowStyles(state) {\n  if (!state.elements.arrow) return;\n  var inner = state.elements.arrow.querySelector(\"[data-popper-arrow-inner]\");\n  if (!inner) return;\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: getBoxShadow(state.placement)\n  });\n};","map":{"version":3,"sources":["../../src/modifiers.ts"],"names":["matchWidth","name","enabled","phase","requires","fn","state","effect","reference","transformOrigin","setTransformOrigin","cssVars","toTransformOrigin","positionArrow","setArrowStyles","overrides","getArrowStyle","Object","vars","placement","property","value","varRef","innerArrow","setInnerArrowStyles","inner","transform","background","top","left","width","height","position","zIndex","boxShadow","getBoxShadow"],"mappings":"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","sourcesContent":["import { Placement, Modifier, State } from \"@popperjs/core\"\nimport { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It us useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const matchWidth: Modifier<\"matchWidth\", any> = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`\n  },\n  effect: ({ state }) => () => {\n    const reference = state.elements.reference as HTMLElement\n    state.elements.popper.style.width = `${reference.offsetWidth}px`\n  },\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const transformOrigin: Modifier<\"transformOrigin\", any> = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: ({ state }) => {\n    setTransformOrigin(state)\n  },\n  effect: ({ state }) => () => {\n    setTransformOrigin(state)\n  },\n}\n\nconst setTransformOrigin = (state: State) => {\n  state.elements.popper.style.setProperty(\n    cssVars.transformOrigin.var,\n    toTransformOrigin(state.placement),\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\nexport const positionArrow: Modifier<\"positionArrow\", any> = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: ({ state }) => {\n    setArrowStyles(state)\n  },\n}\n\nconst setArrowStyles = (state: Partial<State>) => {\n  if (!state.placement) return\n  const overrides = getArrowStyle(state.placement)\n\n  if (state.elements?.arrow && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1,\n    })\n\n    const vars = {\n      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`,\n    }\n\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property])\n    }\n  }\n}\n\nconst getArrowStyle = (placement: Placement) => {\n  if (placement.startsWith(\"top\")) {\n    return { property: \"bottom\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return { property: \"top\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"left\")) {\n    return { property: \"right\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"right\")) {\n    return { property: \"left\", value: cssVars.arrowOffset.varRef }\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const innerArrow: Modifier<\"innerArrow\", any> = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: ({ state }) => {\n    setInnerArrowStyles(state)\n  },\n  effect: ({ state }) => () => {\n    setInnerArrowStyles(state)\n  },\n}\n\nconst setInnerArrowStyles = (state: State) => {\n  if (!state.elements.arrow) return\n\n  const inner = state.elements.arrow.querySelector(\n    \"[data-popper-arrow-inner]\",\n  ) as HTMLElement | null\n\n  if (!inner) return\n\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: getBoxShadow(state.placement),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}