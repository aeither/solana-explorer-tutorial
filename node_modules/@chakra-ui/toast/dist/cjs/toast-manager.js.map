{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["ToastManager","props","top","bottom","message","options","toast","createToast","position","id","setState","prevToasts","isTop","includes","toasts","prevState","nextState","index","positions","prev","allPositions","positionsToClose","reduce","acc","map","requestClose","counter","duration","onCloseComplete","onRequestRemove","removeToast","String","status","filter","state","Boolean","isTopOrBottom","margin","undefined","right","left","zIndex","pointerEvents","display","flexDirection","methods","notify","closeAll","close","closeToast","update","updateToast","isActive","isVisible","render","getStyle","React","Component"],"mappings":"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","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport { AnimatePresence } from \"framer-motion\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastPosition,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface ToastMethods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: (options?: CloseAllToastsOptions) => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: ToastMethods) => void\n}\n\ntype State = { [K in ToastPosition]: ToastOptions[] }\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, State> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: State = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      const isTop = position.includes(\"top\")\n\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const toasts = isTop\n        ? [toast, ...prevToasts[position]]\n        : [...prevToasts[position], toast]\n\n      return {\n        ...prevToasts,\n        [position]: toasts,\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once.\n   * If given positions, will only close those.\n   */\n  closeAll = ({ positions }: CloseAllToastsOptions = {}) => {\n    // only one setState here for perf reasons\n    // instead of spamming this.closeToast\n    this.setState((prev) => {\n      const allPositions: ToastPosition[] = [\n        \"bottom\",\n        \"bottom-right\",\n        \"bottom-left\",\n        \"top\",\n        \"top-left\",\n        \"top-right\",\n      ]\n\n      const positionsToClose = positions ?? allPositions\n\n      return positionsToClose.reduce((acc, position) => {\n        acc[position] = prev[position].map((toast) => ({\n          ...toast,\n          requestClose: true,\n        }))\n\n        return acc\n      }, {})\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    ToastManager.counter += 1\n    const id = options.id ?? ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n      requestClose: false,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on its id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => {\n          // id may be string or number\n          // eslint-disable-next-line eqeqeq\n          if (toast.id == id) {\n            return {\n              ...toast,\n              requestClose: true,\n            }\n          }\n\n          return toast\n        }),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at its position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      // id may be string or number\n      // eslint-disable-next-line eqeqeq\n      [position]: prevState[position].filter((toast) => toast.id != id),\n    }))\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on its position\n   */\n  getStyle = (position: ToastPosition): React.CSSProperties => {\n    const isTopOrBottom = position === \"top\" || position === \"bottom\"\n    const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n    const top = position.includes(\"top\")\n      ? \"env(safe-area-inset-top, 0px)\"\n      : undefined\n    const bottom = position.includes(\"bottom\")\n      ? \"env(safe-area-inset-bottom, 0px)\"\n      : undefined\n    const right = !position.includes(\"left\")\n      ? \"env(safe-area-inset-right, 0px)\"\n      : undefined\n    const left = !position.includes(\"right\")\n      ? \"env(safe-area-inset-left, 0px)\"\n      : undefined\n\n    return {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin,\n      top,\n      bottom,\n      right,\n      left,\n    }\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <ul\n          key={position}\n          id={`chakra-toast-manager-${position}`}\n          style={this.getStyle(position)}\n        >\n          <AnimatePresence initial={false}>\n            {toasts.map((toast) => (\n              <Toast key={toast.id} {...toast} />\n            ))}\n          </AnimatePresence>\n        </ul>\n      )\n    })\n  }\n}\n"],"file":"toast-manager.js"}