{"version":3,"sources":["../../src/use-spinner.ts"],"names":["CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"mappings":";;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA,IAAMA,0BAA0B,GAAG,EAAnC;AAEA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,GAAhC;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAT,CAAoBC,SAApB,EAAyCC,SAAzC,EAA8D;AACnE;AACF;AACA;AAHqE,kBAI/B,qBAAS,KAAT,CAJ+B;AAAA,MAI5DC,UAJ4D;AAAA,MAIhDC,aAJgD,iBAMnE;;;AANmE,mBAOvC,qBAAwB,IAAxB,CAPuC;AAAA,MAO5DC,MAP4D;AAAA,MAOpDC,SAPoD,kBASnE;;;AATmE,mBAUrC,qBAAS,IAAT,CAVqC;AAAA,MAU5DC,OAV4D;AAAA,MAUnDC,UAVmD,kBAYnE;;;AACA,MAAMC,UAAU,GAAG,mBAAY,IAAZ,CAAnB,CAbmE,CAenE;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMC,YAAY,CAACF,UAAU,CAACG,OAAZ,CAAlB;AAAA,GAAtB;AAEA;AACF;AACA;AACA;;;AACE,0BACE,YAAM;AACJ,QAAIP,MAAM,KAAK,WAAf,EAA4B;AAC1BJ,MAAAA,SAAS;AACV;;AACD,QAAII,MAAM,KAAK,WAAf,EAA4B;AAC1BH,MAAAA,SAAS;AACV;AACF,GARH,EASEC,UAAU,GAAGL,0BAAH,GAAgC,IAT5C,EAtBmE,CAkCnE;;AACA,MAAMe,EAAE,GAAG,wBAAY,YAAM;AAC3B;AACA,QAAIN,OAAJ,EAAa;AACXN,MAAAA,SAAS;AACV,KAJ0B,CAM3B;;;AACAQ,IAAAA,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,YAAM;AACpCN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZU,EAYR,CAACE,SAAD,EAAYM,OAAZ,CAZQ,CAAX,CAnCmE,CAiDnE;;AACA,MAAMQ,IAAI,GAAG,wBAAY,YAAM;AAC7B;AACA,QAAIR,OAAJ,EAAa;AACXL,MAAAA,SAAS;AACV,KAJ4B,CAM7B;;;AACAO,IAAAA,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,YAAM;AACpCN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZY,EAYV,CAACG,SAAD,EAAYK,OAAZ,CAZU,CAAb,CAlDmE,CAgEnE;;AACA,MAAMS,IAAI,GAAG,wBAAY,YAAM;AAC7BR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,aAAa;AACd,GAJY,EAIV,EAJU,CAAb;AAMA;AACF;AACA;AACA;;AACE,+BAAiBA,aAAjB;AAEA,SAAO;AAAEG,IAAAA,EAAE,EAAFA,EAAF;AAAME,IAAAA,IAAI,EAAJA,IAAN;AAAYC,IAAAA,IAAI,EAAJA;AAAZ,GAAP;AACD","sourcesContent":["import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\"\nimport { useCallback, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinng (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useUnmountEffect(removeTimeout)\n\n  return { up, down, stop }\n}\n"],"file":"use-spinner.js"}