{"version":3,"sources":["../../src/use-style-config.ts"],"names":["useStyleConfig","themeKey","props","opts","styleConfigProp","styleConfig","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","forEach","part","isStyleEqual","current","useMultiStyleConfig"],"mappings":";;;;;;AACA;;AAQA;;AACA;;AACA;;;;;;AAeO,SAASA,cAAT,CAAwBC,QAAxB,EAAuCC,KAAvC,EAAwDC,IAAxD,EAAwE;AAAA;;AAAA,MAAjCD,KAAiC;AAAjCA,IAAAA,KAAiC,GAApB,EAAoB;AAAA;;AAAA,MAAhBC,IAAgB;AAAhBA,IAAAA,IAAgB,GAAJ,EAAI;AAAA;;AAAA,eAC3BD,KAD2B;AAAA,MACxDE,eADwD,UACrEC,WADqE;AAAA,MACpCC,IADoC;;AAAA,mBAGhD,uBAHgD;AAAA,MAGrEC,KAHqE,cAGrEA,KAHqE;AAAA,MAG9DC,SAH8D,cAG9DA,SAH8D;;AAI7E,MAAMC,gBAAgB,GAAG,wBAAIF,KAAJ,kBAAyBN,QAAzB,CAAzB;AACA,MAAMI,WAAW,GAAGD,eAAe,IAAIK,gBAAvC;AAEA,MAAMC,WAAW,GAAG,sBAClB;AAAEH,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,SAAS,EAATA;AAAT,GADkB,2BAElBH,WAFkB,oBAElBA,WAAW,CAAEM,YAFK,oCAEW,EAFX,EAGlB,4BAAgB,iBAAKL,IAAL,EAAW,CAAC,UAAD,CAAX,CAAhB,CAHkB,CAApB;AAMA;AACF;AACA;;AAEE,MAAMM,SAAS,GAAG,mBAAkB,EAAlB,CAAlB;;AAEA,MAAIP,WAAJ,EAAiB;AAAA;;AACf,QAAMQ,UAAU,GAAG,6CAAQR,WAAW,CAACS,SAApB,oCAAiC,EAAjC,EAAqCJ,WAArC,CAAnB;AAEA,QAAMK,QAAQ,GAAG,uEACfV,WAAW,CAACU,QADG,qBACf,uBAAuBL,WAAW,CAACM,OAAnC,CADe,oCACgC,EADhC,EAEfN,WAFe,CAAjB;AAKA,QAAMO,KAAK,GAAG,mEACZZ,WAAW,CAACY,KADA,qBACZ,mBAAoBP,WAAW,CAACQ,IAAhC,CADY,oCAC6B,EAD7B,EAEZR,WAFY,CAAd;AAKA,QAAMS,MAAM,GAAG,sBAAU,EAAV,EAAcN,UAAd,EAA0BI,KAA1B,EAAiCF,QAAjC,CAAf;;AAEA,QAAI,SAAAZ,IAAI,SAAJ,UAAMiB,WAAN,IAAqBf,WAAW,CAACgB,KAArC,EAA4C;AAC1ChB,MAAAA,WAAW,CAACgB,KAAZ,CAAkBC,OAAlB,CAA0B,UAACC,IAAD,EAAkB;AAAA;;AAC1CJ,QAAAA,MAAM,CAACI,IAAD,CAAN,mBAAeJ,MAAM,CAACI,IAAD,CAArB,2BAA+B,EAA/B;AACD,OAFD;AAGD;;AAED,QAAMC,YAAY,GAAG,kCAAQZ,SAAS,CAACa,OAAlB,EAA2BN,MAA3B,CAArB;;AAEA,QAAI,CAACK,YAAL,EAAmB;AACjBZ,MAAAA,SAAS,CAACa,OAAV,GAAoBN,MAApB;AACD;AACF;;AAED,SAAOP,SAAS,CAACa,OAAjB;AACD;;AAEM,SAASC,mBAAT,CAA6BzB,QAA7B,EAA+CC,KAA/C,EAA2D;AAChE,SAAOF,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAAEkB,IAAAA,WAAW,EAAE;AAAf,GAAlB,CAArB;AACD","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps & Dict,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n    const variants = runIfFn(\n      styleConfig.variants?.[mergedProps.variant] ?? {},\n      mergedProps,\n    )\n\n    const sizes = runIfFn(\n      styleConfig.sizes?.[mergedProps.size] ?? {},\n      mergedProps,\n    )\n\n    const styles = mergeWith({}, baseStyles, sizes, variants)\n\n    if (opts?.isMultiPart && styleConfig.parts) {\n      styleConfig.parts.forEach((part: string) => {\n        styles[part] = styles[part] ?? {}\n      })\n    }\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"],"file":"use-style-config.js"}