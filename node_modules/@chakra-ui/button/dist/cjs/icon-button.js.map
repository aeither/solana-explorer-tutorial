{"version":3,"sources":["../../src/icon-button.tsx"],"names":["IconButton","props","ref","icon","children","isRound","ariaLabel","rest","element","_children","React","isValidElement","cloneElement","focusable","undefined","__DEV__","displayName"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AA4BO,IAAMA,UAAU,gBAAG,wBACxB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,MACNC,IADM,GACwDF,KADxD,CACNE,IADM;AAAA,MACAC,QADA,GACwDH,KADxD,CACAG,QADA;AAAA,MACUC,OADV,GACwDJ,KADxD,CACUI,OADV;AAAA,MACiCC,SADjC,GACwDL,KADxD,CACmB,YADnB;AAAA,MAC+CM,IAD/C,iCACwDN,KADxD;AAGd;AACJ;AACA;;;AACI,MAAMO,OAAO,GAAGL,IAAI,IAAIC,QAAxB;;AACA,MAAMK,SAAS,GAAG,aAAAC,KAAK,CAACC,cAAN,CAAqBH,OAArB,iBACdE,KAAK,CAACE,YAAN,CAAmBJ,OAAnB,EAAmC;AACjC,mBAAe,IADkB;AAEjCK,IAAAA,SAAS,EAAE;AAFsB,GAAnC,CADc,GAKd,IALJ;;AAOA,sBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAC,GADV;AAEE,IAAA,YAAY,EAAER,OAAO,GAAG,MAAH,GAAYS,SAFnC;AAGE,IAAA,GAAG,EAAEZ,GAHP;AAIE,kBAAYI;AAJd,KAKMC,IALN,GAOGE,SAPH,CADF;AAWD,CA1BuB,CAAnB;;;AA6BP,IAAIM,cAAJ,EAAa;AACXf,EAAAA,UAAU,CAACgB,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n"],"file":"icon-button.js"}