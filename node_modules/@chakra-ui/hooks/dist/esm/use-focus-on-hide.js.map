{"version":3,"sources":["../../src/use-focus-on-hide.ts"],"names":["contains","focus","getActiveElement","isTabbable","useUpdateEffect","preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef","nextTick"],"mappings":"AAAA,SACEA,QADF,EAEEC,KAFF,EAIEC,gBAJF,EAKEC,UALF,QAMO,kBANP;AAQA,SAASC,eAAT,QAAgC,qBAAhC;;AAQA,SAASC,kBAAT,CAA4BC,YAA5B,EAAwE;AACtE,MAAMC,EAAE,GAAGD,YAAY,CAACE,OAAxB;AACA,MAAI,CAACD,EAAL,EAAS,OAAO,KAAP;AAET,MAAME,aAAa,GAAGP,gBAAgB,CAACK,EAAD,CAAtC;AAEA,MAAI,CAACE,aAAL,EAAoB,OAAO,KAAP;AACpB,MAAIT,QAAQ,CAACO,EAAD,EAAKE,aAAL,CAAZ,EAAiC,OAAO,KAAP;AACjC,MAAIN,UAAU,CAACM,aAAD,CAAd,EAA+B,OAAO,IAAP;AAE/B,SAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,cAAT,CACLJ,YADK,EAELK,OAFK,EAGL;AACA,MAAM;AAAEC,IAAAA,WAAW,EAAEC,eAAf;AAAgCC,IAAAA,OAAhC;AAAyCC,IAAAA;AAAzC,MAAsDJ,OAA5D;AAEA,MAAMC,WAAW,GAAGC,eAAe,IAAI,CAACC,OAAxC;AAEAV,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAI,CAACQ,WAAL,EAAkB;;AAElB,QAAIP,kBAAkB,CAACC,YAAD,CAAtB,EAAsC;AACpC;AACD;;AAED,QAAMC,EAAE,GAAG,CAAAQ,QAAQ,QAAR,YAAAA,QAAQ,CAAEP,OAAV,KAAqBF,YAAY,CAACE,OAA7C;;AAEA,QAAID,EAAJ,EAAQ;AACNN,MAAAA,KAAK,CAACM,EAAD,EAAK;AAAES,QAAAA,QAAQ,EAAE;AAAZ,OAAL,CAAL;AACD;AACF,GAZc,EAYZ,CAACJ,WAAD,EAAcN,YAAd,EAA4BS,QAA5B,CAZY,CAAf;AAaD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"],"file":"use-focus-on-hide.js"}