{"ast":null,"code":"import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    return target.removeEventListener(eventName, handler, options);\n  };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\n\n\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(function () {\n    var element = ref.current;\n\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/events/use-dom-event.js"],"names":["useEffect","addDomEvent","target","eventName","handler","options","addEventListener","removeEventListener","useDomEvent","ref","element","current"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;AACtDH,EAAAA,MAAM,CAACI,gBAAP,CAAwBH,SAAxB,EAAmCC,OAAnC,EAA4CC,OAA5C;AACA,SAAO,YAAY;AAAE,WAAOH,MAAM,CAACK,mBAAP,CAA2BJ,SAA3B,EAAsCC,OAAtC,EAA+CC,OAA/C,CAAP;AAAiE,GAAtF;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,GAArB,EAA0BN,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AACnDL,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIU,OAAO,GAAGD,GAAG,CAACE,OAAlB;;AACA,QAAIP,OAAO,IAAIM,OAAf,EAAwB;AACpB,aAAOT,WAAW,CAACS,OAAD,EAAUP,SAAV,EAAqBC,OAArB,EAA8BC,OAA9B,CAAlB;AACH;AACJ,GALQ,EAKN,CAACI,GAAD,EAAMN,SAAN,EAAiBC,OAAjB,EAA0BC,OAA1B,CALM,CAAT;AAMH;;AAED,SAASJ,WAAT,EAAsBO,WAAtB","sourcesContent":["import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler, options); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n"]},"metadata":{},"sourceType":"module"}