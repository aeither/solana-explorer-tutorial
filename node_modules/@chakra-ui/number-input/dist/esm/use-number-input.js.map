{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","onFocusProp","onBlurProp","getAriaValueTextProp","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","getInputProps","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}