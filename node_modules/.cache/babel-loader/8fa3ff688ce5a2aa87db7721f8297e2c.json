{"ast":null,"code":"import { memoizedGet as get } from \"@chakra-ui/utils\";\nvar srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\nvar srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\"\n};\n\nvar getWithPriority = function getWithPriority(theme, key, styles) {\n  var result = {};\n  var obj = get(theme, key, {});\n\n  for (var prop in obj) {\n    var isInStyles = prop in styles && styles[prop] != null;\n    if (!isInStyles) result[prop] = obj[prop];\n  }\n\n  return result;\n};\n\nexport var others = {\n  srOnly: {\n    transform: function transform(value) {\n      if (value === true) return srOnly;\n      if (value === \"focusable\") return srFocusable;\n      return {};\n    }\n  },\n  layerStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"layerStyles.\" + value, styles);\n    }\n  },\n  textStyle: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, \"textStyles.\" + value, styles);\n    }\n  },\n  apply: {\n    processResult: true,\n    transform: function transform(value, theme, styles) {\n      return getWithPriority(theme, value, styles);\n    }\n  }\n};","map":{"version":3,"sources":["../../../src/config/others.ts"],"names":["memoizedGet","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","getWithPriority","result","obj","get","isInStyles","prop","styles","others","transform","value","layerStyle","processResult","textStyle","apply"],"mappings":"AAAA,SAASA,WAAW,IAApB,GAAA,QAAA,kBAAA;AAIA,IAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EADO,KAAA;AAEbC,EAAAA,IAAI,EAFS,kBAAA;AAGbC,EAAAA,KAAK,EAHQ,KAAA;AAIbC,EAAAA,MAAM,EAJO,KAAA;AAKbC,EAAAA,MAAM,EALO,MAAA;AAMbC,EAAAA,OAAO,EANM,KAAA;AAObC,EAAAA,QAAQ,EAPK,QAAA;AAQbC,EAAAA,UAAU,EARG,QAAA;AASbC,EAAAA,QAAQ,EAAE;AATG,CAAf;AAYA,IAAMC,WAAW,GAAG;AAClBD,EAAAA,QAAQ,EADU,QAAA;AAElBN,EAAAA,KAAK,EAFa,MAAA;AAGlBC,EAAAA,MAAM,EAHY,MAAA;AAIlBF,EAAAA,IAAI,EAJc,MAAA;AAKlBI,EAAAA,OAAO,EALW,GAAA;AAMlBD,EAAAA,MAAM,EANY,GAAA;AAOlBE,EAAAA,QAAQ,EAPU,SAAA;AAQlBC,EAAAA,UAAU,EAAE;AARM,CAApB;;AAWA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAuC;AAC7D,MAAMC,MAAM,GAAZ,EAAA;AACA,MAAMC,GAAG,GAAGC,GAAG,CAAA,KAAA,EAAA,GAAA,EAAf,EAAe,CAAf;;AACA,OAAK,IAAL,IAAA,IAAA,GAAA,EAAwB;AACtB,QAAMC,UAAU,GAAGC,IAAI,IAAJA,MAAAA,IAAkBC,MAAM,CAANA,IAAM,CAANA,IAArC,IAAA;AACA,QAAI,CAAJ,UAAA,EAAiBL,MAAM,CAANA,IAAM,CAANA,GAAeC,GAAG,CAAlBD,IAAkB,CAAlBA;AAClB;;AACD,SAAA,MAAA;AAPF,CAAA;;AAUA,OAAO,IAAMM,MAAc,GAAG;AAC5BlB,EAAAA,MAAM,EAAE;AACNmB,IAAAA,SADM,qBACG,KADH,EACW;AACf,UAAIC,KAAK,KAAT,IAAA,EAAoB,OAAA,MAAA;AACpB,UAAIA,KAAK,KAAT,WAAA,EAA2B,OAAA,WAAA;AAC3B,aAAA,EAAA;AACD;AALK,GADoB;AAQ5BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,aAAa,EADH,IAAA;AAEVH,IAAAA,SAAS,EAAE,mBAAA,KAAA,EAAA,KAAA,EAAA,MAAA;AAAA,aACTR,eAAe,CAAA,KAAA,EAAA,iBAAA,KAAA,EAAA,MAAA,CADN;AAAA;AAFD,GARgB;AAa5BY,EAAAA,SAAS,EAAE;AACTD,IAAAA,aAAa,EADJ,IAAA;AAETH,IAAAA,SAAS,EAAE,mBAAA,KAAA,EAAA,KAAA,EAAA,MAAA;AAAA,aACTR,eAAe,CAAA,KAAA,EAAA,gBAAA,KAAA,EAAA,MAAA,CADN;AAAA;AAFF,GAbiB;AAkB5Ba,EAAAA,KAAK,EAAE;AACLF,IAAAA,aAAa,EADR,IAAA;AAELH,IAAAA,SAAS,EAAE,mBAAA,KAAA,EAAA,KAAA,EAAA,MAAA;AAAA,aAA0BR,eAAe,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,CAAzC;AAAA;AAFN;AAlBqB,CAAvB","sourcesContent":["import { memoizedGet as get } from \"@chakra-ui/utils\"\nimport { Config } from \"../utils/prop-config\"\nimport { ResponsiveValue, Token } from \"../utils/types\"\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst getWithPriority = (theme: any, key: any, styles: any) => {\n  const result = {}\n  const obj = get(theme, key, {})\n  for (const prop in obj) {\n    const isInStyles = prop in styles && styles[prop] != null\n    if (!isInStyles) result[prop] = obj[prop]\n  }\n  return result\n}\n\nexport const others: Config = {\n  srOnly: {\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n  layerStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `layerStyles.${value}`, styles),\n  },\n  textStyle: {\n    processResult: true,\n    transform: (value, theme, styles) =>\n      getWithPriority(theme, `textStyles.${value}`, styles),\n  },\n  apply: {\n    processResult: true,\n    transform: (value, theme, styles) => getWithPriority(theme, value, styles),\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The layer style object to apply.\n   * Note: Styles must be located in `theme.layerStyles`\n   */\n  layerStyle?: Token<string & {}, \"layerStyles\">\n  /**\n   * The text style object to apply.\n   * Note: Styles must be located in `theme.textStyles`\n   */\n  textStyle?: Token<string & {}, \"textStyles\">\n  /**\n   * Apply theme-aware style objects in `theme`\n   *\n   * @example\n   * ```jsx\n   * <Box apply=\"styles.h3\">This is a div</Box>\n   * ```\n   *\n   * This will apply styles defined in `theme.styles.h3`\n   */\n  apply?: ResponsiveValue<string>\n}\n"]},"metadata":{},"sourceType":"module"}