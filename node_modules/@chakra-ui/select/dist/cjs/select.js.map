{"version":3,"sources":["../../src/select.tsx"],"names":["SelectField","props","ref","children","placeholder","className","rest","ownProps","__DEV__","displayName","Select","styles","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","isFullWidth","layoutPropNames","layoutProps","otherProps","rootStyles","width","position","fieldStyles","field","paddingEnd","_focus","zIndex","isDisabled","fontSize","DefaultIcon","IconWrapper","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","SelectIcon","clone","React","cloneElement","role","focusable","style","isValidElement"],"mappings":"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","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mergeWith, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<HTMLChakraProps<\"select\">, Omitted> {\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  (props, ref) => {\n    const { children, placeholder, className, ...rest } = props\n    const ownProps = useFormControl<HTMLSelectElement>(rest)\n\n    return (\n      <chakra.select\n        {...ownProps}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<HTMLChakraProps<\"div\">, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps<\"Select\">,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const rootStyles: SystemStyleObject = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles: SystemStyleObject = mergeWith({}, styles.field, {\n    paddingEnd: \"2rem\",\n    _focus: { zIndex: \"unset\" },\n  })\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...otherProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={props.isDisabled}\n        {...((iconColor || color) && { color: iconColor || color })}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      >\n        {icon}\n      </SelectIcon>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ninterface SelectIconProps extends HTMLChakraProps<\"div\"> {}\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper {...rest} className=\"chakra-select__icon-wrapper\">\n      {React.isValidElement(children) ? clone : null}\n    </IconWrapper>\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n"],"file":"select.js"}