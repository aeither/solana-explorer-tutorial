{"version":3,"sources":["../../src/progress.utils.tsx"],"names":["spin","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","getProgressProps","options","value","min","max","valueText","getValueText","isIndeterminate","percent","getAriaValueText","undefined","bind","role"],"mappings":";;;;;;AAAA;;AACA;;AAIO,IAAMA,IAAc,GAAG,uBAAU;AACtC,QAAM;AACJC,IAAAA,eAAe,EAAE,QADb;AAEJC,IAAAA,gBAAgB,EAAE;AAFd,GADgC;AAKtC,SAAO;AACLD,IAAAA,eAAe,EAAE,UADZ;AAELC,IAAAA,gBAAgB,EAAE;AAFb,GAL+B;AAStC,UAAQ;AACND,IAAAA,eAAe,EAAE,UADX;AAENC,IAAAA,gBAAgB,EAAE;AAFZ;AAT8B,CAAV,CAAvB;;AAeA,IAAMC,MAAgB,GAAG,uBAAU;AACxC,QAAM;AACJC,IAAAA,SAAS,EAAE;AADP,GADkC;AAIxC,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJgC,CAAV,CAAzB;;AASA,IAAMC,QAAkB,GAAG,uBAAU;AAC1C,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADoC;AAE1C,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAFkC,CAAV,CAA3B;;AAKA,IAAMC,MAAgB,GAAG,uBAAU;AACxCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GADkC;AAExCC,EAAAA,EAAE,EAAE;AAAED,IAAAA,kBAAkB,EAAE;AAAtB;AAFoC,CAAV,CAAzB;;;AAcP;AACA;AACA;AACA;AACO,SAASE,gBAAT,CAA0BC,OAA1B,EAA4D;AAAA,uBAQ7DA,OAR6D,CAE/DC,KAF+D;AAAA,MAE/DA,KAF+D,+BAEvD,CAFuD;AAAA,MAG/DC,GAH+D,GAQ7DF,OAR6D,CAG/DE,GAH+D;AAAA,MAI/DC,GAJ+D,GAQ7DH,OAR6D,CAI/DG,GAJ+D;AAAA,MAK/DC,SAL+D,GAQ7DJ,OAR6D,CAK/DI,SAL+D;AAAA,MAM/DC,YAN+D,GAQ7DL,OAR6D,CAM/DK,YAN+D;AAAA,MAO/DC,eAP+D,GAQ7DN,OAR6D,CAO/DM,eAP+D;AAUjE,MAAMC,OAAO,GAAG,2BAAeN,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,CAAhB;;AAEA,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAIP,KAAK,IAAI,IAAb,EAAmB,OAAOQ,SAAP;AACnB,WAAO,uBAAWJ,YAAX,IAA2BA,YAAY,CAACJ,KAAD,EAAQM,OAAR,CAAvC,GAA0DH,SAAjE;AACD,GAHD;;AAKA,SAAO;AACLM,IAAAA,IAAI,EAAE;AACJ,4BAAsBJ,eAAe,GAAG,EAAH,GAAQG,SADzC;AAEJ,uBAAiBN,GAFb;AAGJ,uBAAiBD,GAHb;AAIJ,uBAAiBI,eAAe,GAAGG,SAAH,GAAeR,KAJ3C;AAKJ,wBAAkBO,gBAAgB,EAL9B;AAMJG,MAAAA,IAAI,EAAE;AANF,KADD;AASLJ,IAAAA,OAAO,EAAPA,OATK;AAULN,IAAAA,KAAK,EAALA;AAVK,GAAP;AAYD","sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\nimport { isFunction, valueToPercent } from \"@chakra-ui/utils\"\n\ntype Keyframe = ReturnType<typeof keyframes>\n\nexport const spin: Keyframe = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate: Keyframe = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress: Keyframe = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe: Keyframe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\",\n    },\n    percent,\n    value,\n  }\n}\n"],"file":"progress.utils.js"}