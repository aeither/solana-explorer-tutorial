{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["__DEV__","createContext","React","useCheckboxGroup","CheckboxGroupProvider","useCheckboxGroupContext","name","strict","CheckboxGroup","props","colorScheme","size","variant","children","isDisabled","value","onChange","group","useMemo","displayName"],"mappings":"AACA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,QAIO,sBAJP;AAgBA,IAAM,CACJC,qBADI,EAEJC,uBAFI,IAGFJ,aAAa,CAAuB;AACtCK,EAAAA,IAAI,EAAE,sBADgC;AAEtCC,EAAAA,MAAM,EAAE;AAF8B,CAAvB,CAHjB;AAQA,SAASF,uBAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA;AAAxC,MAAuDL,KAA7D;AACA,MAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBb,gBAAgB,CAACM,KAAD,CAA5C;AAEA,MAAMQ,KAAK,GAAGf,KAAK,CAACgB,OAAN,CACZ,OAAO;AACLP,IAAAA,IADK;AAELK,IAAAA,QAFK;AAGLN,IAAAA,WAHK;AAILK,IAAAA,KAJK;AAKLH,IAAAA,OALK;AAMLE,IAAAA;AANK,GAAP,CADY,EASZ,CAACH,IAAD,EAAOK,QAAP,EAAiBN,WAAjB,EAA8BK,KAA9B,EAAqCH,OAArC,EAA8CE,UAA9C,CATY,CAAd;AAYA,sBAAO,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEG;AAA9B,KAAsCJ,QAAtC,CAAP;AACD,CAjBM;;AAmBP,IAAIb,OAAJ,EAAa;AACXQ,EAAAA,aAAa,CAACW,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\" | \"isDisabled\">,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {}\n\nconst [\n  CheckboxGroupProvider,\n  useCheckboxGroupContext,\n] = createContext<CheckboxGroupContext>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"],"file":"checkbox-group.js"}