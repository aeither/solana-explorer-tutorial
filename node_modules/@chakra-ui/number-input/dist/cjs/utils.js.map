{"version":3,"sources":["../../src/utils.ts"],"names":["FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length"],"mappings":";;;;;AAAA,IAAMA,oBAAoB,GAAG,eAA7B;AAEA;AACA;AACA;AACA;;AACO,SAASC,+BAAT,CAAyCC,SAAzC,EAA4D;AACjE,SAAOF,oBAAoB,CAACG,IAArB,CAA0BD,SAA1B,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASE,2BAAT,CAAqCC,KAArC,EAAiE;AACtE,MAAIA,KAAK,CAACC,GAAN,IAAa,IAAjB,EAAuB,OAAO,IAAP;AAEvB,MAAMC,aAAa,GAAGF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACI,MAAvB,IAAiCJ,KAAK,CAACK,OAA7D;;AAEA,MAAIH,aAAJ,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAMI,oBAAoB,GAAGN,KAAK,CAACC,GAAN,CAAUM,MAAV,KAAqB,CAAlD;;AAEA,MAAI,CAACD,oBAAL,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,SAAOV,+BAA+B,CAACI,KAAK,CAACC,GAAP,CAAtC;AACD","sourcesContent":["const FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nexport function isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\n/**\n * Determine if the event is a valid numeric keyboard event.\n * We use this so we can prevent non-number characters in the input\n */\nexport function isValidNumericKeyboardEvent(event: React.KeyboardEvent) {\n  if (event.key == null) return true\n\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n\n  if (isModifierKey) {\n    return true\n  }\n\n  const isSingleCharacterKey = event.key.length === 1\n\n  if (!isSingleCharacterKey) {\n    return true\n  }\n\n  return isFloatingPointNumericCharacter(event.key)\n}\n"],"file":"utils.js"}