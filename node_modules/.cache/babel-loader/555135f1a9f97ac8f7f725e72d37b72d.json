{"ast":null,"code":"import _defineProperty from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\";\nimport { addItem, removeItem, isInputEvent } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\n\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultValue = _props.defaultValue,\n      valueProp = _props.value,\n      onChange = _props.onChange,\n      isDisabled = _props.isDisabled,\n      isNative = _props.isNative;\n  var onChangeProp = useCallbackRef(onChange);\n\n  var _useControllableState = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var handleChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function (props) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, (_extends2 = {}, _defineProperty(_extends2, checkedKey, value.includes(props.value)), _defineProperty(_extends2, \"onChange\", handleChange), _extends2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}","map":{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["props","value","isNative","onChangeProp","useCallbackRef","useControllableState","defaultValue","onChange","handleChange","useCallback","eventOrValue","isChecked","isInputEvent","selectedValue","nextValue","addItem","removeItem","setValue","getCheckboxProps","checkedKey","isDisabled"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,EAAA,oBAAA,QAAA,kBAAA;AACA,SAAA,OAAA,EAAA,UAAA,EAAA,YAAA,QAAA,kBAAA;AAOA,SAAA,WAAA,QAAA,OAAA;AA8BA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAA6D;AAAA,MAAnCA,KAAmC,KAAA,KAAA,CAAA,EAAA;AAAnCA,IAAAA,KAAmC,GAAJ,EAA/BA;AAAmC;;AAClE,eAAA,KAAA;AAAA,MAAM,YAAN,UAAM,YAAN;AAAA,MAAM,SAAN,UAEEC,KAFF;AAAA,MAAM,QAAN,UAAM,QAAN;AAAA,MAAM,UAAN,UAAM,UAAN;AAAA,MAKEC,QALF,UAKEA,QALF;AAQA,MAAMC,YAAY,GAAGC,cAAc,CAAnC,QAAmC,CAAnC;;AAEA,8BAA0BC,oBAAoB,CAAC;AAC7CJ,IAAAA,KAAK,EADwC,SAAA;AAE7CK,IAAAA,YAAY,EAAEA,YAAY,IAFmB,EAAA;AAG7CC,IAAAA,QAAQ,EAAEJ;AAHmC,GAAD,CAA9C;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AAMA,MAAMK,YAAY,GAAGC,WAAW,CAC7BC,UAAAA,YAAD,EAAgC;AAC9B,QAAI,CAAJ,KAAA,EAAY;AAEZ,QAAMC,SAAS,GAAGC,YAAY,CAAZA,YAAY,CAAZA,GACdF,YAAY,CAAZA,MAAAA,CADcE,OAAAA,GAEd,CAACX,KAAK,CAALA,QAAAA,CAFL,YAEKA,CAFL;AAIA,QAAMY,aAAa,GAAGD,YAAY,CAAZA,YAAY,CAAZA,GAClBF,YAAY,CAAZA,MAAAA,CADkBE,KAAAA,GAAtB,YAAA;AAIA,QAAME,SAAS,GAAGH,SAAS,GACvBI,OAAO,CAAA,KAAA,EADgB,aAChB,CADgB,GAEvBC,UAAU,CAAA,KAAA,EAFd,aAEc,CAFd;AAIAC,IAAAA,QAAQ,CAARA,SAAQ,CAARA;AAhB4B,GAAA,EAkB9B,CAAA,QAAA,EAlBF,KAkBE,CAlB8B,CAAhC;AAqBA,MAAMC,gBAAgB,GAAGT,WAAW,CAClC,UAAA,KAAA,EAAsB;AAAA;;AAAA,QAArBT,KAAqB,KAAA,KAAA,CAAA,EAAA;AAArBA,MAAAA,KAAqB,GAAP,EAAdA;AAAqB;;AACpB,QAAMmB,UAAU,GAAGjB,QAAQ,GAAA,SAAA,GAA3B,WAAA;AACA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA,8CAEE,UAFF,EAEgBD,KAAK,CAALA,QAAAA,CAAeD,KAAK,CAFpC,KAEgBC,CAFhB,0CAGYO,YAHZ,cAAA;AAHgC,GAAA,EASlC,CAAA,YAAA,EAAA,QAAA,EATF,KASE,CATkC,CAApC;AAYA,SAAO;AACLP,IAAAA,KADK,EACLA,KADK;AAELmB,IAAAA,UAFK,EAELA,UAFK;AAGLb,IAAAA,QAAQ,EAHH,YAAA;AAILU,IAAAA,QAJK,EAILA,QAJK;AAKLC,IAAAA,gBAAAA,EAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  Dict,\n  removeItem,\n  StringOrNumber,\n  isInputEvent,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, all wrapped checkbox inputs will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module"}