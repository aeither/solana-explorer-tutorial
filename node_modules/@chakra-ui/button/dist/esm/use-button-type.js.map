{"version":3,"sources":["../../src/use-button-type.tsx"],"names":["React","useButtonType","value","isButton","setIsButton","useState","refCallback","useCallback","node","tagName","type","undefined","ref"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAkD;AACvD,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,KAAK,CAACK,QAAN,CAAe,CAACH,KAAhB,CAAhC;AACA,MAAMI,WAAW,GAAGN,KAAK,CAACO,WAAN,CAAmBC,IAAD,IAA8B;AAClE,QAAI,CAACA,IAAL,EAAW;AACXJ,IAAAA,WAAW,CAACI,IAAI,CAACC,OAAL,KAAiB,QAAlB,CAAX;AACD,GAHmB,EAGjB,EAHiB,CAApB;AAIA,MAAMC,IAAI,GAAGP,QAAQ,GAAG,QAAH,GAAcQ,SAAnC;AACA,SAAO;AAAEC,IAAAA,GAAG,EAAEN,WAAP;AAAoBI,IAAAA;AAApB,GAAP;AACD","sourcesContent":["import * as React from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = React.useState(!value)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n"],"file":"use-button-type.js"}