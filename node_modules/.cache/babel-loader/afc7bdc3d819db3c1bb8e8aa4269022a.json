{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\n\nexport var Input = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n  var ownProps = omitThemingProps(props);\n  var input = useFormControl(ownProps);\n\n  var _className = cx(\"chakra-input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    __css: styles.field,\n    ref: ref,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  Input.displayName = \"Input\";\n} // This is used in `input-group.tsx`\n\n\nInput.id = \"Input\";","map":{"version":3,"sources":["../../src/input.tsx"],"names":["Input","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","input","useFormControl","_className","cx","props"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,QAAA,yBAAA;AACA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,mBAAA,QAAA,mBAAA;AAQA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAiCA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,KAAK,GAAA,aAAGC,UAAU,CAAsB,UAAA,KAAA,EAAA,GAAA,EAAgB;AACnE,MAAMC,MAAM,GAAGC,mBAAmB,CAAA,OAAA,EAAlC,KAAkC,CAAlC;AACA,MAAMC,QAAQ,GAAGC,gBAAgB,CAAjC,KAAiC,CAAjC;AACA,MAAMC,KAAK,GAAGC,cAAc,CAA5B,QAA4B,CAA5B;;AACA,MAAMC,UAAU,GAAGC,EAAE,CAAA,cAAA,EAAiBC,KAAK,CAA3C,SAAqB,CAArB;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,KAAK,EAAER,MAAM,CAFf,KAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,SAAS,EAAEM;AAJb,GAAA,CAAA,CADF;AANK,CAAwB,CAAxB;;AAgBP,IAAA,OAAA,EAAa;AACXR,EAAAA,KAAK,CAALA,WAAAA,GAAAA,OAAAA;EAGF;;;AACAA,KAAK,CAALA,EAAAA,GAAAA,OAAAA","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"]},"metadata":{},"sourceType":"module"}