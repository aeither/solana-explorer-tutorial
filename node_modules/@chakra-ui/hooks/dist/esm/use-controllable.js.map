{"version":3,"sources":["../../src/use-controllable.ts"],"names":["runIfFn","React","useCallbackRef","useControllableProp","prop","state","isControlled","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","valueState","setValue","useState","updateValue","useCallback","nextValue"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,MAAMC,YAAY,GAAGF,IAAI,KAAKG,SAA9B;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAOF,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACC,YAAD,EAAeE,KAAf,CAAP;AACD;;AAqBD;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAC3E,MAAM;AACJF,IAAAA,KAAK,EAAEG,SADH;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,KAAKC;AAJpC,MAKFN,KALJ;AAMA,MAAMO,YAAY,GAAGf,cAAc,CAACW,QAAD,CAAnC;AACA,MAAMK,gBAAgB,GAAGhB,cAAc,CAACY,YAAD,CAAvC;AAEA,MAAM,CAACK,UAAD,EAAaC,QAAb,IAAyBnB,KAAK,CAACoB,QAAN,CAAeT,YAAf,CAA/B;AAEA,MAAMN,YAAY,GAAGK,SAAS,KAAKJ,SAAnC;AACA,MAAMC,KAAK,GAAGF,YAAY,GAAIK,SAAJ,GAAsBQ,UAAhD;AAEA,MAAMG,WAAW,GAAGrB,KAAK,CAACsB,WAAN,CACjBP,IAAD,IAAmC;AACjC,QAAMQ,SAAS,GAAGxB,OAAO,CAACgB,IAAD,EAAOR,KAAP,CAAzB;;AAEA,QAAI,CAACU,gBAAgB,CAACV,KAAD,EAAQgB,SAAR,CAArB,EAAyC;AACvC;AACD;;AAED,QAAI,CAAClB,YAAL,EAAmB;AACjBc,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACD;;AAEDP,IAAAA,YAAY,CAACO,SAAD,CAAZ;AACD,GAbiB,EAclB,CAAClB,YAAD,EAAeW,YAAf,EAA6BT,KAA7B,EAAoCU,gBAApC,CAdkB,CAApB;AAiBA,SAAO,CAACV,KAAD,EAAQc,WAAR,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}