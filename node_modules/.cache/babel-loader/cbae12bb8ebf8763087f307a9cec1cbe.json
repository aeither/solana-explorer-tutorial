{"ast":null,"code":"import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function visualElement(_a) {\n  var _b = _a.treeType,\n      treeType = _b === void 0 ? \"\" : _b,\n      build = _a.build,\n      _getBaseTarget = _a.getBaseTarget,\n      _makeTargetAnimatable = _a.makeTargetAnimatable,\n      _measureViewportBox = _a.measureViewportBox,\n      renderInstance = _a.render,\n      readValueFromInstance = _a.readValueFromInstance,\n      _resetTransform = _a.resetTransform,\n      _restoreTransform = _a.restoreTransform,\n      removeValueFromRenderState = _a.removeValueFromRenderState,\n      _sortNodePosition = _a.sortNodePosition,\n      scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n  return function (_a, options) {\n    var parent = _a.parent,\n        props = _a.props,\n        presenceId = _a.presenceId,\n        blockInitialAnimation = _a.blockInitialAnimation,\n        visualState = _a.visualState;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    var instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender and onViewportBoxUpdate.\n     */\n\n    var lifecycles = createLifecycles();\n    /**\n     *\n     */\n\n    var projection = createProjectionState();\n    /**\n     * A reference to the nearest projecting parent. This is either\n     * undefined if we haven't looked for the nearest projecting parent,\n     * false if there is no parent performing layout projection, or a reference\n     * to the projecting parent.\n     */\n\n    var projectionParent;\n    /**\n     * This is a reference to the visual state of the \"lead\" visual element.\n     * Usually, this will be this visual element. But if it shares a layoutId\n     * with other visual elements, only one of them will be designated lead by\n     * AnimateSharedLayout. All the other visual elements will take on the visual\n     * appearance of the lead while they crossfade to it.\n     */\n\n    var leadProjection = projection;\n    var leadLatestValues = latestValues;\n    var unsubscribeFromLeadVisualElement;\n    /**\n     * The latest layout measurements and calculated projections. This\n     * is seperate from the target projection data in visualState as\n     * many visual elements might point to the same piece of visualState as\n     * a target, whereas they might each have different layouts and thus\n     * projection calculations needed to project into the same viewport box.\n     */\n\n    var layoutState = createLayoutState();\n    /**\n     *\n     */\n\n    var crossfader;\n    /**\n     * Keep track of whether the viewport box has been updated since the\n     * last time the layout projection was re-calculated.\n     */\n\n    var hasViewportBoxUpdated = false;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    var prevMotionValues = {};\n    /**\n     * x/y motion values that track the progress of initiated layout\n     * animations.\n     *\n     * TODO: Target for removal\n     */\n\n    var projectionTargetProgress;\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    var baseTarget = __assign({}, latestValues); // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n\n    var removeFromVariantTree;\n    /**\n     *\n     */\n\n    function render() {\n      if (!instance) return;\n\n      if (element.isProjectionReady()) {\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n\n        updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n      }\n\n      triggerBuild();\n      renderInstance(instance, renderState);\n    }\n\n    function triggerBuild() {\n      var valuesToRender = latestValues;\n\n      if (crossfader && crossfader.isActive()) {\n        var crossfadedValues = crossfader.getCrossfadeState(element);\n        if (crossfadedValues) valuesToRender = crossfadedValues;\n      }\n\n      build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n\n    function updateLayoutProjection() {\n      if (!element.isProjectionReady()) return;\n      var delta = layoutState.delta,\n          treeScale = layoutState.treeScale;\n      var prevTreeScaleX = treeScale.x;\n      var prevTreeScaleY = treeScale.y;\n      var prevDeltaTransform = layoutState.deltaTransform;\n      updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta);\n      hasViewportBoxUpdated = false;\n      var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n\n      if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction\n      prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {\n        element.scheduleRender();\n      }\n\n      layoutState.deltaTransform = deltaTransform;\n    }\n\n    function _updateTreeLayoutProjection() {\n      element.layoutTree.forEach(fireUpdateLayoutProjection);\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    var initialMotionValues = scrapeMotionValuesFromProps(props);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n\n    var element = __assign(__assign({\n      treeType: treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent: parent,\n      children: new Set(),\n\n      /**\n       * An ancestor path back to the root visual element. This is used\n       * by layout projection to quickly recurse back up the tree.\n       */\n      path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],\n      layoutTree: parent ? parent.layoutTree : new FlatTree(),\n\n      /**\n       *\n       */\n      presenceId: presenceId,\n      projection: projection,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by AnimateSharedLayout, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function isMounted() {\n        return Boolean(instance);\n      },\n      mount: function mount(newInstance) {\n        instance = element.current = newInstance;\n        element.pointTo(element);\n\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n      },\n\n      /**\n       *\n       */\n      unmount: function unmount() {\n        cancelSync.update(update);\n        cancelSync.render(render);\n        cancelSync.preRender(element.updateLayoutProjection);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        element.stopLayoutAnimation();\n        element.layoutTree.remove(element);\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        lifecycles.clearAllListeners();\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild: function addVariantChild(child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!_sortNodePosition || treeType !== other.treeType) return 0;\n        return _sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function getClosestVariantNode() {\n        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\n       * A method that schedules an update to layout projections throughout\n       * the tree. We inherit from the parent so there's only ever one\n       * job scheduled on the next frame - that of the root visual element.\n       */\n      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function () {\n        return sync.preRender(element.updateTreeLayoutProjection, false, true);\n      },\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function getLayoutId() {\n        return props.layoutId;\n      },\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function getInstance() {\n        return instance;\n      },\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function getStaticValue(key) {\n        return latestValues[key];\n      },\n      setStaticValue: function setStaticValue(key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function getLatestValues() {\n        return latestValues;\n      },\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility: function setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable: function makeTargetAnimatable(target, canMutate) {\n        if (canMutate === void 0) {\n          canMutate = true;\n        }\n\n        return _makeTargetAnimatable(element, target, props, canMutate);\n      },\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue: function removeValue(key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function hasValue(key) {\n        return values.has(key);\n      },\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue: function getValue(key, defaultValue) {\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function forEachValue(callback) {\n        return values.forEach(callback);\n      },\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function readValue(key) {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget: function setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget: function getBaseTarget(key) {\n        if (_getBaseTarget) {\n          var target = _getBaseTarget(props, key);\n\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build: function build() {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender: function scheduleRender() {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps: function setProps(newProps) {\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function getProps() {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function getVariant(name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function getDefaultTransition() {\n        return props.transition;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext: function getVariantContext(startAtParent) {\n        if (startAtParent === void 0) {\n          startAtParent = false;\n        }\n\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context_1.initial = props.initial;\n          }\n\n          return context_1;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name_1 = variantProps[i];\n          var prop = props[name_1];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name_1] = prop;\n          }\n        }\n\n        return context;\n      },\n      // Layout projection ==============================\n\n      /**\n       * Enable layout projection for this visual element. Won't actually\n       * occur until we also have hydrated layout measurements.\n       */\n      enableLayoutProjection: function enableLayoutProjection() {\n        projection.isEnabled = true;\n        element.layoutTree.add(element);\n      },\n\n      /**\n       * Lock the projection target, for instance when dragging, so\n       * nothing else can try and animate it.\n       */\n      lockProjectionTarget: function lockProjectionTarget() {\n        projection.isTargetLocked = true;\n      },\n      unlockProjectionTarget: function unlockProjectionTarget() {\n        element.stopLayoutAnimation();\n        projection.isTargetLocked = false;\n      },\n      getLayoutState: function getLayoutState() {\n        return layoutState;\n      },\n      setCrossfader: function setCrossfader(newCrossfader) {\n        crossfader = newCrossfader;\n      },\n      isProjectionReady: function isProjectionReady() {\n        return projection.isEnabled && projection.isHydrated && layoutState.isHydrated;\n      },\n\n      /**\n       * Start a layout animation on a given axis.\n       */\n      startLayoutAnimation: function startLayoutAnimation(axis, transition, isRelative) {\n        if (isRelative === void 0) {\n          isRelative = false;\n        }\n\n        var progress = element.getProjectionAnimationProgress()[axis];\n\n        var _a = isRelative ? projection.relativeTarget[axis] : projection.target[axis],\n            min = _a.min,\n            max = _a.max;\n\n        var length = max - min;\n        progress.clearListeners();\n        progress.set(min);\n        progress.set(min); // Set twice to hard-reset velocity\n\n        progress.onChange(function (v) {\n          element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n        });\n        return element.animateMotionValue(axis, progress, 0, transition);\n      },\n\n      /**\n       * Stop layout animations.\n       */\n      stopLayoutAnimation: function stopLayoutAnimation() {\n        eachAxis(function (axis) {\n          return element.getProjectionAnimationProgress()[axis].stop();\n        });\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox: function measureViewportBox(withTransform) {\n        if (withTransform === void 0) {\n          withTransform = true;\n        }\n\n        var viewportBox = _measureViewportBox(instance, options);\n\n        if (!withTransform) removeBoxTransforms(viewportBox, latestValues);\n        return viewportBox;\n      },\n\n      /**\n       * Get the motion values tracking the layout animations on each\n       * axis. Lazy init if not already created.\n       */\n      getProjectionAnimationProgress: function getProjectionAnimationProgress() {\n        projectionTargetProgress || (projectionTargetProgress = {\n          x: motionValue(0),\n          y: motionValue(0)\n        });\n        return projectionTargetProgress;\n      },\n\n      /**\n       * Update the projection of a single axis. Schedule an update to\n       * the tree layout projection.\n       */\n      setProjectionTargetAxis: function setProjectionTargetAxis(axis, min, max, isRelative) {\n        if (isRelative === void 0) {\n          isRelative = false;\n        }\n\n        var target;\n\n        if (isRelative) {\n          if (!projection.relativeTarget) {\n            projection.relativeTarget = axisBox();\n          }\n\n          target = projection.relativeTarget[axis];\n        } else {\n          projection.relativeTarget = undefined;\n          target = projection.target[axis];\n        }\n\n        projection.isHydrated = true;\n        target.min = min;\n        target.max = max; // Flag that we want to fire the onViewportBoxUpdate event handler\n\n        hasViewportBoxUpdated = true;\n        lifecycles.notifySetAxisTarget();\n      },\n\n      /**\n       * Rebase the projection target on top of the provided viewport box\n       * or the measured layout. This ensures that non-animating elements\n       * don't fall out of sync differences in measurements vs projections\n       * after a page scroll or other relayout.\n       */\n      rebaseProjectionTarget: function rebaseProjectionTarget(force, box) {\n        if (box === void 0) {\n          box = layoutState.layout;\n        }\n\n        var _a = element.getProjectionAnimationProgress(),\n            x = _a.x,\n            y = _a.y;\n\n        var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();\n\n        if (force || shouldRebase) {\n          eachAxis(function (axis) {\n            var _a = box[axis],\n                min = _a.min,\n                max = _a.max;\n            element.setProjectionTargetAxis(axis, min, max);\n          });\n        }\n      },\n\n      /**\n       * Notify the visual element that its layout is up-to-date.\n       * Currently Animate.tsx uses this to check whether a layout animation\n       * needs to be performed.\n       */\n      notifyLayoutReady: function notifyLayoutReady(config) {\n        setCurrentViewportBox(element);\n        element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n      },\n\n      /**\n       * Temporarily reset the transform of the instance.\n       */\n      resetTransform: function resetTransform() {\n        return _resetTransform(element, instance, props);\n      },\n      restoreTransform: function restoreTransform() {\n        return _restoreTransform(instance, renderState);\n      },\n      updateLayoutProjection: updateLayoutProjection,\n      updateTreeLayoutProjection: function updateTreeLayoutProjection() {\n        element.layoutTree.forEach(fireResolveRelativeTargetBox);\n        /**\n         * Schedule the projection updates at the end of the current preRender\n         * step. This will ensure that all layout trees will first resolve\n         * relative projection boxes into viewport boxes, and *then*\n         * update projections.\n         */\n\n        sync.preRender(_updateTreeLayoutProjection, false, true); // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n      },\n      getProjectionParent: function getProjectionParent() {\n        if (projectionParent === undefined) {\n          var foundParent = false; // Search backwards through the tree path\n\n          for (var i = element.path.length - 1; i >= 0; i--) {\n            var ancestor = element.path[i];\n\n            if (ancestor.projection.isEnabled) {\n              foundParent = ancestor;\n              break;\n            }\n          }\n\n          projectionParent = foundParent;\n        }\n\n        return projectionParent;\n      },\n      resolveRelativeTargetBox: function resolveRelativeTargetBox() {\n        var relativeParent = element.getProjectionParent();\n        if (!projection.relativeTarget || !relativeParent) return;\n        calcRelativeBox(projection, relativeParent.projection);\n\n        if (isDraggable(relativeParent)) {\n          var target = projection.target;\n          applyBoxTransforms(target, target, relativeParent.getLatestValues());\n        }\n      },\n      shouldResetTransform: function shouldResetTransform() {\n        return Boolean(props._layoutResetTransform);\n      },\n\n      /**\n       *\n       */\n      pointTo: function pointTo(newLead) {\n        leadProjection = newLead.projection;\n        leadLatestValues = newLead.getLatestValues();\n        /**\n         * Subscribe to lead component's layout animations\n         */\n\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n          var _a;\n\n          if (element.isPresent) {\n            element.presence = Presence.Present;\n          } else {\n            (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n          }\n        }));\n      },\n      // TODO: Clean this up\n      isPresent: true,\n      presence: Presence.Entering\n    });\n\n    return element;\n  };\n};\n\nfunction fireResolveRelativeTargetBox(child) {\n  child.resolveRelativeTargetBox();\n}\n\nfunction fireUpdateLayoutProjection(child) {\n  child.updateLayoutProjection();\n}\n\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\n\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/render/index.js"],"names":["__assign","__spreadArray","__read","sync","cancelSync","pipe","Presence","eachAxis","axisBox","removeBoxTransforms","applyBoxTransforms","calcRelativeBox","updateBoxDelta","motionValue","isMotionValue","buildLayoutProjectionTransform","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","updateLayoutDeltas","createLayoutState","createProjectionState","FlatTree","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","setCurrentViewportBox","isDraggable","visualElement","_a","_b","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","options","parent","props","presenceId","blockInitialAnimation","visualState","latestValues","renderState","instance","lifecycles","projection","projectionParent","leadProjection","leadLatestValues","unsubscribeFromLeadVisualElement","layoutState","crossfader","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","projectionTargetProgress","baseTarget","removeFromVariantTree","element","isProjectionReady","targetFinal","target","deltaFinal","layoutCorrected","triggerBuild","valuesToRender","isActive","crossfadedValues","getCrossfadeState","update","notifyUpdate","updateLayoutProjection","delta","treeScale","prevTreeScaleX","x","prevTreeScaleY","y","prevDeltaTransform","deltaTransform","path","notifyViewportBoxUpdate","scheduleRender","updateTreeLayoutProjection","layoutTree","forEach","fireUpdateLayoutProjection","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","set","initialMotionValues","undefined","isControllingVariants","isVariantNode","current","depth","children","Set","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","isMounted","mount","newInstance","pointTo","addVariantChild","add","unmount","preRender","remove","stopLayoutAnimation","delete","clearAllListeners","child","closestVariantNode","getClosestVariantNode","other","getInstance","scheduleUpdateLayoutProjection","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","setProps","newProps","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getVariantContext","startAtParent","context_1","initial","context","i","numVariantProps","name_1","variantProps","prop","enableLayoutProjection","isEnabled","lockProjectionTarget","isTargetLocked","unlockProjectionTarget","getLayoutState","setCrossfader","newCrossfader","isHydrated","startLayoutAnimation","axis","isRelative","progress","getProjectionAnimationProgress","relativeTarget","min","max","length","clearListeners","v","setProjectionTargetAxis","animateMotionValue","stop","withTransform","viewportBox","notifySetAxisTarget","rebaseProjectionTarget","force","box","layout","shouldRebase","isAnimating","notifyLayoutReady","config","notifyLayoutUpdate","prevViewportBox","fireResolveRelativeTargetBox","getProjectionParent","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","isPresent","presence","Present","layoutSafeToRemove","call","Entering"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n"]},"metadata":{},"sourceType":"module"}