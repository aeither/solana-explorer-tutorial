{"ast":null,"code":"import _slicedToArray from \"/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { ariaAttr, callAllHandlers, dataAttr, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useRadioGroupContext } from \"./radio-group\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultIsChecked = _props.defaultIsChecked,\n      _props$defaultChecked = _props.defaultChecked,\n      defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n      isCheckedProp = _props.isChecked,\n      isFocusable = _props.isFocusable,\n      isDisabledProp = _props.isDisabled,\n      isReadOnlyProp = _props.isReadOnly,\n      isRequiredProp = _props.isRequired,\n      onChange = _props.onChange,\n      isInvalidProp = _props.isInvalid,\n      name = _props.name,\n      value = _props.value,\n      idProp = _props.id,\n      dataRadioGroup = _props[\"data-radiogroup\"],\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\", \"data-radiogroup\"]);\n\n  var uuid = useId(undefined, \"radio\");\n  var formControl = useFormControlContext();\n  var group = useRadioGroupContext();\n  var isWithinRadioGroup = !!group || !!dataRadioGroup;\n  var isWithinFormControl = !!formControl;\n  var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      isFocused = _useBoolean2[0],\n      setFocused = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isHovered = _useBoolean4[0],\n      setHovering = _useBoolean4[1];\n\n  var _useBoolean5 = useBoolean(),\n      _useBoolean6 = _slicedToArray(_useBoolean5, 2),\n      isActive = _useBoolean6[0],\n      setActive = _useBoolean6[1];\n\n  var ref = useRef(null);\n\n  var _useState = useState(Boolean(defaultChecked)),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCheckedState = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useControllableProp = useControllableProp(isCheckedProp, isCheckedState),\n      _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n      isControlled = _useControllableProp2[0],\n      isChecked = _useControllableProp2[1];\n\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n\n  var _ref = formControl != null ? formControl : {},\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur;\n\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var trulyDisabled = isDisabled && !isFocusable;\n    return _extends({}, props, {\n      id: id,\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name: name,\n      value: value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-required\": ariaAttr(isRequired),\n      style: visuallyHiddenStyle\n    });\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, setFocused, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid]);\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-radio.ts"],"names":["props","defaultChecked","isChecked","isDisabled","isReadOnly","isRequired","isInvalid","id","dataRadioGroup","uuid","useId","formControl","useFormControlContext","group","useRadioGroupContext","isWithinRadioGroup","isWithinFormControl","idProp","isDisabledProp","isReadOnlyProp","isRequiredProp","isInvalidProp","useBoolean","ref","useRef","useState","Boolean","useControllableProp","warn","condition","message","handleChange","useCallback","event","setChecked","onChange","onKeyDown","setActive","onKeyUp","getCheckboxProps","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovering","onMouseLeave","onBlur","getInputProps","forwardedRef","trulyDisabled","mergeRefs","type","name","value","setFocused","onFocus","checked","disabled","readOnly","required","ariaAttr","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isFocused","isActive","isHovered","htmlProps"],"mappings":"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","sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { useBoolean, useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    ...htmlProps\n  } = props\n\n  const uuid = useId(undefined, \"radio\")\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const trulyDisabled = isDisabled && !isFocusable\n\n      return {\n        ...props,\n        id,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        required: isRequired,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-required\": ariaAttr(isRequired),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      isDisabled,\n      isFocusable,\n      id,\n      name,\n      value,\n      handleChange,\n      onBlur,\n      setFocused,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n      isReadOnly,\n      isRequired,\n      isInvalid,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}