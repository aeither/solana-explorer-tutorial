{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\n\nexport var Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\n\nif (__DEV__) {\n  Center.displayName = \"Center\";\n}\n\nvar centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\"\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\n\nexport var AbsoluteCenter = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$axis = props.axis,\n      axis = _props$axis === void 0 ? \"both\" : _props$axis,\n      rest = _objectWithoutPropertiesLoose(props, [\"axis\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: centerStyles[axis]\n  }, rest, {\n    position: \"absolute\"\n  }));\n});","map":{"version":3,"sources":["../../src/center.tsx"],"names":["Center","chakra","baseStyle","display","alignItems","justifyContent","centerStyles","horizontal","insetStart","transform","vertical","top","both","AbsoluteCenter","forwardRef","axis"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,mBAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,MAAM,GAAGC,MAAM,CAAA,KAAA,EAAQ;AAClCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EADE,MAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAAE;AAHP;AADuB,CAAR,CAArB;;AAQP,IAAA,OAAA,EAAa;AACXL,EAAAA,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD;;AAMD,IAAMM,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EADA,KAAA;AAEVC,IAAAA,SAAS,EAAE;AAFD,GADO;AAKnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EADK,KAAA;AAERF,IAAAA,SAAS,EAAE;AAFH,GALS;AASnBG,EAAAA,IAAI,EAAE;AACJJ,IAAAA,UAAU,EADN,KAAA;AAEJG,IAAAA,GAAG,EAFC,KAAA;AAGJF,IAAAA,SAAS,EAAE;AAHP;AATa,CAArB;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,cAAc,GAAA,aAAGC,UAAU,CACtC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACd,oBAAA,KAAA,CAAQC,IAAR;AAAA,MAAQA,IAAR,4BAAe,MAAf;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,MAAA,CAAA,CAAA;;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,KAAK,EAAET,YAAY,CAAA,IAAA;AAFrB,GAAA,EAAA,IAAA,EAAA;AAIE,IAAA,QAAQ,EAAC;AAJX,GAAA,CAAA,CADF;AAHG,CAAiC,CAAjC","sourcesContent":["import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nif (__DEV__) {\n  Center.displayName = \"Center\"\n}\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  (props, ref) => {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n"]},"metadata":{},"sourceType":"module"}