{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["noop","PanSession","useEffect","useRef","usePointerEvent","useUnmountEffect","usePanGesture","ref","props","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","hasPanEvents","Boolean","panSession","handlers","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"mappings":"AAAA,SAEEA,IAFF,EAIEC,UAJF,QAMO,kBANP;AAOA,SAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAUA,OAAO,SAASC,aAAT,CACLC,GADK,EAELC,KAFK,EAGL;AACA,MAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,MAAMM,YAAY,GAAGC,OAAO,CAC1BN,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAnC,IAAwDC,eAD9B,CAA5B;AAIA,MAAMG,UAAU,GAAGb,MAAM,CAAoB,IAApB,CAAzB;AAEA,MAAMc,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAAEN,iBAD4B;AAE5CO,IAAAA,YAAY,EAAEN,eAF8B;AAG5CO,IAAAA,OAAO,EAAEV,UAHmC;AAI5CW,IAAAA,MAAM,EAAEZ,KAJoC;;AAK5Ca,IAAAA,KAAK,CAACC,KAAD,EAAQC,IAAR,EAAc;AACjBR,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACAd,MAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGY,KAAH,EAAUC,IAAV,CAAR;AACD;;AAR2C,GAA9C;AAWAtB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,2BAAAc,UAAU,CAACS,OAAX,yCAAoBC,cAApB,CAAmCT,QAAnC;AACD,GAFQ,CAAT;;AAIA,WAASU,aAAT,CAAuBJ,KAAvB,EAA+C;AAC7CP,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAAIxB,UAAJ,CAAesB,KAAf,EAAsBN,QAAtB,CAArB;AACD;;AAEDb,EAAAA,eAAe,CACb,MAAMG,GAAG,CAACkB,OADG,EAEb,aAFa,EAGbX,YAAY,GAAGa,aAAH,GAAmB3B,IAHlB,CAAf;AAMAK,EAAAA,gBAAgB,CAAC,MAAM;AAAA;;AACrB,4BAAAW,UAAU,CAACS,OAAX,0CAAoBG,GAApB;AACAZ,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACD,GAHe,CAAhB;AAID","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"],"file":"use-pan-gesture.js"}