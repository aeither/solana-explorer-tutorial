{"ast":null,"code":"import { __DEV__ } from \"@chakra-ui/utils\";\n\nvar hasSupport = function hasSupport() {\n  return typeof Storage !== \"undefined\";\n};\n\nexport var storageKey = \"chakra-ui-color-mode\";\n/**\n * Simple object to handle read-write to localStorage\n */\n\nexport var localStorageManager = {\n  get: function get(init) {\n    if (!hasSupport()) return init;\n\n    try {\n      var _value = localStorage.getItem(storageKey);\n\n      return _value != null ? _value : init;\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n\n      return init;\n    }\n  },\n  set: function set(value) {\n    if (!hasSupport()) return;\n\n    try {\n      localStorage.setItem(storageKey, value);\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error);\n      }\n    }\n  },\n  type: \"localStorage\"\n};\n/**\n * Simple object to handle read-write to cookies\n */\n\nexport var cookieStorageManager = function cookieStorageManager(cookies) {\n  if (cookies === void 0) {\n    cookies = \"\";\n  }\n\n  return {\n    get: function get(init) {\n      var match = cookies.match(new RegExp(\"(^| )\" + storageKey + \"=([^;]+)\"));\n\n      if (match) {\n        return match[2];\n      }\n\n      return init;\n    },\n    set: function set(value) {\n      document.cookie = storageKey + \"=\" + value + \"; max-age=31536000; path=/\";\n    },\n    type: \"cookie\"\n  };\n};","map":{"version":3,"sources":["../../src/storage-manager.ts"],"names":["hasSupport","storageKey","localStorageManager","get","value","localStorage","console","set","type","cookieStorageManager","cookies","match","document"],"mappings":"AAAA,SAAA,OAAA,QAAA,kBAAA;;AAGA,IAAMA,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,OAAA,OAAA,KAAzB,WAAmB;AAAA,CAAnB;;AACA,OAAO,IAAMC,UAAU,GAAhB,sBAAA;AAUP;AACA;AACA;;AACA,OAAO,IAAMC,mBAAmC,GAAG;AACjDC,EAAAA,GADiD,eAC9C,IAD8C,EACtC;AACT,QAAI,CAACH,UAAL,EAAA,EAAmB,OAAA,IAAA;;AACnB,QAAI;AACF,UAAMI,MAAK,GAAGC,YAAY,CAAZA,OAAAA,CAAd,UAAcA,CAAd;;AACA,aAAOD,MAAP,IAAA,IAAOA,GAAP,MAAOA,GAAP,IAAA;AAFF,KAAA,CAGE,OAAA,KAAA,EAAc;AACd,UAAA,OAAA,EAAa;AACXE,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACD;;AACD,aAAA,IAAA;AACD;AAX8C,GAAA;AAajDC,EAAAA,GAbiD,eAa9C,KAb8C,EAatC;AACT,QAAI,CAACP,UAAL,EAAA,EAAmB;;AACnB,QAAI;AACHK,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,UAAAA,EAAAA,KAAAA;AADD,KAAA,CAEE,OAAA,KAAA,EAAc;AACd,UAAA,OAAA,EAAa;AACXC,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACD;AACF;AArB8C,GAAA;AAuBjDE,EAAAA,IAAI,EAAE;AAvB2C,CAA5C;AA0BP;AACA;AACA;;AACA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,OAAA,EAAA;AAAA,MAACC,OAAD,KAAA,KAAA,CAAA,EAAA;AAACA,IAAAA,OAAD,GAAA,EAACA;AAAD;;AAAA,SAAmC;AACrEP,IAAAA,GADqE,eAClE,IADkE,EAC1D;AACT,UAAMQ,KAAK,GAAGD,OAAO,CAAPA,KAAAA,CAAc,IAAA,MAAA,CAAA,UAAA,UAAA,GAA5B,UAA4B,CAAdA,CAAd;;AAEA,UAAA,KAAA,EAAW;AACT,eAAOC,KAAK,CAAZ,CAAY,CAAZ;AACD;;AAED,aAAA,IAAA;AARmE,KAAA;AAUrEJ,IAAAA,GAVqE,eAUlE,KAVkE,EAU1D;AACTK,MAAAA,QAAQ,CAARA,MAAAA,GAAqBX,UAArBW,GAAAA,GAAqBX,GAArBW,KAAqBX,GAArBW,4BAAAA;AAXmE,KAAA;AAarEJ,IAAAA,IAAI,EAAE;AAb+D,GAAnC;AAA7B,CAAA","sourcesContent":["import { __DEV__ } from \"@chakra-ui/utils\"\nimport { ColorMode } from \"./color-mode.utils\"\n\nconst hasSupport = () => typeof Storage !== \"undefined\"\nexport const storageKey = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode): void\n  type: \"cookie\" | \"localStorage\"\n}\n\n/**\n * Simple object to handle read-write to localStorage\n */\nexport const localStorageManager: StorageManager = {\n  get(init?) {\n    if (!hasSupport()) return init\n    try {\n      const value = localStorage.getItem(storageKey) as MaybeColorMode\n      return value ?? init\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error)\n      }\n      return init\n    }\n  },\n  set(value) {\n    if (!hasSupport()) return\n    try {\n     localStorage.setItem(storageKey, value)\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error)\n      }\n    }\n  },\n  type: \"localStorage\",\n}\n\n/**\n * Simple object to handle read-write to cookies\n */\nexport const cookieStorageManager = (cookies = \"\"): StorageManager => ({\n  get(init?) {\n    const match = cookies.match(new RegExp(`(^| )${storageKey}=([^;]+)`))\n\n    if (match) {\n      return match[2] as ColorMode\n    }\n\n    return init\n  },\n  set(value) {\n    document.cookie = `${storageKey}=${value}; max-age=31536000; path=/`\n  },\n  type: \"cookie\",\n})\n"]},"metadata":{},"sourceType":"module"}