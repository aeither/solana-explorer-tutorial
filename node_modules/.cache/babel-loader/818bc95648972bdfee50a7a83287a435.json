{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { PinInputDescendantsProvider, PinInputProvider, usePinInput, usePinInputField } from \"./use-pin-input\";\nexport var PinInput = function PinInput(props) {\n  var styles = useStyleConfig(\"PinInput\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var _usePinInput = usePinInput(rest),\n      descendants = _usePinInput.descendants,\n      context = _objectWithoutPropertiesLoose(_usePinInput, [\"descendants\"]);\n\n  var clones = getValidChildren(children).map(function (child) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      __css: styles\n    });\n  });\n  return /*#__PURE__*/React.createElement(PinInputDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(PinInputProvider, {\n    value: context\n  }, clones));\n};\n\nif (__DEV__) {\n  PinInput.displayName = \"PinInput\";\n}\n\nexport var PinInputField = /*#__PURE__*/forwardRef(function (props, ref) {\n  var inputProps = usePinInputField(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, inputProps, {\n    className: cx(\"chakra-pin-input\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  PinInputField.displayName = \"PinInputField\";\n}","map":{"version":3,"sources":["../../src/pin-input.tsx"],"names":["PinInput","props","styles","useStyleConfig","children","omitThemingProps","descendants","usePinInput","clones","child","__css","context","PinInputField","forwardRef","inputProps","usePinInputField","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AAQA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,SAAA,gBAAA,QAAA,wBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,2BAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,gBAAA,QAAA,iBAAA;AAiCA,OAAO,IAAMA,QAAiC,GAAIC,SAArCD,QAAqCC,CAAAA,KAAD,EAAW;AAC1D,MAAMC,MAAM,GAAGC,cAAc,CAAA,UAAA,EAA7B,KAA6B,CAA7B;;AAEA,MAAA,iBAAA,GAA8BE,gBAAgB,CAA9C,KAA8C,CAA9C;AAAA,MAAQD,QAAR,GAAA,iBAAA,CAAQA,QAAR;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAoCG,WAAW,CAA/C,IAA+C,CAA/C;AAAA,MAAQD,WAAR,GAAA,YAAA,CAAQA,WAAR;AAAA,MAAA,OAAA,GAAA,6BAAA,CAAA,YAAA,EAAA,CAAA,aAAA,CAAA,CAAA;;AAEA,MAAME,MAAM,GAAG,gBAAgB,CAAhB,QAAgB,CAAhB,CAAA,GAAA,CAAgCC,UAAAA,KAAD;AAAA,WAAA,aAC5C,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAAEC,MAAAA,KAAK,EAAER;AAAT,KAA1B,CAD4C;AAAA,GAA/B,CAAf;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAA;AAA6B,IAAA,KAAK,EAAEI;AAApC,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,IAAA,KAAK,EAAEK;AAAzB,GAAA,EAFJ,MAEI,CADF,CADF;AAVK,CAAA;;AAiBP,IAAA,OAAA,EAAa;AACXX,EAAAA,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AACD;;AAID,OAAO,IAAMY,aAAa,GAAA,aAAGC,UAAU,CACrC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACd,MAAMC,UAAU,GAAGC,gBAAgB,CAAA,KAAA,EAAnC,GAAmC,CAAnC;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,EAAE,CAAA,kBAAA,EAAqBf,KAAK,CAA1B,SAAA;AAFf,GAAA,CAAA,CADF;AAHG,CAAgC,CAAhC;;AAYP,IAAA,OAAA,EAAa;AACXW,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  PinInputDescendantsProvider,\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps<\"PinInput\">,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\nexport const PinInput: React.FC<PinInputProps> = (props) => {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const { descendants, ...context } = usePinInput(rest)\n\n  const clones = getValidChildren(children).map((child) =>\n    React.cloneElement(child, { __css: styles }),\n  )\n\n  return (\n    <PinInputDescendantsProvider value={descendants}>\n      <PinInputProvider value={context}>{clones}</PinInputProvider>\n    </PinInputDescendantsProvider>\n  )\n}\n\nif (__DEV__) {\n  PinInput.displayName = \"PinInput\"\n}\n\nexport interface PinInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  (props, ref) => {\n    const inputProps = usePinInputField(props, ref)\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PinInputField.displayName = \"PinInputField\"\n}\n"]},"metadata":{},"sourceType":"module"}