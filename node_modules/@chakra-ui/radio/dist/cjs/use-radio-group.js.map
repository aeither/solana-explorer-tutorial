{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["useRadioGroup","props","onChangeProp","onChange","valueProp","value","defaultValue","nameProp","name","isDisabled","isFocusable","isNative","htmlProps","React","useState","valueState","setValue","isControlled","ref","useRef","focus","useCallback","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","String","getRootProps","forwardedRef","role","getRadioProps","checkedKey"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { StringOrNumber, isInputEvent } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\ntype RadioPropGetter = PropGetter<\n  HTMLInputElement,\n  { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"size\" | \"value\"\n  >\n>\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = React.useState<StringOrNumber>(\n    defaultValue || \"\",\n  )\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = React.useRef<any>(null)\n\n  const focus = React.useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = React.useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: RadioPropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange,\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"file":"use-radio-group.js"}