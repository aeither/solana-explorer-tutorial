{"version":3,"sources":["../../src/grid.tsx"],"names":["chakra","forwardRef","filterUndefined","mapResponsive","__DEV__","React","Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","displayName","spanFn","span","value","GridItem","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAMO,mBANP;AAOA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,OAAzC,QAAwD,kBAAxD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,IAAI,gBAAGL,UAAU,CAAmB,CAACM,KAAD,EAAQC,GAAR,KAAgB;AAC/D,MAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,GAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,QATI;AAUJC,IAAAA,YAVI;AAWJC,IAAAA,WAXI;AAYJC,IAAAA;AAZI,MAcFb,KAdJ;AAAA,MAaKc,IAbL,iCAcId,KAdJ;;AAgBA,MAAMe,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE,MADI;AAEbC,IAAAA,QAAQ,EAAEf,IAFG;AAGbgB,IAAAA,iBAAiB,EAAEf,aAHN;AAIbgB,IAAAA,OAAO,EAAEf,GAJI;AAKbgB,IAAAA,UAAU,EAAEf,MALC;AAMbgB,IAAAA,aAAa,EAAEf,SANF;AAObgB,IAAAA,eAAe,EAAEV,WAPJ;AAQbW,IAAAA,UAAU,EAAEhB,MARC;AASbiB,IAAAA,OAAO,EAAEhB,GATI;AAUbiB,IAAAA,YAAY,EAAEhB,QAVD;AAWbiB,IAAAA,YAAY,EAAEhB,QAXD;AAYbiB,IAAAA,gBAAgB,EAAEhB,YAZL;AAabiB,IAAAA,mBAAmB,EAAEf;AAbR,GAAf;AAgBA,sBAAO,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEZ,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CAlC6B,CAAvB;;AAoCP,IAAIjB,OAAJ,EAAa;AACXE,EAAAA,IAAI,CAAC8B,WAAL,GAAmB,MAAnB;AACD;;AA8FD,SAASC,MAAT,CAAgBC,IAAhB,EAAyD;AACvD,SAAOnC,aAAa,CAACmC,IAAD,EAAQC,KAAD,IACzBA,KAAK,KAAK,MAAV,GAAmB,MAAnB,aAAoCA,KAApC,cAAkDA,KADhC,CAApB;AAGD;;AAED,OAAO,IAAMC,QAAQ,gBAAGvC,UAAU,CAAuB,CAACM,KAAD,EAAQC,GAAR,KAAgB;AACvE,MAAM;AACJiC,IAAAA,OADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA;AANI,MAQFvC,KARJ;AAAA,MAOKc,IAPL,iCAQId,KARJ;;AAUA,MAAMe,MAAM,GAAGpB,eAAe,CAAC;AAC7B4B,IAAAA,UAAU,EAAEO,MAAM,CAACI,OAAD,CADW;AAE7BV,IAAAA,OAAO,EAAEM,MAAM,CAACQ,OAAD,CAFc;AAG7BE,IAAAA,eAAe,EAAEL,QAHY;AAI7BM,IAAAA,aAAa,EAAEL,MAJc;AAK7BM,IAAAA,YAAY,EAAEH,QALe;AAM7BI,IAAAA,UAAU,EAAEN;AANiB,GAAD,CAA9B;AASA,sBAAO,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEpC,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CArBiC,CAA3B","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"],"file":"grid.js"}