{"version":3,"sources":["../../src/button-group.tsx"],"names":["strict","name","ButtonGroupProvider","useButtonGroup","ButtonGroup","props","ref","size","colorScheme","variant","className","spacing","isAttached","isDisabled","rest","_className","context","React","useMemo","groupStyles","display","borderEndRadius","borderRadius","borderStartRadius","marginStart","__DEV__","displayName"],"mappings":";;;;;AAAA;;AAQA;;AACA;;AACA;;;;;;;;;;qBA0B8C,+BAC5C;AACEA,EAAAA,MAAM,EAAE,KADV;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAD4C,C;IAAvCC,mB;IAAqBC,c;;;AASrB,IAAMC,WAAW,gBAAG,wBAAoC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,MAE3EC,IAF2E,GAUzEF,KAVyE,CAE3EE,IAF2E;AAAA,MAG3EC,WAH2E,GAUzEH,KAVyE,CAG3EG,WAH2E;AAAA,MAI3EC,OAJ2E,GAUzEJ,KAVyE,CAI3EI,OAJ2E;AAAA,MAK3EC,SAL2E,GAUzEL,KAVyE,CAK3EK,SAL2E;AAAA,uBAUzEL,KAVyE,CAM3EM,OAN2E;AAAA,MAM3EA,OAN2E,+BAMjE,QANiE;AAAA,MAO3EC,UAP2E,GAUzEP,KAVyE,CAO3EO,UAP2E;AAAA,MAQ3EC,UAR2E,GAUzER,KAVyE,CAQ3EQ,UAR2E;AAAA,MASxEC,IATwE,iCAUzET,KAVyE;;AAY7E,MAAMU,UAAU,GAAG,eAAG,sBAAH,EAA2BL,SAA3B,CAAnB;;AAEA,MAAMM,OAAO,GAAGC,KAAK,CAACC,OAAN,CACd;AAAA,WAAO;AAAEX,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,WAAW,EAAXA,WAAR;AAAqBC,MAAAA,OAAO,EAAPA,OAArB;AAA8BI,MAAAA,UAAU,EAAVA;AAA9B,KAAP;AAAA,GADc,EAEd,CAACN,IAAD,EAAOC,WAAP,EAAoBC,OAApB,EAA6BI,UAA7B,CAFc,CAAhB;AAKA,MAAIM,WAA8B,GAAG;AACnCC,IAAAA,OAAO,EAAE;AAD0B,GAArC;;AAIA,MAAIR,UAAJ,EAAgB;AACdO,IAAAA,WAAW,gBACNA,WADM;AAET,8CAAwC;AAAEE,QAAAA,eAAe,EAAE;AAAnB,OAF/B;AAGT,oDAA8C;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAHrC;AAIT,8CAAwC;AAAEC,QAAAA,iBAAiB,EAAE;AAArB;AAJ/B,MAAX;AAMD,GAPD,MAOO;AACLJ,IAAAA,WAAW,gBACNA,WADM;AAET,yCAAmC;AAAEK,QAAAA,WAAW,EAAEb;AAAf;AAF1B,MAAX;AAID;;AAED,sBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEK;AAA5B,kBACE,oBAAC,cAAD,CAAQ,GAAR;AACE,IAAA,GAAG,EAAEV,GADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEa,WAHT;AAIE,IAAA,SAAS,EAAEJ;AAJb,KAKMD,IALN,EADF,CADF;AAWD,CAhD0B,CAApB;;;AAkDP,IAAIW,cAAJ,EAAa;AACXrB,EAAAA,WAAW,CAACsB,WAAZ,GAA0B,aAA1B;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Button\"> {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The spacing between the buttons\n   * @default '0.5rem'\n   * @type SystemProps[\"marginRight\"]\n   */\n  spacing?: SystemProps[\"marginRight\"]\n}\n\ninterface ButtonGroupContext extends ThemingProps<\"ButtonGroup\"> {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">((props, ref) => {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__group\", className)\n\n  const context = React.useMemo(\n    () => ({ size, colorScheme, variant, isDisabled }),\n    [size, colorScheme, variant, isDisabled],\n  )\n\n  let groupStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n  }\n\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 },\n    }\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing },\n    }\n  }\n\n  return (\n    <ButtonGroupProvider value={context}>\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        className={_className}\n        {...rest}\n      />\n    </ButtonGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\"\n}\n"],"file":"button-group.js"}