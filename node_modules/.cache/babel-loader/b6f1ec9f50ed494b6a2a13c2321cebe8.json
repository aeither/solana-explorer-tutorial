{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar fallbackIcon = {\n  path: /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    fill: \"none\",\n    d: \"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    strokeLinecap: \"round\",\n    d: \"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: \"none\",\n    strokeMiterlimit: \"10\",\n    cx: \"12\",\n    cy: \"12\",\n    r: \"11.25\"\n  })),\n  viewBox: \"0 0 24 24\"\n};\nexport var Icon = /*#__PURE__*/forwardRef(function (props, ref) {\n  var element = props.as,\n      viewBox = props.viewBox,\n      _props$color = props.color,\n      color = _props$color === void 0 ? \"currentColor\" : _props$color,\n      _props$focusable = props.focusable,\n      focusable = _props$focusable === void 0 ? false : _props$focusable,\n      children = props.children,\n      className = props.className,\n      __css = props.__css,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"viewBox\", \"color\", \"focusable\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-icon\", className);\n\n  var styles = _extends({\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color: color\n  }, __css);\n\n  var shared = {\n    ref: ref,\n    focusable: focusable,\n    className: _className,\n    __css: styles\n  };\n\n  var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n\n\n  if (element && typeof element !== \"string\") {\n    return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n      as: element\n    }, shared, rest));\n  }\n\n  var _path = children != null ? children : fallbackIcon.path;\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    verticalAlign: \"middle\",\n    viewBox: _viewBox\n  }, shared, rest), _path);\n});\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\";\n}\n\nexport default Icon;","map":{"version":3,"sources":["../../src/icon.tsx"],"names":["fallbackIcon","path","viewBox","Icon","forwardRef","as","color","focusable","__css","_className","cx","styles","w","h","display","lineHeight","flexShrink","shared","ref","className","_viewBox","element","_path","children"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst fallbackIcon = {\n  path: (\n    <g stroke=\"currentColor\" strokeWidth=\"1.5\">\n      <path\n        strokeLinecap=\"round\"\n        fill=\"none\"\n        d=\"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n      />\n      <path\n        fill=\"currentColor\"\n        strokeLinecap=\"round\"\n        d=\"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n      />\n      <circle fill=\"none\" strokeMiterlimit=\"10\" cx=\"12\" cy=\"12\" r=\"11.25\" />\n    </g>\n  ),\n  viewBox: \"0 0 24 24\",\n}\n\nexport interface IconProps\n  extends Omit<React.SVGAttributes<SVGElement>, keyof ChakraProps>,\n    ChakraProps {}\n\nexport const Icon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const {\n    as: element,\n    viewBox,\n    color = \"currentColor\",\n    focusable = false,\n    children,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-icon\", className)\n\n  const styles: SystemStyleObject = {\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color,\n    ...__css,\n  }\n\n  const shared: any = {\n    ref,\n    focusable,\n    className: _className,\n    __css: styles,\n  }\n\n  const _viewBox = viewBox ?? fallbackIcon.viewBox\n\n  /**\n   * If you're using an icon library like `react-icons`.\n   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component\n   */\n  if (element && typeof element !== \"string\") {\n    return <chakra.svg as={element} {...shared} {...rest} />\n  }\n\n  const _path = (children ?? fallbackIcon.path) as React.ReactNode\n\n  return (\n    <chakra.svg verticalAlign=\"middle\" viewBox={_viewBox} {...shared} {...rest}>\n      {_path}\n    </chakra.svg>\n  )\n})\n\nif (__DEV__) {\n  Icon.displayName = \"Icon\"\n}\n\nexport default Icon\n"]},"metadata":{},"sourceType":"module"}