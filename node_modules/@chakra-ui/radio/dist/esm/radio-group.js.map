{"version":3,"sources":["../../src/radio-group.tsx"],"names":["chakra","forwardRef","cx","__DEV__","createContext","React","useRadioGroup","RadioGroupProvider","useRadioGroupContext","name","strict","RadioGroup","props","ref","colorScheme","size","variant","children","className","isDisabled","isFocusable","rest","value","onChange","getRootProps","htmlProps","group","useMemo","groupProps","_className","displayName"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAIO,mBAJP;AAaA,IAAM,CACJC,kBADI,EAEJC,oBAFI,IAGFJ,aAAa,CAAoB;AACnCK,EAAAA,IAAI,EAAE,mBAD6B;AAEnCC,EAAAA,MAAM,EAAE;AAF2B,CAApB,CAHjB;AAQA,SAASF,oBAAT;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,UAAU,gBAAGV,UAAU,CAAyB,CAACW,KAAD,EAAQC,GAAR,KAAgB;AAC3E,MAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MASFR,KATJ;AAAA,MAQKS,IARL,iCASIT,KATJ;;AAWA,MAAM;AAAEU,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,YAAnB;AAAiCf,IAAAA,IAAjC;AAAuCgB,IAAAA;AAAvC,MAAqDnB,aAAa,CAACe,IAAD,CAAxE;AAEA,MAAMK,KAAK,GAAGrB,KAAK,CAACsB,OAAN,CACZ,OAAO;AACLlB,IAAAA,IADK;AAELM,IAAAA,IAFK;AAGLQ,IAAAA,QAHK;AAILT,IAAAA,WAJK;AAKLQ,IAAAA,KALK;AAMLN,IAAAA,OANK;AAOLG,IAAAA,UAPK;AAQLC,IAAAA;AARK,GAAP,CADY,EAWZ,CACEX,IADF,EAEEM,IAFF,EAGEQ,QAHF,EAIET,WAJF,EAKEQ,KALF,EAMEN,OANF,EAOEG,UAPF,EAQEC,WARF,CAXY,CAAd;AAuBA,MAAMQ,UAAU,GAAGJ,YAAY,CAACC,SAAD,EAAYZ,GAAZ,CAA/B;;AACA,MAAMgB,UAAU,GAAG3B,EAAE,CAAC,oBAAD,EAAuBgB,SAAvB,CAArB;;AAEA,sBACE,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEQ;AAA3B,kBACE,oBAAC,MAAD,CAAQ,GAAR,eAAgBE,UAAhB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,MACGZ,QADH,CADF,CADF;AAOD,CA/CmC,CAA7B;;AAiDP,IAAId,OAAJ,EAAa;AACXQ,EAAAA,UAAU,CAACmB,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<\n      UseRadioGroupReturn,\n      \"onChange\" | \"value\" | \"name\" | \"isDisabled\" | \"isFocusable\"\n    >,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {}\n\nconst [\n  RadioGroupProvider,\n  useRadioGroupContext,\n] = createContext<RadioGroupContext>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const {\n    colorScheme,\n    size,\n    variant,\n    children,\n    className,\n    isDisabled,\n    isFocusable,\n    ...rest\n  } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = React.useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n      isFocusable,\n    }),\n    [\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n      isFocusable,\n    ],\n  )\n\n  const groupProps = getRootProps(htmlProps, ref)\n  const _className = cx(\"chakra-radio-group\", className)\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div {...groupProps} className={_className}>\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"],"file":"radio-group.js"}