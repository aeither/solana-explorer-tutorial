{"ast":null,"code":"import CSSReset from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport { EnvironmentProvider } from \"@chakra-ui/react-env\";\nimport * as React from \"react\";\nimport { IdProvider } from \"@chakra-ui/hooks\";\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\n\nexport var ChakraProvider = function ChakraProvider(props) {\n  var children = props.children,\n      colorModeManager = props.colorModeManager,\n      portalZIndex = props.portalZIndex,\n      _props$resetCSS = props.resetCSS,\n      resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      environment = props.environment,\n      cssVarsRoot = props.cssVarsRoot;\n\n  var _children = /*#__PURE__*/React.createElement(EnvironmentProvider, {\n    environment: environment\n  }, children);\n\n  return /*#__PURE__*/React.createElement(IdProvider, null, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    cssVarsRoot: cssVarsRoot\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, resetCSS && /*#__PURE__*/React.createElement(CSSReset, null), /*#__PURE__*/React.createElement(GlobalStyle, null), portalZIndex ? /*#__PURE__*/React.createElement(PortalManager, {\n    zIndex: portalZIndex\n  }, _children) : _children)));\n};","map":{"version":3,"sources":["../../src/chakra-provider.tsx"],"names":["ChakraProvider","props","resetCSS","theme","cssVarsRoot","_children","environment","config","portalZIndex"],"mappings":"AAAA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AACA,SAAA,iBAAA,EAAA,WAAA,EAAA,aAAA,QAAA,mBAAA;AAQA,SAAA,mBAAA,QAAA,sBAAA;AAIA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,kBAAA;AA4CA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,cAA6C,GAAIC,SAAjDD,cAAiDC,CAAAA,KAAD,EAAW;AACtE,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAM,gBAAN,GAAA,KAAA,CAAM,gBAAN;AAAA,MAAM,YAAN,GAAA,KAAA,CAAM,YAAN;AAAA,wBAAA,KAAA,CAIEC,QAJF;AAAA,MAIEA,QAJF,gCAAM,IAAN;AAAA,qBAAA,KAAA,CAKEC,KALF;AAAA,MAKEA,KALF,6BAAM,EAAN;AAAA,MAAM,WAAN,GAAA,KAAA,CAAM,WAAN;AAAA,MAOEC,WAPF,GAAA,KAAA,CAOEA,WAPF;;AAUA,MAAMC,SAAS,GAAA,aACb,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;AAAqB,IAAA,WAAW,EAAEC;AAAlC,GAAA,EADF,QACE,CADF;;AAMA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAApB,KAAA;AAAqC,IAAA,WAAW,EAAEF;AAAlD,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,IAAA,gBAAgB,EADlB,gBAAA;AAEE,IAAA,OAAO,EAAED,KAAK,CAACI;AAFjB,GAAA,EAIGL,QAAQ,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,QAAA,EAJf,IAIe,CAJf,EAAA,aAKE,KAAA,CAAA,aAAA,CAAA,WAAA,EALF,IAKE,CALF,EAMGM,YAAY,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,MAAM,EAAEA;AAAvB,GAAA,EADW,SACX,CADW,GATrB,SAGM,CADF,CADF,CADF;AAjBK,CAAA","sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\nimport * as React from \"react\"\nimport { IdProvider } from \"@chakra-ui/hooks\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider environment={environment}>\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <IdProvider>\n      <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n        <ColorModeProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          {resetCSS && <CSSReset />}\n          <GlobalStyle />\n          {portalZIndex ? (\n            <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n          ) : (\n            _children\n          )}\n        </ColorModeProvider>\n      </ThemeProvider>\n    </IdProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}