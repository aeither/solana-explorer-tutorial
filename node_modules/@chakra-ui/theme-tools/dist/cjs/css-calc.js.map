{"version":3,"sources":["../../src/css-calc.ts"],"names":["toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"mappings":"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","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"file":"css-calc.js"}