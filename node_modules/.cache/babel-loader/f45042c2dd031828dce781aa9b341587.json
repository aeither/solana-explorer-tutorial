{"ast":null,"code":"import { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.js';\nimport { numberValueTypes } from '../../dom/value-types/number.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {\n  var _a;\n\n  var style = state.style,\n      vars = state.vars,\n      transform = state.transform,\n      transformKeys = state.transformKeys,\n      transformOrigin = state.transformOrigin; // Empty the transformKeys array. As we're throwing out refs to its items\n  // this might not be as cheap as suspected. Maybe using the array as a buffer\n  // with a manual incrementation would be better.\n\n  transformKeys.length = 0; // Track whether we encounter any transform or transformOrigin values.\n\n  var hasTransform = false;\n  var hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  var transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n\n  for (var key in latestValues) {\n    var value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    var valueType = numberValueTypes[key];\n    var valueAsType = getValueAsType(value, valueType);\n\n    if (isTransformProp(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key); // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n    } else if (isTransformOriginProp(key)) {\n      transformOrigin[key] = valueAsType; // If this is a transform origin, flag and enable further transform-origin processing\n\n      hasTransformOrigin = true;\n    } else {\n      /**\n       * If layout projection is on, and we need to perform scale correction for this\n       * value type, perform it.\n       */\n      if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) && valueScaleCorrection[key]) {\n        var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n        /**\n         * Scale-correctable values can define a number of other values to break\n         * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n         */\n\n        var applyTo = valueScaleCorrection[key].applyTo;\n\n        if (applyTo) {\n          var num = applyTo.length;\n\n          for (var i = 0; i < num; i++) {\n            style[applyTo[i]] = correctedValue;\n          }\n        } else {\n          style[key] = correctedValue;\n        }\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n\n  if (layoutState && projection && buildProjectionTransform && buildProjectionTransformOrigin) {\n    style.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n\n    if (transformTemplate) {\n      style.transform = transformTemplate(transform, style.transform);\n    }\n\n    style.transformOrigin = buildProjectionTransformOrigin(layoutState);\n  } else {\n    if (hasTransform) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    }\n\n    if (hasTransformOrigin) {\n      style.transformOrigin = buildTransformOrigin(transformOrigin);\n    }\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js"],"names":["valueScaleCorrection","buildTransform","buildTransformOrigin","isCSSVariable","isTransformProp","isTransformOriginProp","getValueAsType","numberValueTypes","buildHTMLStyles","state","latestValues","projection","layoutState","options","transformTemplate","buildProjectionTransform","buildProjectionTransformOrigin","_a","style","vars","transform","transformKeys","transformOrigin","length","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","push","default","isHydrated","correctedValue","process","applyTo","num","i","deltaFinal","treeScale","undefined"],"mappings":"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","sourcesContent":["import { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.js';\nimport { numberValueTypes } from '../../dom/value-types/number.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {\n    var _a;\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\n    // Empty the transformKeys array. As we're throwing out refs to its items\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\n    // with a manual incrementation would be better.\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    var hasTransform = false;\n    var hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    var transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (var key in latestValues) {\n        var value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        var valueType = numberValueTypes[key];\n        var valueAsType = getValueAsType(value, valueType);\n        if (isTransformProp(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))\n                transformIsNone = false;\n        }\n        else if (isTransformOriginProp(key)) {\n            transformOrigin[key] = valueAsType;\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n        }\n        else {\n            /**\n             * If layout projection is on, and we need to perform scale correction for this\n             * value type, perform it.\n             */\n            if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) &&\n                (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) &&\n                valueScaleCorrection[key]) {\n                var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n                /**\n                 * Scale-correctable values can define a number of other values to break\n                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n                 */\n                var applyTo = valueScaleCorrection[key].applyTo;\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        style[applyTo[i]] = correctedValue;\n                    }\n                }\n                else {\n                    style[key] = correctedValue;\n                }\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (layoutState &&\n        projection &&\n        buildProjectionTransform &&\n        buildProjectionTransformOrigin) {\n        style.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n        if (transformTemplate) {\n            style.transform = transformTemplate(transform, style.transform);\n        }\n        style.transformOrigin = buildProjectionTransformOrigin(layoutState);\n    }\n    else {\n        if (hasTransform) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        if (hasTransformOrigin) {\n            style.transformOrigin = buildTransformOrigin(transformOrigin);\n        }\n    }\n}\n\nexport { buildHTMLStyles };\n"]},"metadata":{},"sourceType":"module"}