{"version":3,"sources":["../../src/use-const.ts"],"names":["useConst","init","ref","current"],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAT,CAA+CC,IAA/C,EAAwD;AAC7D,MAAMC,GAAG,GAAG,mBAAiB,IAAjB,CAAZ;;AAEA,MAAIA,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACxBD,IAAAA,GAAG,CAACC,OAAJ,GAAc,OAAOF,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,EAAjC,GAAsCA,IAApD;AACD;;AAED,SAAOC,GAAG,CAACC,OAAX;AACD","sourcesContent":["import { useRef } from \"react\"\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nexport function useConst<T extends any | (() => any)>(init: T) {\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init\n  }\n\n  return ref.current as T\n}\n"],"file":"use-const.js"}