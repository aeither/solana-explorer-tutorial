{"version":3,"sources":["../../../src/config/space.ts"],"names":["t","space","margin","spaceT","marginTop","marginBlockStart","marginRight","marginInlineEnd","marginBottom","marginBlockEnd","marginLeft","marginInlineStart","marginX","marginInline","marginY","marginBlock","padding","paddingTop","paddingBlockStart","paddingRight","paddingBottom","paddingBlockEnd","paddingLeft","paddingInlineStart","paddingInlineEnd","paddingX","paddingInline","paddingY","paddingBlock","Object","assign","m","mt","mr","me","marginEnd","mb","ml","ms","marginStart","mx","my","p","pt","py","px","pb","pl","ps","paddingStart","pr","pe","paddingEnd"],"mappings":"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","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config } from \"../utils/prop-config\"\nimport { t, Token } from \"../utils\"\n\nexport const space: Config = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginInlineStart\", \"marginInlineEnd\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingInlineStart\", \"paddingInlineEnd\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\"),\n}\n\nObject.assign(space, {\n  m: space.margin,\n  mt: space.marginTop,\n  mr: space.marginRight,\n  me: space.marginInlineEnd,\n  marginEnd: space.marginInlineEnd,\n  mb: space.marginBottom,\n  ml: space.marginLeft,\n  ms: space.marginInlineStart,\n  marginStart: space.marginInlineStart,\n  mx: space.marginX,\n  my: space.marginY,\n  p: space.padding,\n  pt: space.paddingTop,\n  py: space.paddingY,\n  px: space.paddingX,\n  pb: space.paddingBottom,\n  pl: space.paddingLeft,\n  ps: space.paddingInlineStart,\n  paddingStart: space.paddingInlineStart,\n  pr: space.paddingRight,\n  pe: space.paddingInlineEnd,\n  paddingEnd: space.paddingInlineEnd,\n})\n\n/**\n * Types for space related CSS properties\n */\nexport interface SpaceProps {\n  /**\n   * Margin on top, left, bottom and right\n   */\n  m?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top, left, bottom and right\n   */\n  margin?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top\n   */\n  mt?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlockStart?: Token<CSS.Property.MarginBlockStart | number, \"space\">\n  /**\n   * Margin on top\n   */\n  marginTop?: Token<CSS.Property.MarginTop | number, \"space\">\n  /**\n   * Margin on right\n   */\n  mr?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginInlineEnd` is equivalent to `marginLeft`.\n   */\n  marginInlineEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `me` is equivalent to `marginRight`.\n   * When direction is `rtl`, `me` is equivalent to `marginLeft`.\n   */\n  me?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * Margin on right\n   */\n  marginRight?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  mb?: Token<CSS.Property.MarginBottom | number, \"space\">\n  marginBlockEnd?: Token<CSS.Property.MarginBlockEnd | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  marginBottom?: Token<CSS.Property.MarginBottom | number, \"space\">\n  /**\n   * Margin on left\n   */\n  ml?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginInlineStart` is equivalent to `marginRight`.\n   */\n  marginInlineStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ms` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `ms` is equivalent to `marginRight`.\n   */\n  ms?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * Margin on left\n   */\n  marginLeft?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  mx?: Token<CSS.Property.Margin | number, \"space\">\n  marginInline?: Token<CSS.Property.MarginInline | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  marginX?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  my?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlock?: Token<CSS.Property.MarginBlock | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  marginY?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  p?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  padding?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top\n   */\n  pt?: Token<CSS.Property.PaddingTop | number, \"space\">\n  paddingBlockStart?: Token<CSS.Property.PaddingBlockStart | number, \"space\">\n  /**\n   * Padding on top\n   */\n  paddingTop?: Token<CSS.Property.PaddingTop | number, \"space\">\n  /**\n   * Padding on right\n   */\n  pr?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingInlineEnd` is equivalent to `paddingLeft`.\n   */\n  paddingInlineEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `pe` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `pe` is equivalent to `paddingLeft`.\n   */\n  pe?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * Padding on right\n   */\n  paddingRight?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  pb?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  paddingBlockEnd?: Token<CSS.Property.PaddingBlockEnd | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  paddingBottom?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  /**\n   * Padding on left\n   */\n  pl?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingInlineStart` is equivalent to `paddingRight`.\n   */\n  paddingInlineStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ps` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `ps` is equivalent to `paddingRight`.\n   */\n  ps?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * Padding on left\n   */\n  paddingLeft?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  px?: Token<CSS.Property.Padding | number, \"space\">\n  paddingInline?: Token<CSS.Property.PaddingInline | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  paddingX?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  py?: Token<CSS.Property.Padding | number, \"space\">\n  paddingBlock?: Token<CSS.Property.PaddingBlock | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  paddingY?: Token<CSS.Property.Padding | number, \"space\">\n}\n"],"file":"space.js"}