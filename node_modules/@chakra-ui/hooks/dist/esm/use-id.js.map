{"version":3,"sources":["../../src/use-id.ts"],"names":["React","defaultIdContext","prefix","Math","round","random","current","IdContext","createContext","IdProvider","memo","children","currentContext","useContext","isRoot","context","useMemo","createElement","Provider","value","useId","idProp","filter","Boolean","join","useIds","prefixes","id","map","useOptionalPart","partId","setId","useState","ref","useCallback","node","isRendered"],"mappings":"AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,IAAMC,gBAAgC,GAAG;AACvCC,EAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAD+B;AAEvCC,EAAAA,OAAO,EAAE;AAF8B,CAAzC;AAKA,IAAMC,SAAS,gBAAGP,KAAK,CAACQ,aAAN,CAAoCP,gBAApC,CAAlB;AAEA,OAAO,IAAMQ,UAAoB,gBAAGT,KAAK,CAACU,IAAN,CAAW,UAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC/D,MAAMC,cAAc,GAAGZ,KAAK,CAACa,UAAN,CAAiBN,SAAjB,CAAvB;AACA,MAAMO,MAAM,GAAGF,cAAc,KAAKX,gBAAlC;AACA,MAAMc,OAAuB,GAAGf,KAAK,CAACgB,OAAN,CAC9B,OAAO;AACLd,IAAAA,MAAM,EAAEY,MAAM,GAAG,CAAH,GAAO,EAAEF,cAAc,CAACV,MADjC;AAELI,IAAAA,OAAO,EAAE;AAFJ,GAAP,CAD8B,EAK9B,CAACQ,MAAD,EAASF,cAAT,CAL8B,CAAhC;AAQA,sBAAOZ,KAAK,CAACiB,aAAN,CAAoBV,SAAS,CAACW,QAA9B,EAAwC;AAAEC,IAAAA,KAAK,EAAEJ;AAAT,GAAxC,EAA4DJ,QAA5D,CAAP;AACD,CAZmC,CAA7B;AAcP,OAAO,SAASS,KAAT,CAAeC,MAAf,EAAgCnB,MAAhC,EAAyD;AAC9D,MAAMa,OAAO,GAAGf,KAAK,CAACa,UAAN,CAAiBN,SAAjB,CAAhB;AACA,SAAOP,KAAK,CAACgB,OAAN,CACL,MACEK,MAAM,IACN,CAACnB,MAAD,EAASa,OAAO,CAACb,MAAjB,EAAyB,EAAEa,OAAO,CAACT,OAAnC,EAA4CgB,MAA5C,CAAmDC,OAAnD,EAA4DC,IAA5D,CAAiE,GAAjE,CAHG,EAIL;AACA,GAACH,MAAD,EAASnB,MAAT,CALK,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuB,MAAT,CAAgBJ,MAAhB,EAAwD;AAAA,oCAApBK,QAAoB;AAApBA,IAAAA,QAAoB;AAAA;;AAC7D,MAAMC,EAAE,GAAGP,KAAK,CAACC,MAAD,CAAhB;AACA,SAAOrB,KAAK,CAACgB,OAAN,CAAc,MAAM;AACzB,WAAOU,QAAQ,CAACE,GAAT,CAAc1B,MAAD,IAAeA,MAAf,SAAyByB,EAAtC,CAAP;AACD,GAFM,EAEJ,CAACA,EAAD,EAAKD,QAAL,CAFI,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,eAAT,CAAkCC,MAAlC,EAAkD;AACvD,MAAM,CAACH,EAAD,EAAKI,KAAL,IAAc/B,KAAK,CAACgC,QAAN,CAA8B,IAA9B,CAApB;AACA,MAAMC,GAAG,GAAGjC,KAAK,CAACkC,WAAN,CACTC,IAAD,IAAa;AACXJ,IAAAA,KAAK,CAACI,IAAI,GAAGL,MAAH,GAAY,IAAjB,CAAL;AACD,GAHS,EAIV,CAACA,MAAD,CAJU,CAAZ;AAMA,SAAO;AAAEG,IAAAA,GAAF;AAAON,IAAAA,EAAP;AAAWS,IAAAA,UAAU,EAAEb,OAAO,CAACI,EAAD;AAA9B,GAAP;AACD","sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n\nimport * as React from \"react\"\n\ntype IdContextValue = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n}\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext)\n\nexport const IdProvider: React.FC = React.memo(({ children }) => {\n  const currentContext = React.useContext(IdContext)\n  const isRoot = currentContext === defaultIdContext\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRoot ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRoot, currentContext],\n  )\n\n  return React.createElement(IdContext.Provider, { value: context }, children)\n})\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const context = React.useContext(IdContext)\n  return React.useMemo(\n    () =>\n      idProp ||\n      [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [idProp, prefix],\n  )\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return React.useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = React.useState<string | null>(null)\n  const ref = React.useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"],"file":"use-id.js"}