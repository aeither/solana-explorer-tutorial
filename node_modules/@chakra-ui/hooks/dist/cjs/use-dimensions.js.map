{"version":3,"sources":["../../src/use-dimensions.ts"],"names":["useDimensions","ref","observe","React","useState","dimensions","setDimensions","rafId","useRef","current","undefined","node","measure","requestAnimationFrame","boxModel","window","addEventListener","removeEventListener","cancelAnimationFrame"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CACLC,GADK,EAELC,OAFK,EAGL;AAAA,wBACoCC,KAAK,CAACC,QAAN,CAAgC,IAAhC,CADpC;AAAA,MACOC,UADP;AAAA,MACmBC,aADnB;;AAEA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,MAAN,EAAd;AAEA,gDAAoB,YAAM;AACxB,QAAI,CAACP,GAAG,CAACQ,OAAT,EAAkB,OAAOC,SAAP;AAElB,QAAMC,IAAI,GAAGV,GAAG,CAACQ,OAAjB;;AAEA,aAASG,OAAT,GAAmB;AACjBL,MAAAA,KAAK,CAACE,OAAN,GAAgBI,qBAAqB,CAAC,YAAM;AAC1C,YAAMC,QAAQ,GAAG,mBAAOH,IAAP,CAAjB;AACAL,QAAAA,aAAa,CAACQ,QAAD,CAAb;AACD,OAHoC,CAArC;AAID;;AAEDF,IAAAA,OAAO;;AAEP,QAAIV,OAAJ,EAAa;AACXa,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AACAG,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AACD;;AAED,WAAO,YAAM;AACX,UAAIV,OAAJ,EAAa;AACXa,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,OAArC;AACAG,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,OAArC;AACD;;AAED,UAAIL,KAAK,CAACE,OAAV,EAAmB;AACjBS,QAAAA,oBAAoB,CAACX,KAAK,CAACE,OAAP,CAApB;AACD;AACF,KATD;AAUD,GA7BD,EA6BG,CAACP,OAAD,CA7BH;AA+BA,SAAOG,UAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = React.useState<BoxModel | null>(null)\n  const rafId = React.useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined\n\n    const node = ref.current\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [observe])\n\n  return dimensions\n}\n"],"file":"use-dimensions.js"}