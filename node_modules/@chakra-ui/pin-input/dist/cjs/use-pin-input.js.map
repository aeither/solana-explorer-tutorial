{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","name","errorMessage","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","idProp","id","isDisabled","isInvalid","mask","uuid","descendants","React","useState","moveFocus","setMoveFocus","focusedIndex","setFocusedIndex","values","join","setValues","useEffect","first","node","nextTick","focusNext","useCallback","index","next","setValue","nextValues","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","event","target","currentValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","ref","register"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;AACA;4BAOI,0C;IAJFA,2B;IACAC,6B;IACAC,sB;IACAC,qB;AAGF;AACA;AACA;;;;;;;;qBAgBI,+BAA+B;AACjCC,EAAAA,IAAI,EAAE,iBAD2B;AAEjCC,EAAAA,YAAY,EACV;AAH+B,CAA/B,C;IAFFC,gB;IACAC,kB;AAOF;AACA;AACA;;;;;;AAgEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD;AAAA,SAAoBA,KAApB,oBAAoBA,KAAK,CAAEC,KAAP,CAAa,EAAb,CAApB;AAAA,CAAhB;;AAEA,SAASC,QAAT,CAAkBF,KAAlB,EAAiCG,IAAjC,EAAiE;AAC/D,MAAMC,aAAa,GAAG,UAAtB;AACA,MAAMC,mBAAmB,GAAG,iBAA5B;AACA,MAAMC,KAAK,GAAGH,IAAI,KAAK,cAAT,GAA0BE,mBAA1B,GAAgDD,aAA9D;AACA,SAAOE,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAP;AACD;AAED;AACA;AACA;;AAEA;AACA;AACA;;;AACO,SAASQ,WAAT,CAAqBC,KAArB,EAAmD;AAAA,MAA9BA,KAA8B;AAA9BA,IAAAA,KAA8B,GAAJ,EAAI;AAAA;;AAAA,eAepDA,KAfoD;AAAA,MAEtDC,SAFsD,UAEtDA,SAFsD;AAAA,MAGtDV,KAHsD,UAGtDA,KAHsD;AAAA,MAItDW,YAJsD,UAItDA,YAJsD;AAAA,MAKtDC,SALsD,UAKtDA,QALsD;AAAA,MAMtDC,UANsD,UAMtDA,UANsD;AAAA,kCAOtDC,WAPsD;AAAA,MAOtDA,WAPsD,mCAOxC,GAPwC;AAAA,kCAQtDC,WARsD;AAAA,MAQtDA,WARsD,mCAQxC,IARwC;AAAA,0BAStDC,GATsD;AAAA,MAStDA,GATsD,2BAShD,KATgD;AAAA,MAUlDC,MAVkD,UAUtDC,EAVsD;AAAA,MAWtDC,UAXsD,UAWtDA,UAXsD;AAAA,MAYtDC,SAZsD,UAYtDA,SAZsD;AAAA,2BAatDjB,IAbsD;AAAA,MAatDA,IAbsD,4BAa/C,QAb+C;AAAA,MActDkB,IAdsD,UActDA,IAdsD;AAiBxD,MAAMC,IAAI,GAAG,mBAAb;AACA,MAAMJ,EAAE,GAAGD,MAAH,WAAGA,MAAH,kBAA0BK,IAAlC;AAEA,MAAMC,WAAW,GAAG9B,sBAAsB,EAA1C;;AApBwD,wBAsBtB+B,KAAK,CAACC,QAAN,CAAe,IAAf,CAtBsB;AAAA,MAsBjDC,SAtBiD;AAAA,MAsBtCC,YAtBsC;;AAAA,yBAuBhBH,KAAK,CAACC,QAAN,CAAe,CAAC,CAAhB,CAvBgB;AAAA,MAuBjDG,YAvBiD;AAAA,MAuBnCC,eAvBmC;;AAAA,8BAyB5B,iCAA+B;AACzDlB,IAAAA,YAAY,EAAEZ,OAAO,CAACY,YAAD,CAAP,IAAyB,EADkB;AAEzDX,IAAAA,KAAK,EAAED,OAAO,CAACC,KAAD,CAF2C;AAGzDY,IAAAA,QAAQ,EAAE,kBAACkB,MAAD;AAAA,aAAYlB,SAAZ,oBAAYA,SAAQ,CAAGkB,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAH,CAApB;AAAA;AAH+C,GAA/B,CAzB4B;AAAA,MAyBjDD,MAzBiD;AAAA,MAyBzCE,SAzByC;;AA+BxDR,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,QAAIvB,SAAJ,EAAe;AACb,UAAMwB,KAAK,GAAGX,WAAW,CAACW,KAAZ,EAAd;AACA,UAAIA,KAAJ,EAAW,kBAAMA,KAAK,CAACC,IAAZ,EAAkB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAlB;AACZ,KAJmB,CAKpB;AACA;;AACD,GAPD,EAOG,CAACb,WAAD,CAPH;AASA,MAAMc,SAAS,GAAGb,KAAK,CAACc,WAAN,CAChB,UAACC,KAAD,EAAmB;AACjB,QAAI,CAACb,SAAD,IAAc,CAACX,WAAnB,EAAgC;AAChC,QAAMyB,IAAI,GAAGjB,WAAW,CAACiB,IAAZ,CAAiBD,KAAjB,EAAwB,KAAxB,CAAb;AACA,QAAIC,IAAJ,EAAU,kBAAMA,IAAI,CAACL,IAAX,EAAiB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAjB;AACX,GALe,EAMhB,CAACb,WAAD,EAAcG,SAAd,EAAyBX,WAAzB,CANgB,CAAlB;AASA,MAAM0B,QAAQ,GAAGjB,KAAK,CAACc,WAAN,CACf,UAACtC,KAAD,EAAgBuC,KAAhB,EAAkC;AAChC,QAAMG,UAAU,aAAOZ,MAAP,CAAhB;AACAY,IAAAA,UAAU,CAACH,KAAD,CAAV,GAAoBvC,KAApB;AACAgC,IAAAA,SAAS,CAACU,UAAD,CAAT;AAEA,QAAMC,UAAU,GACd3C,KAAK,KAAK,EAAV,IACA0C,UAAU,CAACE,MAAX,KAAsBrB,WAAW,CAACsB,KAAZ,EADtB,IAEAH,UAAU,CAACI,KAAX,CACE,UAACC,UAAD;AAAA,aAAgBA,UAAU,IAAI,IAAd,IAAsBA,UAAU,KAAK,EAArD;AAAA,KADF,CAHF;;AAOA,QAAIJ,UAAJ,EAAgB;AACd9B,MAAAA,UAAU,QAAV,YAAAA,UAAU,CAAG6B,UAAU,CAACX,IAAX,CAAgB,EAAhB,CAAH,CAAV;AACD,KAFD,MAEO;AACLM,MAAAA,SAAS,CAACE,KAAD,CAAT;AACD;AACF,GAlBc,EAmBf,CAACT,MAAD,EAASE,SAAT,EAAoBK,SAApB,EAA+BxB,UAA/B,EAA2CU,WAA3C,CAnBe,CAAjB;AAsBA,MAAMyB,KAAK,GAAGxB,KAAK,CAACc,WAAN,CAAkB,YAAM;AACpC,QAAMR,MAAgB,GAAGmB,KAAK,CAAC1B,WAAW,CAACsB,KAAZ,EAAD,CAAL,CAA2BK,IAA3B,CAAgC,EAAhC,CAAzB;AACAlB,IAAAA,SAAS,CAACF,MAAD,CAAT;AACA,QAAMI,KAAK,GAAGX,WAAW,CAACW,KAAZ,EAAd;AACA,QAAIA,KAAJ,EAAW,kBAAMA,KAAK,CAACC,IAAZ;AACZ,GALa,EAKX,CAACZ,WAAD,EAAcS,SAAd,CALW,CAAd;AAOA,MAAMmB,YAAY,GAAG3B,KAAK,CAACc,WAAN,CACnB,UAACtC,KAAD,EAAgBoD,UAAhB,EAAuC;AACrC,QAAIC,SAAS,GAAGD,UAAhB;;AACA,QAAI,CAAApD,KAAK,QAAL,YAAAA,KAAK,CAAE4C,MAAP,IAAgB,CAApB,EAAuB;AACrB,UAAI5C,KAAK,CAAC,CAAD,CAAL,KAAaoD,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAjB,EAAuC;AACrCD,QAAAA,SAAS,GAAGD,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAZ;AACD,OAFD,MAEO,IAAItD,KAAK,CAAC,CAAD,CAAL,KAAaoD,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAjB,EAAuC;AAC5CD,QAAAA,SAAS,GAAGD,UAAU,CAACE,MAAX,CAAkB,CAAlB,CAAZ;AACD;AACF;;AACD,WAAOD,SAAP;AACD,GAXkB,EAYnB,EAZmB,CAArB;AAeA,MAAME,aAAa,GAAG/B,KAAK,CAACc,WAAN,CACpB,UAAC7B,KAAD,EAAuD;AAAA,QAC7C8B,KAD6C,GAC1B9B,KAD0B,CAC7C8B,KAD6C;AAAA,QACnCiB,IADmC,iCAC1B/C,KAD0B;AAGrD;AACN;AACA;;;AACM,QAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAC6C,KAAD,EAAgD;AAC/D,UAAML,UAAU,GAAGK,KAAK,CAACC,MAAN,CAAa1D,KAAhC;AACA,UAAM2D,YAAY,GAAG7B,MAAM,CAACS,KAAD,CAA3B;AACA,UAAMc,SAAS,GAAGF,YAAY,CAACQ,YAAD,EAAeP,UAAf,CAA9B,CAH+D,CAK/D;;AACA,UAAIC,SAAS,KAAK,EAAlB,EAAsB;AACpBZ,QAAAA,QAAQ,CAAC,EAAD,EAAKF,KAAL,CAAR;AACA;AACD,OAT8D,CAW/D;;;AACA,UAAIa,UAAU,CAACR,MAAX,GAAoB,CAAxB,EAA2B;AACzB;AACA,YAAI1C,QAAQ,CAACkD,UAAD,EAAajD,IAAb,CAAZ,EAAgC;AAC9B;AACA,cAAMkD,UAAS,GAAGD,UAAU,CACzBnD,KADe,CACT,EADS,EAEf2D,MAFe,CAER,UAACC,CAAD,EAAItB,KAAJ;AAAA,mBAAcA,KAAK,GAAGhB,WAAW,CAACsB,KAAZ,EAAtB;AAAA,WAFQ,CAAlB;;AAIAb,UAAAA,SAAS,CAACqB,UAAD,CAAT,CAN8B,CAQ9B;;AACA,cAAIA,UAAS,CAACT,MAAV,KAAqBrB,WAAW,CAACsB,KAAZ,EAAzB,EAA8C;AAC5ChC,YAAAA,UAAU,QAAV,YAAAA,UAAU,CAAGwC,UAAS,CAACtB,IAAV,CAAe,EAAf,CAAH,CAAV;AACD;AACF;AACF,OAfD,MAeO;AACL;AACA,YAAI7B,QAAQ,CAACmD,SAAD,EAAYlD,IAAZ,CAAZ,EAA+B;AAC7BsC,UAAAA,QAAQ,CAACY,SAAD,EAAYd,KAAZ,CAAR;AACD;;AAEDZ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,KAnCD;;AAqCA,QAAMmC,SAAS,GAAG,SAAZA,SAAY,CAACL,KAAD,EAAgC;AAChD,UAAIA,KAAK,CAACM,GAAN,KAAc,WAAd,IAA6BhD,WAAjC,EAA8C;AAC5C,YAAK0C,KAAK,CAACC,MAAP,CAAmC1D,KAAnC,KAA6C,EAAjD,EAAqD;AACnD,cAAMgE,SAAS,GAAGzC,WAAW,CAAC0C,IAAZ,CAAiB1B,KAAjB,EAAwB,KAAxB,CAAlB;;AACA,cAAIyB,SAAJ,EAAe;AACbvB,YAAAA,QAAQ,CAAC,EAAD,EAAKF,KAAK,GAAG,CAAb,CAAR;AACA,8BAAMyB,SAAS,CAAC7B,IAAhB;AACAR,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,SAPD,MAOO;AACLA,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;AACF,KAbD;;AAeA,QAAMuC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBrC,MAAAA,eAAe,CAACU,KAAD,CAAf;AACD,KAFD;;AAIA,QAAM4B,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBtC,MAAAA,eAAe,CAAC,CAAC,CAAF,CAAf;AACD,KAFD;;AAIA,QAAMuC,QAAQ,GAAGxC,YAAY,KAAKW,KAAlC;AACA,QAAM8B,SAAS,GAAGlE,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,MAA9C;AAEA;AACE,oBAAc,4BADhB;AAEEmE,MAAAA,SAAS,EAAEnE,IAAI,KAAK,QAAT,GAAoB,SAApB,GAAgC,MAF7C;AAGEA,MAAAA,IAAI,EAAEkB,IAAI,GAAG,UAAH,GAAgBgD;AAH5B,OAIKb,IAJL;AAKEtC,MAAAA,EAAE,EAAKA,EAAL,SAAWqB,KALf;AAMEgC,MAAAA,QAAQ,EAAEpD,UANZ;AAOE,sBAAgB,qBAASC,SAAT,CAPlB;AAQER,MAAAA,QAAQ,EAAE,4BAAgB4C,IAAI,CAAC5C,QAArB,EAA+BA,QAA/B,CARZ;AASEkD,MAAAA,SAAS,EAAE,4BAAgBN,IAAI,CAACM,SAArB,EAAgCA,SAAhC,CATb;AAUEI,MAAAA,OAAO,EAAE,4BAAgBV,IAAI,CAACU,OAArB,EAA8BA,OAA9B,CAVX;AAWEC,MAAAA,MAAM,EAAE,4BAAgBX,IAAI,CAACW,MAArB,EAA6BA,MAA7B,CAXV;AAYEnE,MAAAA,KAAK,EAAE8B,MAAM,CAACS,KAAD,CAAN,IAAiB,EAZ1B;AAaEiC,MAAAA,YAAY,EAAExD,GAAG,GAAG,eAAH,GAAqB,KAbxC;AAcEF,MAAAA,WAAW,EAAEsD,QAAQ,GAAG,EAAH,GAAQtD;AAd/B;AAgBD,GAtFmB,EAuFpB,CACES,WADF,EAEEK,YAFF,EAGEuB,YAHF,EAIEjC,EAJF,EAKEC,UALF,EAMEE,IANF,EAOED,SAPF,EAQEL,WARF,EASEF,UATF,EAUEG,GAVF,EAWEF,WAXF,EAYE2B,QAZF,EAaET,SAbF,EAcE7B,IAdF,EAeE2B,MAfF,CAvFoB,CAAtB;AA0GA,SAAO;AACL;AACAyB,IAAAA,aAAa,EAAbA,aAFK;AAGL;AACArC,IAAAA,EAAE,EAAFA,EAJK;AAKLK,IAAAA,WAAW,EAAXA,WALK;AAMLO,IAAAA,MAAM,EAANA,MANK;AAOL;AACAW,IAAAA,QAAQ,EAARA,QARK;AASLT,IAAAA,SAAS,EAATA,SATK;AAULgB,IAAAA,KAAK,EAALA;AAVK,GAAP;AAYD;;AAQD;AACA;AACA;AACO,SAASyB,gBAAT,CACLhE,KADK,EAELiE,GAFK,EAGL;AAAA,MAFAjE,KAEA;AAFAA,IAAAA,KAEA,GAF+B,EAE/B;AAAA;;AAAA,MADAiE,GACA;AADAA,IAAAA,GACA,GADsB,IACtB;AAAA;;AAAA,4BAC0B5E,kBAAkB,EAD5C;AAAA,MACQyD,aADR,uBACQA,aADR;;AAAA,8BAE4B7D,qBAAqB,EAFjD;AAAA,MAEQ6C,KAFR,yBAEQA,KAFR;AAAA,MAEeoC,QAFf,yBAEeA,QAFf;;AAIA,SAAOpB,aAAa,cACf9C,KADe;AAElBiE,IAAAA,GAAG,EAAE,2BAAUC,QAAV,EAAoBD,GAApB,CAFa;AAGlBnC,IAAAA,KAAK,EAALA;AAHkB,KAApB;AAKD","sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\"\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [\n  PinInputProvider,\n  usePinInputContext,\n] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) focus(first.node, { nextTick: true })\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) focus(next.node, { nextTick: true })\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    if (first) focus(first.node)\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              focus(prevInput.node)\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"],"file":"use-pin-input.js"}