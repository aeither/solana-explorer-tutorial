{"version":3,"sources":["../../src/use-disclosure.ts"],"names":["useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","React","useState","defaultIsOpen","isOpenState","setIsOpen","isControlled","useCallback","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAUO,SAASA,aAAT,CAAuBC,KAAvB,EAAuD;AAAA,MAAhCA,KAAgC;AAAhCA,IAAAA,KAAgC,GAAJ,EAAI;AAAA;;AAAA,eAMxDA,KANwD;AAAA,MAEjDC,WAFiD,UAE1DC,OAF0D;AAAA,MAGlDC,UAHkD,UAG1DC,MAH0D;AAAA,MAIlDC,UAJkD,UAI1DC,MAJ0D;AAAA,MAKtDC,MALsD,UAK1DC,EAL0D;;AAAA,wBAQ3BC,KAAK,CAACC,QAAN,CAAeV,KAAK,CAACW,aAAN,IAAuB,KAAtC,CAR2B;AAAA,MAQrDC,WARqD;AAAA,MAQxCC,SARwC;;AAAA,6BAS7B,0CAAoBR,UAApB,EAAgCO,WAAhC,CAT6B;AAAA,MASrDE,YATqD;AAAA,MASvCR,MATuC;;AAW5D,MAAME,EAAE,GAAG,kBAAMD,MAAN,EAAc,YAAd,CAAX;AAEA,MAAML,OAAO,GAAGO,KAAK,CAACM,WAAN,CAAkB,YAAM;AACtC,QAAI,CAACD,YAAL,EAAmB;AACjBD,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AACDZ,IAAAA,WAAW,QAAX,YAAAA,WAAW;AACZ,GALe,EAKb,CAACa,YAAD,EAAeb,WAAf,CALa,CAAhB;AAOA,MAAMG,MAAM,GAAGK,KAAK,CAACM,WAAN,CAAkB,YAAM;AACrC,QAAI,CAACD,YAAL,EAAmB;AACjBD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACDV,IAAAA,UAAU,QAAV,YAAAA,UAAU;AACX,GALc,EAKZ,CAACW,YAAD,EAAeX,UAAf,CALY,CAAf;AAOA,MAAMa,QAAQ,GAAGP,KAAK,CAACM,WAAN,CAAkB,YAAM;AACvC,QAAME,MAAM,GAAGX,MAAM,GAAGJ,OAAH,GAAaE,MAAlC;AACAa,IAAAA,MAAM;AACP,GAHgB,EAGd,CAACX,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHc,CAAjB;AAKA,SAAO;AACLI,IAAAA,MAAM,EAAE,CAAC,CAACA,MADL;AAELF,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,OAAO,EAAPA,OAHK;AAILc,IAAAA,QAAQ,EAARA,QAJK;AAKLF,IAAAA,YAAY,EAAZA,YALK;AAMLI,IAAAA,cAAc,EAAE,wBAAClB,KAAD;AAAA,UAACA,KAAD;AAACA,QAAAA,KAAD,GAAc,EAAd;AAAA;;AAAA,0BACXA,KADW;AAEd,yBAAiB,MAFH;AAGd,yBAAiBQ,EAHH;AAIdW,QAAAA,OAAO,EAAE,4BAAgBnB,KAAK,CAACmB,OAAtB,EAA+BH,QAA/B;AAJK;AAAA,KANX;AAYLI,IAAAA,kBAAkB,EAAE,4BAACpB,KAAD;AAAA,UAACA,KAAD;AAACA,QAAAA,KAAD,GAAc,EAAd;AAAA;;AAAA,0BACfA,KADe;AAElBqB,QAAAA,MAAM,EAAE,CAACf,MAFS;AAGlBE,QAAAA,EAAE,EAAFA;AAHkB;AAAA;AAZf,GAAP;AAkBD","sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onCloseProp?.()\n  }, [isControlled, onCloseProp])\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenProp?.()\n  }, [isControlled, onOpenProp])\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"file":"use-disclosure.js"}