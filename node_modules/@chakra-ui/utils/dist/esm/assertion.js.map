{"version":3,"sources":["../../src/assertion.ts"],"names":["isNumber","value","isNotNumber","Number","isNaN","isFinite","isNumeric","parseFloat","isArray","Array","isEmptyArray","length","isFunction","isDefined","undefined","isUndefined","isObject","type","isEmptyObject","Object","keys","isNotEmptyObject","isNull","isString","prototype","toString","call","isCssVar","test","isEmpty","__DEV__","process","env","NODE_ENV","__TEST__","isRefObject","val","isInputEvent","target"],"mappings":"AAEA;AACA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAA+C;AACpD,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AAED,OAAO,SAASC,WAAT,CAAqBD,KAArB,EAAiC;AACtC,SACE,OAAOA,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAA7B,IAAoD,CAACE,MAAM,CAACE,QAAP,CAAgBJ,KAAhB,CADvD;AAGD;AAED,OAAO,SAASK,SAAT,CAAmBL,KAAnB,EAA+B;AACpC,SAAOA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAGM,UAAU,CAACN,KAAD,CAAlB,GAA4B,CAA5B,IAAiC,CAAzD;AACD,C,CAED;;AACA,OAAO,SAASO,OAAT,CAAoBP,KAApB,EAAmD;AACxD,SAAOQ,KAAK,CAACD,OAAN,CAAcP,KAAd,CAAP;AACD;AAED,OAAO,SAASS,YAAT,CAAsBT,KAAtB,EAAkC;AACvC,SAAOO,OAAO,CAACP,KAAD,CAAP,IAAkBA,KAAK,CAACU,MAAN,KAAiB,CAA1C;AACD,C,CAED;;AACA,OAAO,SAASC,UAAT,CACLX,KADK,EAEO;AACZ,SAAO,OAAOA,KAAP,KAAiB,UAAxB;AACD,C,CAED;;AACA,OAAO,SAASY,SAAT,CAAmBZ,KAAnB,EAA+B;AACpC,SAAO,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SAAjD;AACD;AAED,OAAO,SAASC,WAAT,CAAqBd,KAArB,EAAqD;AAC1D,SAAO,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SAAjD;AACD,C,CAED;;AACA,OAAO,SAASE,QAAT,CAAkBf,KAAlB,EAA6C;AAClD,MAAMgB,IAAI,GAAG,OAAOhB,KAApB;AACA,SACEA,KAAK,IAAI,IAAT,KACCgB,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,UAD/B,KAEA,CAACT,OAAO,CAACP,KAAD,CAHV;AAKD;AAED,OAAO,SAASiB,aAAT,CAAuBjB,KAAvB,EAAmC;AACxC,SAAOe,QAAQ,CAACf,KAAD,CAAR,IAAmBkB,MAAM,CAACC,IAAP,CAAYnB,KAAZ,EAAmBU,MAAnB,KAA8B,CAAxD;AACD;AAED,OAAO,SAASU,gBAAT,CAA0BpB,KAA1B,EAAuD;AAC5D,SAAOA,KAAK,IAAI,CAACiB,aAAa,CAACjB,KAAD,CAA9B;AACD;AAED,OAAO,SAASqB,MAAT,CAAgBrB,KAAhB,EAA2C;AAChD,SAAOA,KAAK,IAAI,IAAhB;AACD,C,CAED;;AACA,OAAO,SAASsB,QAAT,CAAkBtB,KAAlB,EAA+C;AACpD,SAAOkB,MAAM,CAACK,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BzB,KAA/B,MAA0C,iBAAjD;AACD;AAED,OAAO,SAAS0B,QAAT,CAAkB1B,KAAlB,EAA0C;AAC/C,SAAO,gBAAgB2B,IAAhB,CAAqB3B,KAArB,CAAP;AACD,C,CAED;;AACA,OAAO,SAAS4B,OAAT,CAAiB5B,KAAjB,EAAsC;AAC3C,MAAIO,OAAO,CAACP,KAAD,CAAX,EAAoB,OAAOS,YAAY,CAACT,KAAD,CAAnB;AACpB,MAAIe,QAAQ,CAACf,KAAD,CAAZ,EAAqB,OAAOiB,aAAa,CAACjB,KAAD,CAApB;AACrB,MAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,EAA/B,EAAmC,OAAO,IAAP;AACnC,SAAO,KAAP;AACD;AAED,OAAO,IAAM6B,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzC;AAEP,OAAO,IAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA1C;AAEP,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAAwD;AAC7D,SAAO,aAAaA,GAApB;AACD;AAED,OAAO,SAASC,YAAT,CACLpC,KADK,EAEkC;AACvC,SAAOA,KAAK,IAAIe,QAAQ,CAACf,KAAD,CAAjB,IAA4Be,QAAQ,CAACf,KAAK,CAACqC,MAAP,CAA3C;AACD","sourcesContent":["import { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport function isNotNumber(value: any) {\n  return (\n    typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n  )\n}\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport function isEmptyArray(value: any) {\n  return isArray(value) && value.length === 0\n}\n\n// Function assertions\nexport function isFunction<T extends Function = Function>(\n  value: any,\n): value is T {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport function isDefined(value: any) {\n  return typeof value !== \"undefined\" && value !== undefined\n}\n\nexport function isUndefined(value: any): value is undefined {\n  return typeof value === \"undefined\" || value === undefined\n}\n\n// Object assertions\nexport function isObject(value: any): value is Dict {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport function isEmptyObject(value: any) {\n  return isObject(value) && Object.keys(value).length === 0\n}\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport function isNull(value: any): value is null {\n  return value == null\n}\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\nexport function isCssVar(value: string): boolean {\n  return /^var\\(--.+\\)$/.test(value)\n}\n\n// Empty assertions\nexport function isEmpty(value: any): boolean {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n\nexport const __TEST__ = process.env.NODE_ENV === \"test\"\n\nexport function isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n\nexport function isInputEvent(\n  value: any,\n): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n"],"file":"assertion.js"}