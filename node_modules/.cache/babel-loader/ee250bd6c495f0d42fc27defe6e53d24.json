{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { css, isStyleProp } from \"@chakra-ui/styled-system\";\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\";\nimport _styled from \"@emotion/styled\";\nimport { shouldForwardProp } from \"./should-forward-prop\";\nimport { domElements } from \"./system.utils\";\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\n\nexport var toCSSObject = function toCSSObject(_ref) {\n  var baseStyle = _ref.baseStyle;\n  return function (props) {\n    var cssProp = props.css,\n        __css = props.__css,\n        sx = props.sx,\n        rest = _objectWithoutPropertiesLoose(props, [\"theme\", \"css\", \"__css\", \"sx\"]);\n\n    var styleProps = objectFilter(rest, function (_, prop) {\n      return isStyleProp(prop);\n    });\n    var finalBaseStyle = runIfFn(baseStyle, props);\n    var finalStyles = Object.assign({}, __css, finalBaseStyle, filterUndefined(styleProps), sx);\n    var computedCSS = css(finalStyles)(props.theme);\n    return cssProp ? [computedCSS, cssProp] : computedCSS;\n  };\n};\nexport function styled(component, options) {\n  var _ref2 = options != null ? options : {},\n      baseStyle = _ref2.baseStyle,\n      styledOptions = _objectWithoutPropertiesLoose(_ref2, [\"baseStyle\"]);\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp;\n  }\n\n  var styleObject = toCSSObject({\n    baseStyle: baseStyle\n  });\n  return _styled(component, styledOptions)(styleObject);\n}\nexport var chakra = styled;\ndomElements.forEach(function (tag) {\n  chakra[tag] = chakra(tag);\n});","map":{"version":3,"sources":["../../src/system.ts"],"names":["toCSSObject","baseStyle","props","css","sx","styleProps","objectFilter","isStyleProp","finalBaseStyle","runIfFn","finalStyles","Object","filterUndefined","computedCSS","cssProp","options","styledOptions","styleObject","_styled","chakra","domElements","tag"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAA,GAAA,EAAA,WAAA,QAAA,0BAAA;AAMA,SAAA,eAAA,EAAA,YAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAA,OAAA,MAAA,iBAAA;AACA,SAAA,iBAAA,QAAA,uBAAA;AAEA,SAAA,WAAA,QAAA,gBAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,WAA2B,GAAG,SAA9BA,WAA8B,CAAA,IAAA,EAAA;AAAA,MAAGC,SAAH,GAAA,IAAA,CAAGA,SAAH;AAAA,SAAoBC,UAAAA,KAAD,EAAW;AACvE,QAAM,OAAN,GAAA,KAAA,CAAeC,GAAf;AAAA,QAAM,KAAN,GAAA,KAAA,CAAM,KAAN;AAAA,QAAoCC,EAApC,GAAA,KAAA,CAAoCA,EAApC;AAAA,QAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;;AACA,QAAMC,UAAU,GAAGC,YAAY,CAAA,IAAA,EAAO,UAAA,CAAA,EAAA,IAAA;AAAA,aAAaC,WAAW,CAA9D,IAA8D,CAAxB;AAAA,KAAP,CAA/B;AACA,QAAMC,cAAc,GAAGC,OAAO,CAAA,SAAA,EAA9B,KAA8B,CAA9B;AACA,QAAMC,WAAW,GAAGC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,cAAAA,EAIlBC,eAAe,CAJGD,UAIH,CAJGA,EAApB,EAAoBA,CAApB;AAOA,QAAME,WAAW,GAAGV,GAAG,CAAHA,WAAG,CAAHA,CAAiBD,KAAK,CAA1C,KAAoBC,CAApB;AACA,WAAOW,OAAO,GAAG,CAAA,WAAA,EAAH,OAAG,CAAH,GAAd,WAAA;AAZyC,GAAA;AAApC,CAAA;AAuBP,OAAO,SAAA,MAAA,CAAA,SAAA,EAAA,OAAA,EAGL;AACA,MAAA,KAAA,GAAwCC,OAAxC,IAAA,IAAwCA,GAAxC,OAAwCA,GAAxC,EAAA;AAAA,MAAQd,SAAR,GAAA,KAAA,CAAQA,SAAR;AAAA,MAAA,aAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,MAAI,CAACe,aAAa,CAAlB,iBAAA,EAAsC;AACpCA,IAAAA,aAAa,CAAbA,iBAAAA,GAAAA,iBAAAA;AACD;;AAED,MAAMC,WAAW,GAAGjB,WAAW,CAAC;AAAEC,IAAAA,SAAAA,EAAAA;AAAF,GAAD,CAA/B;AACA,SAAOiB,OAAO,CAAA,SAAA,EAAPA,aAAO,CAAPA,CAAP,WAAOA,CAAP;AAID;AAqBD,OAAO,IAAMC,MAAM,GAAZ,MAAA;AAGPC,WAAW,CAAXA,OAAAA,CAAqBC,UAAAA,GAAD,EAAS;AAC3BF,EAAAA,MAAM,CAANA,GAAM,CAANA,GAAcA,MAAM,CAApBA,GAAoB,CAApBA;AADFC,CAAAA","sourcesContent":["import {\n  css,\n  isStyleProp,\n  StyleProps,\n  SystemStyleObject,\n} from \"@chakra-ui/styled-system\"\nimport { filterUndefined, objectFilter, runIfFn } from \"@chakra-ui/utils\"\nimport _styled, { CSSObject, FunctionInterpolation } from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\ntype StyleResolverProps = SystemStyleObject & {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: any\n  css?: CSSObject\n}\n\ninterface GetStyleObject {\n  (options: {\n    baseStyle?:\n      | SystemStyleObject\n      | ((props: StyleResolverProps) => SystemStyleObject)\n  }): FunctionInterpolation<StyleResolverProps>\n}\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const toCSSObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const { theme, css: cssProp, __css, sx, ...rest } = props\n  const styleProps = objectFilter(rest, (_, prop) => isStyleProp(prop))\n  const finalBaseStyle = runIfFn(baseStyle, props)\n  const finalStyles = Object.assign(\n    {},\n    __css,\n    finalBaseStyle,\n    filterUndefined(styleProps),\n    sx,\n  )\n  const computedCSS = css(finalStyles)(props.theme)\n  return cssProp ? [computedCSS, cssProp] : computedCSS\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?:\n    | SystemStyleObject\n    | ((props: StyleResolverProps) => SystemStyleObject)\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = toCSSObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof StyleProps\n    : \"ref\" | keyof StyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"]},"metadata":{},"sourceType":"module"}