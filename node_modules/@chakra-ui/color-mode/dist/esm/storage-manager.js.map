{"version":3,"sources":["../../src/storage-manager.ts"],"names":["__DEV__","hasSupport","Storage","storageKey","localStorageManager","get","init","value","localStorage","getItem","error","console","log","set","setItem","type","cookieStorageManager","cookies","match","RegExp","document","cookie"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAGA,IAAMC,UAAU,GAAG,MAAM,OAAOC,OAAP,KAAmB,WAA5C;;AACA,OAAO,IAAMC,UAAU,GAAG,sBAAnB;;AAUP;AACA;AACA;AACA,OAAO,IAAMC,mBAAmC,GAAG;AACjDC,EAAAA,GAAG,CAACC,IAAD,EAAQ;AACT,QAAI,CAACL,UAAU,EAAf,EAAmB,OAAOK,IAAP;;AACnB,QAAI;AACF,UAAMC,MAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAd;;AACA,aAAOI,MAAP,WAAOA,MAAP,GAAgBD,IAAhB;AACD,KAHD,CAGE,OAAOI,KAAP,EAAc;AACd,UAAIV,OAAJ,EAAa;AACXW,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AACD,aAAOJ,IAAP;AACD;AACF,GAZgD;;AAajDO,EAAAA,GAAG,CAACN,KAAD,EAAQ;AACT,QAAI,CAACN,UAAU,EAAf,EAAmB;;AACnB,QAAI;AACHO,MAAAA,YAAY,CAACM,OAAb,CAAqBX,UAArB,EAAiCI,KAAjC;AACA,KAFD,CAEE,OAAOG,KAAP,EAAc;AACd,UAAIV,OAAJ,EAAa;AACXW,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF,GAtBgD;;AAuBjDK,EAAAA,IAAI,EAAE;AAvB2C,CAA5C;AA0BP;AACA;AACA;;AACA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,OAAD;AAAA,MAACA,OAAD;AAACA,IAAAA,OAAD,GAAW,EAAX;AAAA;;AAAA,SAAmC;AACrEZ,IAAAA,GAAG,CAACC,IAAD,EAAQ;AACT,UAAMY,KAAK,GAAGD,OAAO,CAACC,KAAR,CAAc,IAAIC,MAAJ,WAAmBhB,UAAnB,cAAd,CAAd;;AAEA,UAAIe,KAAJ,EAAW;AACT,eAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,aAAOZ,IAAP;AACD,KAToE;;AAUrEO,IAAAA,GAAG,CAACN,KAAD,EAAQ;AACTa,MAAAA,QAAQ,CAACC,MAAT,GAAqBlB,UAArB,SAAmCI,KAAnC;AACD,KAZoE;;AAarEQ,IAAAA,IAAI,EAAE;AAb+D,GAAnC;AAAA,CAA7B","sourcesContent":["import { __DEV__ } from \"@chakra-ui/utils\"\nimport { ColorMode } from \"./color-mode.utils\"\n\nconst hasSupport = () => typeof Storage !== \"undefined\"\nexport const storageKey = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode): void\n  type: \"cookie\" | \"localStorage\"\n}\n\n/**\n * Simple object to handle read-write to localStorage\n */\nexport const localStorageManager: StorageManager = {\n  get(init?) {\n    if (!hasSupport()) return init\n    try {\n      const value = localStorage.getItem(storageKey) as MaybeColorMode\n      return value ?? init\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error)\n      }\n      return init\n    }\n  },\n  set(value) {\n    if (!hasSupport()) return\n    try {\n     localStorage.setItem(storageKey, value)\n    } catch (error) {\n      if (__DEV__) {\n        console.log(error)\n      }\n    }\n  },\n  type: \"localStorage\",\n}\n\n/**\n * Simple object to handle read-write to cookies\n */\nexport const cookieStorageManager = (cookies = \"\"): StorageManager => ({\n  get(init?) {\n    const match = cookies.match(new RegExp(`(^| )${storageKey}=([^;]+)`))\n\n    if (match) {\n      return match[2] as ColorMode\n    }\n\n    return init\n  },\n  set(value) {\n    document.cookie = `${storageKey}=${value}; max-age=31536000; path=/`\n  },\n  type: \"cookie\",\n})\n"],"file":"storage-manager.js"}