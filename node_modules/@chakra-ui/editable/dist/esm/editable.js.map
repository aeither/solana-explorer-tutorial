{"version":3,"sources":["../../src/editable.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","runIfFn","__DEV__","createContext","React","useEditable","EditableProvider","useEditableContext","name","errorMessage","Editable","props","ref","styles","ownProps","htmlProps","context","isEditing","onSubmit","onCancel","onEdit","_className","className","children","displayName","commonStyles","fontSize","fontWeight","textAlign","bg","EditablePreview","getPreviewProps","previewProps","cursor","display","preview","EditableInput","getInputProps","inputProps","outline","input","useEditableState","isDisabled","useEditableControls","getEditButtonProps","getCancelButtonProps","getSubmitButtonProps"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext, MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nconst [EditableProvider, useEditableContext] = createContext<EditableContext>({\n  name: \"EditableContext\",\n  errorMessage:\n    \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n})\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    BaseEditableProps,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\nexport const Editable = forwardRef<EditableProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </EditableProvider>\n  )\n})\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\"\n}\n\nconst commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  (props, ref) => {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useStyles()\n\n    const previewProps = getPreviewProps(props, ref) as HTMLChakraProps<\"span\">\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\"\n}\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useEditableContext()\n    const styles = useStyles()\n\n    const inputProps = getInputProps(props, ref) as HTMLChakraProps<\"input\">\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\"\n}\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\nexport function useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n\n/**\n * React hook use to create controls for the editable component\n */\nexport function useEditableControls(): Pick<\n  EditableContext,\n  | \"isEditing\"\n  | \"getEditButtonProps\"\n  | \"getCancelButtonProps\"\n  | \"getSubmitButtonProps\"\n> {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n"],"file":"editable.js"}