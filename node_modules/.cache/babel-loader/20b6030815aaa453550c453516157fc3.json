{"ast":null,"code":"var EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\nvar ecparams = ec.curve; // Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\n\nvar BN = ecparams.n.constructor;\n\nfunction loadCompressedPublicKey(first, xbuf) {\n  var x = new BN(xbuf); // overflow\n\n  if (x.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red); // compute corresponding Y\n\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();\n  if (first === 0x03 !== y.isOdd()) y = y.redNeg();\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\n\nfunction loadUncompressedPublicKey(first, xbuf, ybuf) {\n  var x = new BN(xbuf);\n  var y = new BN(ybuf); // overflow\n\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red);\n  y = y.toRed(ecparams.red); // is odd flag\n\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null; // x*x*x + b = y*y\n\n  var x3 = x.redSqr().redIMul(x);\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\n\nfunction loadPublicKey(pubkey) {\n  // length should be validated in interface\n  var first = pubkey[0];\n\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null;\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33));\n\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null;\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));\n\n    default:\n      return null;\n  }\n}\n\nfunction savePublicKey(output, point) {\n  var pubkey = point.encode(null, output.length === 33); // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n\n  for (var i = 0; i < output.length; ++i) {\n    output[i] = pubkey[i];\n  }\n}\n\nmodule.exports = {\n  contextRandomize: function contextRandomize() {\n    return 0;\n  },\n  privateKeyVerify: function privateKeyVerify(seckey) {\n    var bn = new BN(seckey);\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;\n  },\n  privateKeyNegate: function privateKeyNegate(seckey) {\n    var bn = new BN(seckey);\n    var negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(negate);\n    return 0;\n  },\n  privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {\n    var bn = new BN(tweak);\n    if (bn.cmp(ecparams.n) >= 0) return 1;\n    bn.iadd(new BN(seckey));\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);\n    if (bn.isZero()) return 1;\n    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(tweaked);\n    return 0;\n  },\n  privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {\n    var bn = new BN(tweak);\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n    bn.imul(new BN(seckey));\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);\n    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(tweaked);\n    return 0;\n  },\n  publicKeyVerify: function publicKeyVerify(pubkey) {\n    var pair = loadPublicKey(pubkey);\n    return pair === null ? 1 : 0;\n  },\n  publicKeyCreate: function publicKeyCreate(output, seckey) {\n    var bn = new BN(seckey);\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n    var point = ec.keyFromPrivate(seckey).getPublic();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyConvert: function publicKeyConvert(output, pubkey) {\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    var point = pair.getPublic();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyNegate: function publicKeyNegate(output, pubkey) {\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    var point = pair.getPublic();\n    point.y = point.y.redNeg();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyCombine: function publicKeyCombine(output, pubkeys) {\n    var pairs = new Array(pubkeys.length);\n\n    for (var i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i]);\n      if (pairs[i] === null) return 1;\n    }\n\n    var point = pairs[0].getPublic();\n\n    for (var _i = 1; _i < pairs.length; ++_i) {\n      point = point.add(pairs[_i].pub);\n    }\n\n    if (point.isInfinity()) return 2;\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyTweakAdd: function publicKeyTweakAdd(output, pubkey, tweak) {\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    tweak = new BN(tweak);\n    if (tweak.cmp(ecparams.n) >= 0) return 2;\n    var point = pair.getPublic().add(ecparams.g.mul(tweak));\n    if (point.isInfinity()) return 2;\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyTweakMul: function publicKeyTweakMul(output, pubkey, tweak) {\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    tweak = new BN(tweak);\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;\n    var point = pair.getPublic().mul(tweak);\n    savePublicKey(output, point);\n    return 0;\n  },\n  signatureNormalize: function signatureNormalize(sig) {\n    var r = new BN(sig.subarray(0, 32));\n    var s = new BN(sig.subarray(32, 64));\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);\n    }\n\n    return 0;\n  },\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport: function signatureExport(obj, sig) {\n    var sigR = sig.subarray(0, 32);\n    var sigS = sig.subarray(32, 64);\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;\n    var output = obj.output; // Prepare R\n\n    var r = output.subarray(4, 4 + 33);\n    r[0] = 0x00;\n    r.set(sigR, 1);\n    var lenR = 33;\n    var posR = 0;\n\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) {\n      ;\n    }\n\n    r = r.subarray(posR);\n    if (r[0] & 0x80) return 1;\n    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1; // Prepare S\n\n    var s = output.subarray(6 + 33, 6 + 33 + 33);\n    s[0] = 0x00;\n    s.set(sigS, 1);\n    var lenS = 33;\n    var posS = 0;\n\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) {\n      ;\n    }\n\n    s = s.subarray(posS);\n    if (s[0] & 0x80) return 1;\n    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1; // Set output length for return\n\n    obj.outputlen = 6 + lenR + lenS; // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n\n    output[0] = 0x30;\n    output[1] = obj.outputlen - 2;\n    output[2] = 0x02;\n    output[3] = r.length;\n    output.set(r, 4);\n    output[4 + lenR] = 0x02;\n    output[5 + lenR] = s.length;\n    output.set(s, 6 + lenR);\n    return 0;\n  },\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport: function signatureImport(output, sig) {\n    if (sig.length < 8) return 1;\n    if (sig.length > 72) return 1;\n    if (sig[0] !== 0x30) return 1;\n    if (sig[1] !== sig.length - 2) return 1;\n    if (sig[2] !== 0x02) return 1;\n    var lenR = sig[3];\n    if (lenR === 0) return 1;\n    if (5 + lenR >= sig.length) return 1;\n    if (sig[4 + lenR] !== 0x02) return 1;\n    var lenS = sig[5 + lenR];\n    if (lenS === 0) return 1;\n    if (6 + lenR + lenS !== sig.length) return 1;\n    if (sig[4] & 0x80) return 1;\n    if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;\n    if (sig[lenR + 6] & 0x80) return 1;\n    if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;\n    var sigR = sig.subarray(4, 4 + lenR);\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);\n    if (sigR.length > 32) return 1;\n    var sigS = sig.subarray(6 + lenR);\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);\n    if (sigS.length > 32) throw new Error('S length is too long');\n    var r = new BN(sigR);\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0);\n    var s = new BN(sig.subarray(6 + lenR));\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0);\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);\n    return 0;\n  },\n  ecdsaSign: function ecdsaSign(obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      var _noncefn = noncefn;\n\n      noncefn = function noncefn(counter) {\n        var nonce = _noncefn(message, seckey, null, data, counter);\n\n        var isValid = nonce instanceof Uint8Array && nonce.length === 32;\n        if (!isValid) throw new Error('This is the way');\n        return new BN(nonce);\n      };\n    }\n\n    var d = new BN(seckey);\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;\n    var sig;\n\n    try {\n      sig = ec.sign(message, seckey, {\n        canonical: true,\n        k: noncefn,\n        pers: data\n      });\n    } catch (err) {\n      return 1;\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);\n    obj.recid = sig.recoveryParam;\n    return 0;\n  },\n  ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {\n    var sigObj = {\n      r: sig.subarray(0, 32),\n      s: sig.subarray(32, 64)\n    };\n    var sigr = new BN(sigObj.r);\n    var sigs = new BN(sigObj.s);\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 2;\n    var point = pair.getPublic();\n    var isValid = ec.verify(msg32, sigObj, point);\n    return isValid ? 0 : 3;\n  },\n  ecdsaRecover: function ecdsaRecover(output, sig, recid, msg32) {\n    var sigObj = {\n      r: sig.slice(0, 32),\n      s: sig.slice(32, 64)\n    };\n    var sigr = new BN(sigObj.r);\n    var sigs = new BN(sigObj.s);\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n    if (sigr.isZero() || sigs.isZero()) return 2; // Can throw `throw new Error('Unable to find sencond key candinate');`\n\n    var point;\n\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid);\n    } catch (err) {\n      return 2;\n    }\n\n    savePublicKey(output, point);\n    return 0;\n  },\n  ecdh: function ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    var pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    var scalar = new BN(seckey);\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;\n    var point = pair.getPublic().mul(scalar);\n\n    if (hashfn === undefined) {\n      var _data = point.encode(null, true);\n\n      var sha256 = ec.hash().update(_data).digest();\n\n      for (var i = 0; i < 32; ++i) {\n        output[i] = sha256[i];\n      }\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32);\n      var x = point.getX().toArray('be', 32);\n\n      for (var _i2 = 0; _i2 < 32; ++_i2) {\n        xbuf[_i2] = x[_i2];\n      }\n\n      if (!ybuf) ybuf = new Uint8Array(32);\n      var y = point.getY().toArray('be', 32);\n\n      for (var _i3 = 0; _i3 < 32; ++_i3) {\n        ybuf[_i3] = y[_i3];\n      }\n\n      var hash = hashfn(xbuf, ybuf, data);\n      var isValid = hash instanceof Uint8Array && hash.length === output.length;\n      if (!isValid) return 2;\n      output.set(hash);\n    }\n\n    return 0;\n  }\n};","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/secp256k1/lib/elliptic.js"],"names":["EC","require","ec","ecparams","curve","BN","n","constructor","loadCompressedPublicKey","first","xbuf","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","ybuf","x3","redISub","isZero","loadPublicKey","pubkey","length","subarray","savePublicKey","output","point","encode","i","module","exports","contextRandomize","privateKeyVerify","seckey","bn","privateKeyNegate","negate","sub","umod","toArrayLike","Uint8Array","set","privateKeyTweakAdd","tweak","iadd","isub","tweaked","privateKeyTweakMul","imul","publicKeyVerify","pair","publicKeyCreate","keyFromPrivate","getPublic","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","pairs","Array","add","isInfinity","publicKeyTweakAdd","g","mul","publicKeyTweakMul","signatureNormalize","sig","r","s","nh","signatureExport","obj","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","slice","Error","ecdsaSign","message","data","noncefn","_noncefn","counter","nonce","isValid","d","sign","canonical","k","pers","err","signature","recid","recoveryParam","ecdsaVerify","msg32","sigObj","sigr","sigs","verify","ecdsaRecover","recoverPubKey","ecdh","hashfn","scalar","undefined","sha256","hash","update","digest","getX","toArray","getY"],"mappings":"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","sourcesContent":["const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"]},"metadata":{},"sourceType":"script"}