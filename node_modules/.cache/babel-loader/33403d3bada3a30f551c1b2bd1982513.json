{"ast":null,"code":"import { getOwnerDocument } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\n\nexport function useOutsideClick(props) {\n  var ref = props.ref,\n      handler = props.handler,\n      _props$enabled = props.enabled,\n      enabled = _props$enabled === void 0 ? true : _props$enabled;\n  var savedHandler = useCallbackRef(handler);\n  var stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  var state = stateRef.current;\n  useEffect(function () {\n    if (!enabled) return;\n\n    var onPointerDown = function onPointerDown(e) {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n\n    var onMouseUp = function onMouseUp(event) {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n\n    var onTouchEnd = function onTouchEnd(event) {\n      state.ignoreEmulatedMouseEvents = true;\n\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n\n    var doc = getOwnerDocument(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return function () {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  var _ref$current;\n\n  var target = event.target;\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (target) {\n    var doc = getOwnerDocument(target);\n    if (!doc.body.contains(target)) return false;\n  }\n\n  return !((_ref$current = ref.current) != null && _ref$current.contains(target));\n}","map":{"version":3,"sources":["../../src/use-outside-click.ts"],"names":["enabled","savedHandler","useCallbackRef","stateRef","useRef","isPointerDown","ignoreEmulatedMouseEvents","state","useEffect","onPointerDown","e","isValidEvent","onMouseUp","event","onTouchEnd","handler","doc","getOwnerDocument","ref","target"],"mappings":"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","sourcesContent":["import { getOwnerDocument } from \"@chakra-ui/utils\"\nimport { RefObject, useEffect, useRef } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport interface UseOutsideClickProps {\n  /**\n   * Whether the hook is enabled\n   */\n  enabled?: boolean\n  /**\n   * The reference to a DOM element.\n   */\n  ref: RefObject<HTMLElement>\n  /**\n   * Function invoked when a click is triggered outside the referenced element.\n   */\n  handler?: (e: Event) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useOutsideClick(props: UseOutsideClickProps) {\n  const { ref, handler, enabled = true } = props\n  const savedHandler = useCallbackRef(handler)\n\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  const state = stateRef.current\n\n  useEffect(() => {\n    if (!enabled) return\n    const onPointerDown: any = (e: PointerEvent) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true\n      }\n    }\n\n    const onMouseUp: any = (event: MouseEvent) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false\n        return\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const onTouchEnd = (event: TouchEvent) => {\n      state.ignoreEmulatedMouseEvents = true\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const doc = getOwnerDocument(ref.current)\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, savedHandler, state, enabled])\n}\n\nfunction isValidEvent(event: any, ref: React.RefObject<HTMLElement>) {\n  const target = event.target as HTMLElement\n  if (event.button > 0) return false\n  // if the event target is no longer in the document\n  if (target) {\n    const doc = getOwnerDocument(target)\n    if (!doc.body.contains(target)) return false\n  }\n\n  return !ref.current?.contains(target)\n}\n"]},"metadata":{},"sourceType":"module"}