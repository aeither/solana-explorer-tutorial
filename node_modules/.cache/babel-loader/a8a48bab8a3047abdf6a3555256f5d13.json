{"ast":null,"code":"import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\n\nfunction useDrag(props) {\n  var groupDragControls = props.dragControls,\n      visualElement = props.visualElement;\n  var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n  var dragControls = useConstant(function () {\n    return new VisualElementDragControls({\n      visualElement: visualElement\n    });\n  });\n  dragControls.setProps(__assign(__assign({}, props), {\n    transformPagePoint: transformPagePoint\n  })); // If we've been provided a DragControls for manual control over the drag gesture,\n  // subscribe this component to it on mount.\n\n  useEffect(function () {\n    return groupDragControls && groupDragControls.subscribe(dragControls);\n  }, [dragControls]); // Mount the drag controls with the visualElement\n\n  useEffect(function () {\n    return dragControls.mount(visualElement);\n  }, []);\n}\n\nexport { useDrag };","map":{"version":3,"sources":["/Users/lin/Documents/Projects/solana-explorer-tutorial/node_modules/framer-motion/dist/es/gestures/drag/use-drag.js"],"names":["__assign","useContext","useEffect","MotionConfigContext","VisualElementDragControls","useConstant","useDrag","props","groupDragControls","dragControls","visualElement","transformPagePoint","setProps","subscribe","mount"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,iBAAiB,GAAGD,KAAK,CAACE,YAA9B;AAAA,MAA4CC,aAAa,GAAGH,KAAK,CAACG,aAAlE;AACA,MAAIC,kBAAkB,GAAGV,UAAU,CAACE,mBAAD,CAAV,CAAgCQ,kBAAzD;AACA,MAAIF,YAAY,GAAGJ,WAAW,CAAC,YAAY;AACvC,WAAO,IAAID,yBAAJ,CAA8B;AACjCM,MAAAA,aAAa,EAAEA;AADkB,KAA9B,CAAP;AAGH,GAJ6B,CAA9B;AAKAD,EAAAA,YAAY,CAACG,QAAb,CAAsBZ,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKO,KAAL,CAAT,EAAsB;AAAEI,IAAAA,kBAAkB,EAAEA;AAAtB,GAAtB,CAA9B,EARoB,CASpB;AACA;;AACAT,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOM,iBAAiB,IAAIA,iBAAiB,CAACK,SAAlB,CAA4BJ,YAA5B,CAA5B;AAAwE,GAAvF,EAAyF,CAACA,YAAD,CAAzF,CAAT,CAXoB,CAYpB;;AACAP,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOO,YAAY,CAACK,KAAb,CAAmBJ,aAAnB,CAAP;AAA2C,GAA1D,EAA4D,EAA5D,CAAT;AACH;;AAED,SAASJ,OAAT","sourcesContent":["import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var dragControls = useConstant(function () {\n        return new VisualElementDragControls({\n            visualElement: visualElement,\n        });\n    });\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\n    // Mount the drag controls with the visualElement\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\n}\n\nexport { useDrag };\n"]},"metadata":{},"sourceType":"module"}