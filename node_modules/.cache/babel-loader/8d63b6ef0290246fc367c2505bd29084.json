{"ast":null,"code":"import { t, transforms } from \"../utils\";\nexport var typography = {\n  fontFamily: t.prop(\"fontFamily\", \"fonts\"),\n  fontSize: t.prop(\"fontSize\", \"fontSizes\", transforms.px),\n  fontWeight: t.prop(\"fontWeight\", \"fontWeights\"),\n  lineHeight: t.prop(\"lineHeight\", \"lineHeights\"),\n  letterSpacing: t.prop(\"letterSpacing\", \"letterSpacings\"),\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  noOfLines: {\n    static: {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      display: \"-webkit-box\",\n      WebkitBoxOrient: \"vertical\",\n      //@ts-ignore\n      WebkitLineClamp: \"var(--chakra-line-clamp)\"\n    },\n    property: \"--chakra-line-clamp\"\n  },\n  isTruncated: {\n    transform: function transform(value) {\n      if (value === true) {\n        return {\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\"\n        };\n      }\n    }\n  }\n};\n/**\n * Types for typography related CSS properties\n */","map":{"version":3,"sources":["../../../src/config/typography.ts"],"names":["typography","fontFamily","t","fontSize","transforms","fontWeight","lineHeight","letterSpacing","textAlign","fontStyle","wordBreak","overflowWrap","textOverflow","textTransform","whiteSpace","noOfLines","static","overflow","display","WebkitBoxOrient","WebkitLineClamp","property","isTruncated","transform","value"],"mappings":"AAEA,SAAA,CAAA,EAAA,UAAA,QAAA,UAAA;AAEA,OAAO,IAAMA,UAAkB,GAAG;AAChCC,EAAAA,UAAU,EAAEC,CAAC,CAADA,IAAAA,CAAAA,YAAAA,EADoB,OACpBA,CADoB;AAEhCC,EAAAA,QAAQ,EAAED,CAAC,CAADA,IAAAA,CAAAA,UAAAA,EAAAA,WAAAA,EAAgCE,UAAU,CAFpB,EAEtBF,CAFsB;AAGhCG,EAAAA,UAAU,EAAEH,CAAC,CAADA,IAAAA,CAAAA,YAAAA,EAHoB,aAGpBA,CAHoB;AAIhCI,EAAAA,UAAU,EAAEJ,CAAC,CAADA,IAAAA,CAAAA,YAAAA,EAJoB,aAIpBA,CAJoB;AAKhCK,EAAAA,aAAa,EAAEL,CAAC,CAADA,IAAAA,CAAAA,eAAAA,EALiB,gBAKjBA,CALiB;AAMhCM,EAAAA,SAAS,EANuB,IAAA;AAOhCC,EAAAA,SAAS,EAPuB,IAAA;AAQhCC,EAAAA,SAAS,EARuB,IAAA;AAShCC,EAAAA,YAAY,EAToB,IAAA;AAUhCC,EAAAA,YAAY,EAVoB,IAAA;AAWhCC,EAAAA,aAAa,EAXmB,IAAA;AAYhCC,EAAAA,UAAU,EAZsB,IAAA;AAahCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EADF,QAAA;AAENL,MAAAA,YAAY,EAFN,UAAA;AAGNM,MAAAA,OAAO,EAHD,aAAA;AAINC,MAAAA,eAAe,EAJT,UAAA;AAKN;AACAC,MAAAA,eAAe,EAAE;AANX,KADC;AASTC,IAAAA,QAAQ,EAAE;AATD,GAbqB;AAwBhCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SADW,qBACF,KADE,EACM;AACf,UAAIC,KAAK,KAAT,IAAA,EAAoB;AAClB,eAAO;AACLP,UAAAA,QAAQ,EADH,QAAA;AAELL,UAAAA,YAAY,EAFP,UAAA;AAGLE,UAAAA,UAAU,EAAE;AAHP,SAAP;AAKD;AACF;AATU;AAxBmB,CAA3B;AAqCP;AACA;AACA","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config } from \"../utils/prop-config\"\nimport { ResponsiveValue, t, Token, transforms } from \"../utils\"\n\nexport const typography: Config = {\n  fontFamily: t.prop(\"fontFamily\", \"fonts\"),\n  fontSize: t.prop(\"fontSize\", \"fontSizes\", transforms.px),\n  fontWeight: t.prop(\"fontWeight\", \"fontWeights\"),\n  lineHeight: t.prop(\"lineHeight\", \"lineHeights\"),\n  letterSpacing: t.prop(\"letterSpacing\", \"letterSpacings\"),\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  noOfLines: {\n    static: {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      display: \"-webkit-box\",\n      WebkitBoxOrient: \"vertical\",\n      //@ts-ignore\n      WebkitLineClamp: \"var(--chakra-line-clamp)\",\n    },\n    property: \"--chakra-line-clamp\",\n  },\n  isTruncated: {\n    transform(value) {\n      if (value === true) {\n        return {\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n        }\n      }\n    },\n  },\n}\n\n/**\n * Types for typography related CSS properties\n */\nexport interface TypographyProps {\n  /**\n   * The CSS `font-weight` property\n   */\n  fontWeight?: Token<number | (string & {}), \"fontWeights\">\n  /**\n   * The CSS `line-height` property\n   */\n  lineHeight?: Token<CSS.Property.LineHeight | number, \"lineHeights\">\n  /**\n   * The CSS `letter-spacing` property\n   */\n  letterSpacing?: Token<CSS.Property.LetterSpacing | number, \"letterSpacings\">\n\n  /**\n   * The CSS `font-size` property\n   */\n  fontSize?: Token<CSS.Property.FontSize | number, \"fontSizes\">\n  /**\n   * The CSS `font-family` property\n   */\n  fontFamily?: Token<CSS.Property.FontFamily, \"fonts\">\n  /**\n   * The CSS `text-align` property\n   */\n  textAlign?: Token<CSS.Property.TextAlign>\n  /**\n   * The CSS `font-style` property\n   */\n  fontStyle?: Token<CSS.Property.FontStyle>\n  /**\n   * The CSS `word-break` property\n   */\n  wordBreak?: Token<CSS.Property.WordBreak>\n  /**\n   * The CSS `overflow-wrap` property\n   */\n  overflowWrap?: Token<CSS.Property.OverflowWrap>\n  /**\n   * The CSS `text-overflow` property\n   */\n  textOverflow?: Token<CSS.Property.TextOverflow>\n  /**\n   * The CSS `text-transform` property\n   */\n  textTransform?: Token<CSS.Property.TextTransform>\n  /**\n   * The CSS `white-space` property\n   */\n  whiteSpace?: Token<CSS.Property.WhiteSpace>\n  /**\n   * Used to visually truncate a text after a number of lines.\n   */\n  noOfLines?: ResponsiveValue<number>\n  /**\n   * If `true`, it clamps truncate a text after one line.\n   * @deprecated - Use `noOfLines` instead\n   */\n  isTruncated?: boolean\n}\n"]},"metadata":{},"sourceType":"module"}