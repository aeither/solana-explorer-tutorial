{"version":3,"sources":["../../src/create-media-query.ts"],"names":["createMediaQueries","breakpoints","Object","entries","sort","a","b","Number","parseInt","map","index","arr","breakpoint","minWidth","next","maxWidth","undefined","query","createMediaQueryString","hasMinWidth","toMediaString","subtract","measurementRegex","calculateMeasurement","value","modifier","replace","match","parseFloat","endsWith"],"mappings":";;;;;AAAA;;AAEe,SAASA,kBAAT,CAA4BC,WAA5B,EAA6D;AAC1E,SACEC,MAAM,CAACC,OAAP,CAAeF,WAAf,EACE;AACA;AAFF,GAGGG,IAHH,CAGQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACJC,MAAM,CAACC,QAAP,CAAgBH,CAAC,CAAC,CAAD,CAAjB,EAAsB,EAAtB,IAA4BE,MAAM,CAACC,QAAP,CAAgBF,CAAC,CAAC,CAAD,CAAjB,EAAsB,EAAtB,CAA5B,GAAwD,CAAxD,GAA4D,CAAC,CADzD;AAAA,GAHR,EAMGG,GANH,CAMO,gBAAyBC,KAAzB,EAAgCC,GAAhC,EAAwC;AAAA,QAAtCC,UAAsC;AAAA,QAA1BC,QAA0B;AAC3C;AACA,QAAMC,IAAI,GAAGH,GAAG,CAACD,KAAK,GAAG,CAAT,CAAhB,CAF2C,CAG3C;;AACA,QAAMK,QAAQ,GAAGD,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAaE,SAAlC;AACA,QAAMC,KAAK,GAAGC,sBAAsB,CAACL,QAAD,EAAWE,QAAX,CAApC;AAEA,WAAO;AACLF,MAAAA,QAAQ,EAARA,QADK;AAELE,MAAAA,QAAQ,EAARA,QAFK;AAGLH,MAAAA,UAAU,EAAVA,UAHK;AAILK,MAAAA,KAAK,EAALA;AAJK,KAAP;AAMD,GAnBH,CADF;AAsBD;AAED;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCL,QAAhC,EAAkDE,QAAlD,EAAqE;AACnE,MAAMI,WAAW,GAAGX,QAAQ,CAACK,QAAD,EAAW,EAAX,CAAR,IAA0B,CAA9C;;AAEA,MAAI,CAACM,WAAD,IAAgB,CAACJ,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,oBAAkBG,aAAa,CAACP,QAAD,CAA/B,MAAT;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAOE,KAAP;AACD;;AAED,MAAIA,KAAJ,EAAW;AACTA,IAAAA,KAAK,IAAI,OAAT;AACD;;AAEDA,EAAAA,KAAK,qBAAmBG,aAAa,CAACC,QAAQ,CAACN,QAAD,CAAT,CAAhC,MAAL;AAEA,SAAOE,KAAP;AACD;;AASD,IAAMK,gBAAgB,GAAG,mBAAzB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,KAD2B,EAE3BC,QAF2B,EAGhB;AACX,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,iBAAUA,KAAK,GAAGC,QAAlB;AACD;;AAED,SAAOD,KAAK,CAACE,OAAN,CACLJ,gBADK,EAEL,UAACK,KAAD;AAAA,iBAAcC,UAAU,CAACD,KAAD,CAAV,GAAoBF,QAAlC;AAAA,GAFK,CAAP;AAID,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,QAAT,CAAkBG,KAAlB,EAAiC;AAC/B,SAAOD,oBAAoB,CAACC,KAAD,EAAQA,KAAK,CAACK,QAAN,CAAe,IAAf,IAAuB,CAAC,CAAxB,GAA4B,CAAC,IAArC,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAAST,aAAT,CAAuBI,KAAvB,EAA8C;AAC5C,SAAO,qBAASA,KAAT,IAAqBA,KAArB,UAAiCA,KAAxC;AACD","sourcesContent":["import { Dict, isNumber, StringOrNumber } from \"@chakra-ui/utils\"\n\nexport default function createMediaQueries(breakpoints: Dict): MediaQuery[] {\n  return (\n    Object.entries(breakpoints)\n      // sort css units in ascending order to ensure media queries are generated\n      // in the correct order and reference to each other correctly aswell\n      .sort((a, b) =>\n        Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1,\n      )\n      .map(([breakpoint, minWidth], index, arr) => {\n        // given a following breakpoint\n        const next = arr[index + 1]\n        // this breakpoint must end prior the threshold of the next\n        const maxWidth = next ? next[1] : undefined\n        const query = createMediaQueryString(minWidth, maxWidth)\n\n        return {\n          minWidth,\n          maxWidth,\n          breakpoint,\n          query,\n        }\n      })\n  )\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n"],"file":"create-media-query.js"}