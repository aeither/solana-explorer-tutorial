{"version":3,"sources":["../../src/popover.tsx"],"names":["CloseButton","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","runIfFn","__DEV__","React","PopoverProvider","usePopoverContext","PopoverTransition","usePopover","Popover","props","styles","children","rest","context","isOpen","onClose","forceUpdate","displayName","PopoverTrigger","child","Children","only","getTriggerProps","cloneElement","ref","PopoverContent","rootProps","contentProps","getPopoverProps","getPopoverPositionerProps","contentStyles","position","display","flexDirection","content","popper","className","PopoverHeader","getHeaderProps","header","PopoverBody","getBodyProps","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","bg","bgColor","backgroundColor","getArrowProps","getArrowInnerProps","arrowBg","arrow","undefined"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const { rootProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...getPopoverProps(contentProps, ref)}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { getBodyProps } = usePopoverContext()\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getBodyProps(props, ref)}\n      className={cx(\"chakra-popover__body\", props.className)}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      insetEnd=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { bg, bgColor, backgroundColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = useStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          ...styles.arrow,\n          \"--popper-arrow-bg\": arrowBg\n            ? `colors.${arrowBg}, ${arrowBg}`\n            : undefined,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"],"file":"popover.js"}