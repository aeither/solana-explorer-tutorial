{"ast":null,"code":"import * as React from \"react\";\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\n\nexport function createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? true : _options$strict,\n      _options$errorMessage = _options.errorMessage,\n      errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n      name = _options.name;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n\n  function useContext() {\n    var context = React.useContext(Context);\n\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}","map":{"version":3,"sources":["../../src/context.ts"],"names":["options","strict","errorMessage","name","Context","React","context","error","Error"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAoBA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,aAAA,CAAA,OAAA,EAAwE;AAAA,MAApCA,OAAoC,KAAA,KAAA,CAAA,EAAA;AAApCA,IAAAA,OAAoC,GAAJ,EAAhCA;AAAoC;;AAC7E,iBAAA,OAAA;AAAA,iCACEC,MADF;AAAA,MACEA,MADF,gCAAM,IAAN;AAAA,uCAEEC,YAFF;AAAA,MAEEA,YAFF,sCAAM,4FAAN;AAAA,MAGEC,IAHF,YAGEA,IAHF;AAMA,MAAMC,OAAO,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAhB,SAAgBA,CAAhB;AAEAD,EAAAA,OAAO,CAAPA,WAAAA,GAAAA,IAAAA;;AAEA,WAAA,UAAA,GAAsB;AACpB,QAAME,OAAO,GAAGD,KAAK,CAALA,UAAAA,CAAhB,OAAgBA,CAAhB;;AAEA,QAAI,CAAA,OAAA,IAAJ,MAAA,EAAwB;AACtB,UAAME,KAAK,GAAG,IAAA,KAAA,CAAd,YAAc,CAAd;AACAA,MAAAA,KAAK,CAALA,IAAAA,GAAAA,cAAAA;AACAC,MAAAA,KAAK,CAALA,iBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAK,CAALA,iBAAAA,CAAAA,KAAAA,EAAAA,UAAAA,CAAAA;AACA,YAAA,KAAA;AACD;;AAED,WAAA,OAAA;AACD;;AAED,SAAO,CACLJ,OAAO,CADF,QAAA,EAAA,UAAA,EAAP,OAAO,CAAP;AAKD","sourcesContent":["import * as React from \"react\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(errorMessage)\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n"]},"metadata":{},"sourceType":"module"}