{"version":3,"sources":["../../src/use-merge-refs.ts"],"names":["React","assignRef","ref","value","current","error","Error","useMergeRefs","refs","useMemo","every","node","forEach"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,OAAO,SAASC,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;AACzE,MAAID,GAAG,IAAI,IAAX,EAAiB;;AAEjB,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACA;AACD;;AAED,MAAI;AACF;AACAD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,2BAAkCH,KAAlC,kBAAoDD,GAApD,OAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,YAAT,GAA+D;AAAA,oCAAnCC,IAAmC;AAAnCA,IAAAA,IAAmC;AAAA;;AACpE,SAAOR,KAAK,CAACS,OAAN,CAAc,MAAM;AACzB,QAAID,IAAI,CAACE,KAAL,CAAYR,GAAD,IAASA,GAAG,IAAI,IAA3B,CAAJ,EAAsC;AACpC,aAAO,IAAP;AACD;;AACD,WAAQS,IAAD,IAAa;AAClBH,MAAAA,IAAI,CAACI,OAAL,CAAcV,GAAD,IAAS;AACpB,YAAIA,GAAJ,EAASD,SAAS,CAACC,GAAD,EAAMS,IAAN,CAAT;AACV,OAFD;AAGD,KAJD;AAKD,GATM,EASJH,IATI,CAAP;AAUD","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"],"file":"use-merge-refs.js"}